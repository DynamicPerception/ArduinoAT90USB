
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008e  00800100  0001f000  000010d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001000  0001e000  0001e000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000026  0001ffa0  0001ffa0  00001162  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  00001188  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  000011a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000016  0080018e  0080018e  000011a8  2**0
                  ALLOC
  6 .noinit       00000002  008001a4  008001a4  000011a8  2**0
                  ALLOC
  7 .debug_aranges 00000318  00000000  00000000  000011a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_pubnames 00000869  00000000  00000000  000014c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00004d0b  00000000  00000000  00001d29  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000132f  00000000  00000000  00006a34  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000095f9  00000000  00000000  00007d63  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000490  00000000  00000000  0001135c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000021c2  00000000  00000000  000117ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000029c3  00000000  00000000  000139ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 000d6f79  00000000  00000000  00016371  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000440  00000000  00000000  000ed2ea  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001e000 <__vectors>:
uint8_t USB_Device_ControlEndpointSize = ENDPOINT_CONTROLEP_DEFAULT_SIZE;
#endif

bool Endpoint_ConfigureEndpointTable(const USB_Endpoint_Table_t* const Table,
                                     const uint8_t Entries)
{
   1e000:	58 c0       	rjmp	.+176    	; 0x1e0b2 <__ctors_end>
	#if defined(USB_CAN_BE_BOTH)
	USB_CurrentMode = USB_MODE_None;
	#endif

	USB_IsInitialized = false;
}
   1e002:	00 00       	nop
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
   1e004:	9b c0       	rjmp	.+310    	; 0x1e13c <__bad_interrupt>
   1e006:	00 00       	nop
   1e008:	99 c0       	rjmp	.+306    	; 0x1e13c <__bad_interrupt>
   1e00a:	00 00       	nop
   1e00c:	97 c0       	rjmp	.+302    	; 0x1e13c <__bad_interrupt>
   1e00e:	00 00       	nop
   1e010:	95 c0       	rjmp	.+298    	; 0x1e13c <__bad_interrupt>
   1e012:	00 00       	nop
   1e014:	93 c0       	rjmp	.+294    	; 0x1e13c <__bad_interrupt>
   1e016:	00 00       	nop
   1e018:	91 c0       	rjmp	.+290    	; 0x1e13c <__bad_interrupt>
   1e01a:	00 00       	nop
   1e01c:	8f c0       	rjmp	.+286    	; 0x1e13c <__bad_interrupt>
   1e01e:	00 00       	nop
   1e020:	8d c0       	rjmp	.+282    	; 0x1e13c <__bad_interrupt>
   1e022:	00 00       	nop
   1e024:	8b c0       	rjmp	.+278    	; 0x1e13c <__bad_interrupt>
   1e026:	00 00       	nop
   1e028:	5e c5       	rjmp	.+2748   	; 0x1eae6 <__vector_10>
   1e02a:	00 00       	nop
   1e02c:	87 c0       	rjmp	.+270    	; 0x1e13c <__bad_interrupt>
   1e02e:	00 00       	nop
   1e030:	85 c0       	rjmp	.+266    	; 0x1e13c <__bad_interrupt>
   1e032:	00 00       	nop
   1e034:	83 c0       	rjmp	.+262    	; 0x1e13c <__bad_interrupt>
   1e036:	00 00       	nop
   1e038:	81 c0       	rjmp	.+258    	; 0x1e13c <__bad_interrupt>
   1e03a:	00 00       	nop
   1e03c:	7f c0       	rjmp	.+254    	; 0x1e13c <__bad_interrupt>
   1e03e:	00 00       	nop
   1e040:	7d c0       	rjmp	.+250    	; 0x1e13c <__bad_interrupt>
   1e042:	00 00       	nop
   1e044:	7b c0       	rjmp	.+246    	; 0x1e13c <__bad_interrupt>
   1e046:	00 00       	nop
   1e048:	79 c0       	rjmp	.+242    	; 0x1e13c <__bad_interrupt>
   1e04a:	00 00       	nop
   1e04c:	77 c0       	rjmp	.+238    	; 0x1e13c <__bad_interrupt>
   1e04e:	00 00       	nop
   1e050:	76 c0       	rjmp	.+236    	; 0x1e13e <__vector_20>
   1e052:	00 00       	nop
   1e054:	73 c0       	rjmp	.+230    	; 0x1e13c <__bad_interrupt>
   1e056:	00 00       	nop
   1e058:	71 c0       	rjmp	.+226    	; 0x1e13c <__bad_interrupt>
   1e05a:	00 00       	nop
   1e05c:	6f c0       	rjmp	.+222    	; 0x1e13c <__bad_interrupt>
   1e05e:	00 00       	nop
   1e060:	6d c0       	rjmp	.+218    	; 0x1e13c <__bad_interrupt>
   1e062:	00 00       	nop
   1e064:	6b c0       	rjmp	.+214    	; 0x1e13c <__bad_interrupt>
   1e066:	00 00       	nop
   1e068:	69 c0       	rjmp	.+210    	; 0x1e13c <__bad_interrupt>
   1e06a:	00 00       	nop
   1e06c:	67 c0       	rjmp	.+206    	; 0x1e13c <__bad_interrupt>
   1e06e:	00 00       	nop
   1e070:	65 c0       	rjmp	.+202    	; 0x1e13c <__bad_interrupt>
   1e072:	00 00       	nop
   1e074:	63 c0       	rjmp	.+198    	; 0x1e13c <__bad_interrupt>
   1e076:	00 00       	nop
   1e078:	61 c0       	rjmp	.+194    	; 0x1e13c <__bad_interrupt>
   1e07a:	00 00       	nop
   1e07c:	5f c0       	rjmp	.+190    	; 0x1e13c <__bad_interrupt>
   1e07e:	00 00       	nop
   1e080:	5d c0       	rjmp	.+186    	; 0x1e13c <__bad_interrupt>
   1e082:	00 00       	nop
   1e084:	5b c0       	rjmp	.+182    	; 0x1e13c <__bad_interrupt>
   1e086:	00 00       	nop
   1e088:	59 c0       	rjmp	.+178    	; 0x1e13c <__bad_interrupt>
   1e08a:	00 00       	nop
   1e08c:	57 c0       	rjmp	.+174    	; 0x1e13c <__bad_interrupt>
   1e08e:	00 00       	nop
   1e090:	55 c0       	rjmp	.+170    	; 0x1e13c <__bad_interrupt>
   1e092:	00 00       	nop
   1e094:	53 c0       	rjmp	.+166    	; 0x1e13c <__bad_interrupt>
   1e096:	00 00       	nop

0001e098 <ManufacturerString>:
   1e098:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
   1e0a8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0001e0b2 <__ctors_end>:
   1e0b2:	11 24       	eor	r1, r1
   1e0b4:	1f be       	out	0x3f, r1	; 63
   1e0b6:	cf ef       	ldi	r28, 0xFF	; 255
   1e0b8:	d0 e2       	ldi	r29, 0x20	; 32
   1e0ba:	de bf       	out	0x3e, r29	; 62
   1e0bc:	cd bf       	out	0x3d, r28	; 61

0001e0be <Application_Jump_Check>:
		/* Re-enable JTAG debugging */
		JTAG_ENABLE();
	#endif
	
	/* If the reset source was the bootloader and the key is correct, clear it and jump to the application */
	if ((MCUSR & (1 << WDRF)) && (MagicBootKey == MAGIC_BOOT_KEY))
   1e0be:	04 b6       	in	r0, 0x34	; 52
   1e0c0:	03 fe       	sbrs	r0, 3
   1e0c2:	25 c0       	rjmp	.+74     	; 0x1e10e <__do_copy_data>
   1e0c4:	80 91 a4 01 	lds	r24, 0x01A4
   1e0c8:	90 91 a5 01 	lds	r25, 0x01A5
   1e0cc:	82 54       	subi	r24, 0x42	; 66
   1e0ce:	9c 4d       	sbci	r25, 0xDC	; 220
   1e0d0:	f1 f4       	brne	.+60     	; 0x1e10e <__do_copy_data>

	/* If a request has been made to jump to the user application, honor it */
	if (JumpToApplication)
	{
		/* Turn off the watchdog */
		MCUSR &= ~(1<<WDRF);
   1e0d2:	84 b7       	in	r24, 0x34	; 52
   1e0d4:	87 7f       	andi	r24, 0xF7	; 247
   1e0d6:	84 bf       	out	0x34, r24	; 52
		wdt_disable(); 
   1e0d8:	88 e1       	ldi	r24, 0x18	; 24
   1e0da:	0f b6       	in	r0, 0x3f	; 63
   1e0dc:	f8 94       	cli
   1e0de:	80 93 60 00 	sts	0x0060, r24
   1e0e2:	10 92 60 00 	sts	0x0060, r1
   1e0e6:	0f be       	out	0x3f, r0	; 63
		
		cli();
   1e0e8:	f8 94       	cli
		/* Undo TIMER1 setup and clear the count before running the sketch */
		TIMSK1 = 0;
   1e0ea:	10 92 6f 00 	sts	0x006F, r1
		TCCR1B = 0;
   1e0ee:	10 92 81 00 	sts	0x0081, r1
		TCNT1H = 0;		// 16-bit write to TCNT1 requires high byte be written first
   1e0f2:	10 92 85 00 	sts	0x0085, r1
		TCNT1L = 0;
   1e0f6:	10 92 84 00 	sts	0x0084, r1
		
		/* Relocate the interrupt vector table to the application section */
		MCUCR = (1 << IVCE);
   1e0fa:	81 e0       	ldi	r24, 0x01	; 1
   1e0fc:	85 bf       	out	0x35, r24	; 53
		MCUCR = 0;
   1e0fe:	15 be       	out	0x35, r1	; 53

		/* Clear the boot key and jump to the user application */
		MagicBootKey = 0;
   1e100:	10 92 a5 01 	sts	0x01A5, r1
   1e104:	10 92 a4 01 	sts	0x01A4, r1
		
		// cppcheck-suppress constStatement
		/*Jump the ship!*/
		((void (*)(void))0x0000)();
   1e108:	e0 e0       	ldi	r30, 0x00	; 0
   1e10a:	f0 e0       	ldi	r31, 0x00	; 0
   1e10c:	09 95       	icall

0001e10e <__do_copy_data>:
   1e10e:	11 e0       	ldi	r17, 0x01	; 1
   1e110:	a0 e0       	ldi	r26, 0x00	; 0
   1e112:	b1 e0       	ldi	r27, 0x01	; 1
   1e114:	e0 e0       	ldi	r30, 0x00	; 0
   1e116:	f0 ef       	ldi	r31, 0xF0	; 240
   1e118:	01 e0       	ldi	r16, 0x01	; 1
   1e11a:	0b bf       	out	0x3b, r16	; 59
   1e11c:	02 c0       	rjmp	.+4      	; 0x1e122 <__do_copy_data+0x14>
   1e11e:	07 90       	elpm	r0, Z+
   1e120:	0d 92       	st	X+, r0
   1e122:	ae 38       	cpi	r26, 0x8E	; 142
   1e124:	b1 07       	cpc	r27, r17
   1e126:	d9 f7       	brne	.-10     	; 0x1e11e <__do_copy_data+0x10>

0001e128 <__do_clear_bss>:
   1e128:	11 e0       	ldi	r17, 0x01	; 1
   1e12a:	ae e8       	ldi	r26, 0x8E	; 142
   1e12c:	b1 e0       	ldi	r27, 0x01	; 1
   1e12e:	01 c0       	rjmp	.+2      	; 0x1e132 <.do_clear_bss_start>

0001e130 <.do_clear_bss_loop>:
   1e130:	1d 92       	st	X+, r1

0001e132 <.do_clear_bss_start>:
   1e132:	a4 3a       	cpi	r26, 0xA4	; 164
   1e134:	b1 07       	cpc	r27, r17
   1e136:	e1 f7       	brne	.-8      	; 0x1e130 <.do_clear_bss_loop>
   1e138:	93 d0       	rcall	.+294    	; 0x1e260 <main>
   1e13a:	60 c7       	rjmp	.+3776   	; 0x1effc <_exit>

0001e13c <__bad_interrupt>:
   1e13c:	61 cf       	rjmp	.-318    	; 0x1e000 <__vectors>

0001e13e <__vector_20>:
	
}

/** ISR to periodically lower the timeout */
ISR(TIMER1_OVF_vect, ISR_BLOCK)
{
   1e13e:	1f 92       	push	r1
   1e140:	0f 92       	push	r0
   1e142:	0f b6       	in	r0, 0x3f	; 63
   1e144:	0f 92       	push	r0
   1e146:	11 24       	eor	r1, r1
   1e148:	8f 93       	push	r24
   1e14a:	9f 93       	push	r25
   1e14c:	af 93       	push	r26
   1e14e:	bf 93       	push	r27
	timeout++;
   1e150:	80 91 96 01 	lds	r24, 0x0196
   1e154:	90 91 97 01 	lds	r25, 0x0197
   1e158:	a0 91 98 01 	lds	r26, 0x0198
   1e15c:	b0 91 99 01 	lds	r27, 0x0199
   1e160:	01 96       	adiw	r24, 0x01	; 1
   1e162:	a1 1d       	adc	r26, r1
   1e164:	b1 1d       	adc	r27, r1
   1e166:	80 93 96 01 	sts	0x0196, r24
   1e16a:	90 93 97 01 	sts	0x0197, r25
   1e16e:	a0 93 98 01 	sts	0x0198, r26
   1e172:	b0 93 99 01 	sts	0x0199, r27
}
   1e176:	bf 91       	pop	r27
   1e178:	af 91       	pop	r26
   1e17a:	9f 91       	pop	r25
   1e17c:	8f 91       	pop	r24
   1e17e:	0f 90       	pop	r0
   1e180:	0f be       	out	0x3f, r0	; 63
   1e182:	0f 90       	pop	r0
   1e184:	1f 90       	pop	r1
   1e186:	18 95       	reti

0001e188 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e188:	84 e0       	ldi	r24, 0x04	; 4
   1e18a:	80 93 e9 00 	sts	0x00E9, r24
   1e18e:	0d c0       	rjmp	.+26     	; 0x1e1aa <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e190:	80 91 e8 00 	lds	r24, 0x00E8
   1e194:	8b 77       	andi	r24, 0x7B	; 123
   1e196:	80 93 e8 00 	sts	0x00E8, r24
   1e19a:	03 c0       	rjmp	.+6      	; 0x1e1a2 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e19c:	8e b3       	in	r24, 0x1e	; 30
   1e19e:	88 23       	and	r24, r24
   1e1a0:	51 f0       	breq	.+20     	; 0x1e1b6 <FetchNextCommandByte+0x2e>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e1a2:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1e1a6:	82 ff       	sbrs	r24, 2
   1e1a8:	f9 cf       	rjmp	.-14     	; 0x1e19c <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e1aa:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1e1ae:	85 ff       	sbrs	r24, 5
   1e1b0:	ef cf       	rjmp	.-34     	; 0x1e190 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1e1b2:	80 91 f1 00 	lds	r24, 0x00F1
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1e1b6:	08 95       	ret

0001e1b8 <WriteNextResponseByte>:
 *  bank when full ready for the next byte in the packet to the host.
 *
 *  \param[in] Response  Next response byte to send to the host
 */
static void WriteNextResponseByte(const uint8_t Response)
{
   1e1b8:	98 2f       	mov	r25, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e1ba:	83 e0       	ldi	r24, 0x03	; 3
   1e1bc:	80 93 e9 00 	sts	0x00E9, r24
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e1c0:	80 91 e8 00 	lds	r24, 0x00E8
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1e1c4:	85 fd       	sbrc	r24, 5
   1e1c6:	0d c0       	rjmp	.+26     	; 0x1e1e2 <WriteNextResponseByte+0x2a>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e1c8:	80 91 e8 00 	lds	r24, 0x00E8
   1e1cc:	8e 77       	andi	r24, 0x7E	; 126
   1e1ce:	80 93 e8 00 	sts	0x00E8, r24
   1e1d2:	03 c0       	rjmp	.+6      	; 0x1e1da <WriteNextResponseByte+0x22>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e1d4:	8e b3       	in	r24, 0x1e	; 30
   1e1d6:	88 23       	and	r24, r24
   1e1d8:	31 f0       	breq	.+12     	; 0x1e1e6 <WriteNextResponseByte+0x2e>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e1da:	80 91 e8 00 	lds	r24, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1e1de:	80 ff       	sbrs	r24, 0
   1e1e0:	f9 cf       	rjmp	.-14     	; 0x1e1d4 <WriteNextResponseByte+0x1c>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1e1e2:	90 93 f1 00 	sts	0x00F1, r25
   1e1e6:	08 95       	ret

0001e1e8 <EVENT_USB_Device_ControlRequest>:
 *  internally.
 */
void EVENT_USB_Device_ControlRequest(void)
{
	/* Ignore any requests that aren't directed to the CDC interface */
	if ((USB_ControlRequest.bmRequestType & (CONTROL_REQTYPE_TYPE | CONTROL_REQTYPE_RECIPIENT)) !=
   1e1e8:	90 91 9c 01 	lds	r25, 0x019C
   1e1ec:	89 2f       	mov	r24, r25
   1e1ee:	8f 77       	andi	r24, 0x7F	; 127
   1e1f0:	81 32       	cpi	r24, 0x21	; 33
   1e1f2:	49 f5       	brne	.+82     	; 0x1e246 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		return;
	}

	/* Process CDC specific control requests */
	switch (USB_ControlRequest.bRequest)
   1e1f4:	80 91 9d 01 	lds	r24, 0x019D
   1e1f8:	80 32       	cpi	r24, 0x20	; 32
   1e1fa:	a1 f0       	breq	.+40     	; 0x1e224 <EVENT_USB_Device_ControlRequest+0x3c>
   1e1fc:	81 32       	cpi	r24, 0x21	; 33
   1e1fe:	19 f5       	brne	.+70     	; 0x1e246 <EVENT_USB_Device_ControlRequest+0x5e>
	{
		case CDC_REQ_GetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
   1e200:	91 3a       	cpi	r25, 0xA1	; 161
   1e202:	09 f5       	brne	.+66     	; 0x1e246 <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e204:	80 91 e8 00 	lds	r24, 0x00E8
   1e208:	87 7f       	andi	r24, 0xF7	; 247
   1e20a:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e20e:	88 e0       	ldi	r24, 0x08	; 8
   1e210:	91 e0       	ldi	r25, 0x01	; 1
   1e212:	67 e0       	ldi	r22, 0x07	; 7
   1e214:	70 e0       	ldi	r23, 0x00	; 0
   1e216:	1c d5       	rcall	.+2616   	; 0x1ec50 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e218:	80 91 e8 00 	lds	r24, 0x00E8
   1e21c:	8b 77       	andi	r24, 0x7B	; 123
   1e21e:	80 93 e8 00 	sts	0x00E8, r24
   1e222:	08 95       	ret
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1e224:	91 32       	cpi	r25, 0x21	; 33
   1e226:	79 f4       	brne	.+30     	; 0x1e246 <EVENT_USB_Device_ControlRequest+0x5e>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1e228:	80 91 e8 00 	lds	r24, 0x00E8
   1e22c:	87 7f       	andi	r24, 0xF7	; 247
   1e22e:	80 93 e8 00 	sts	0x00E8, r24
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1e232:	88 e0       	ldi	r24, 0x08	; 8
   1e234:	91 e0       	ldi	r25, 0x01	; 1
   1e236:	67 e0       	ldi	r22, 0x07	; 7
   1e238:	70 e0       	ldi	r23, 0x00	; 0
   1e23a:	66 d5       	rcall	.+2764   	; 0x1ed08 <Endpoint_Read_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e23c:	80 91 e8 00 	lds	r24, 0x00E8
   1e240:	8e 77       	andi	r24, 0x7E	; 126
   1e242:	80 93 e8 00 	sts	0x00E8, r24
   1e246:	08 95       	ret

0001e248 <EVENT_USB_Device_ConfigurationChanged>:
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
   1e248:	82 e0       	ldi	r24, 0x02	; 2
   1e24a:	61 ec       	ldi	r22, 0xC1	; 193
   1e24c:	42 e0       	ldi	r20, 0x02	; 2
   1e24e:	be d3       	rcall	.+1916   	; 0x1e9cc <Endpoint_ConfigureEndpoint_Prv>
	                           CDC_NOTIFICATION_EPSIZE, 1);

	Endpoint_ConfigureEndpoint(CDC_TX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);

	Endpoint_ConfigureEndpoint(CDC_RX_EPADDR, EP_TYPE_BULK, CDC_TXRX_EPSIZE, 1);
}
   1e250:	83 e0       	ldi	r24, 0x03	; 3
   1e252:	61 e8       	ldi	r22, 0x81	; 129
   1e254:	42 e1       	ldi	r20, 0x12	; 18
   1e256:	ba d3       	rcall	.+1908   	; 0x1e9cc <Endpoint_ConfigureEndpoint_Prv>
   1e258:	84 e0       	ldi	r24, 0x04	; 4
   1e25a:	60 e8       	ldi	r22, 0x80	; 128
   1e25c:	42 e1       	ldi	r20, 0x12	; 18
   1e25e:	b6 c3       	rjmp	.+1900   	; 0x1e9cc <Endpoint_ConfigureEndpoint_Prv>

0001e260 <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
   1e260:	2f 92       	push	r2
   1e262:	3f 92       	push	r3
   1e264:	4f 92       	push	r4
   1e266:	5f 92       	push	r5
   1e268:	6f 92       	push	r6
   1e26a:	7f 92       	push	r7
   1e26c:	8f 92       	push	r8
   1e26e:	9f 92       	push	r9
   1e270:	af 92       	push	r10
   1e272:	bf 92       	push	r11
   1e274:	cf 92       	push	r12
   1e276:	df 92       	push	r13
   1e278:	ef 92       	push	r14
   1e27a:	ff 92       	push	r15
   1e27c:	0f 93       	push	r16
   1e27e:	1f 93       	push	r17
   1e280:	df 93       	push	r29
   1e282:	cf 93       	push	r28
   1e284:	00 d0       	rcall	.+0      	; 0x1e286 <main+0x26>
   1e286:	00 d0       	rcall	.+0      	; 0x1e288 <main+0x28>
   1e288:	cd b7       	in	r28, 0x3d	; 61
   1e28a:	de b7       	in	r29, 0x3e	; 62

/** Configures all hardware required for the bootloader. */
static void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1e28c:	84 b7       	in	r24, 0x34	; 52
   1e28e:	87 7f       	andi	r24, 0xF7	; 247
   1e290:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1e292:	88 e1       	ldi	r24, 0x18	; 24
   1e294:	0f b6       	in	r0, 0x3f	; 63
   1e296:	f8 94       	cli
   1e298:	80 93 60 00 	sts	0x0060, r24
   1e29c:	10 92 60 00 	sts	0x0060, r1
   1e2a0:	0f be       	out	0x3f, r0	; 63

	/* Disable clock division */
	clock_prescale_set(clock_div_1);
   1e2a2:	80 e0       	ldi	r24, 0x00	; 0
   1e2a4:	90 e0       	ldi	r25, 0x00	; 0
   1e2a6:	20 e8       	ldi	r18, 0x80	; 128
   1e2a8:	0f b6       	in	r0, 0x3f	; 63
   1e2aa:	f8 94       	cli
   1e2ac:	20 93 61 00 	sts	0x0061, r18
   1e2b0:	80 93 61 00 	sts	0x0061, r24
   1e2b4:	0f be       	out	0x3f, r0	; 63

	/* Relocate the interrupt vector table to the bootloader section */
	MCUCR = (1 << IVCE);
   1e2b6:	11 e0       	ldi	r17, 0x01	; 1
   1e2b8:	15 bf       	out	0x35, r17	; 53
	MCUCR = (1 << IVSEL);
   1e2ba:	82 e0       	ldi	r24, 0x02	; 2
   1e2bc:	85 bf       	out	0x35, r24	; 53

	/* Initialize the USB and other board hardware drivers */
	USB_Init();
   1e2be:	fd d3       	rcall	.+2042   	; 0x1eaba <USB_Init>

	/* Bootloader active timer initialization */
	TIMSK1 = (1 << TOIE1);
   1e2c0:	10 93 6f 00 	sts	0x006F, r17
	TCCR1B = ((1 << CS11) | (1 << CS10));
   1e2c4:	83 e0       	ldi	r24, 0x03	; 3
   1e2c6:	80 93 81 00 	sts	0x0081, r24
	
	/* Setup the bootloader button */
	/* Set PF0 to input with internal pullup*/
	DDRF &= ~_BV(PORTF0);
   1e2ca:	80 98       	cbi	0x10, 0	; 16
	PORTF |= _BV(PORTF0);
   1e2cc:	88 9a       	sbi	0x11, 0	; 17
{
	/* Setup hardware required for the bootloader */
	SetupHardware();

	/* Enable global interrupts so that the USB stack can function */
	sei();
   1e2ce:	78 94       	sei

	if (bit_is_clear(PINF, 0))
   1e2d0:	78 99       	sbic	0x0f, 0	; 15
   1e2d2:	0f c0       	rjmp	.+30     	; 0x1e2f2 <main+0x92>
	{
		TIMEOUT_PERIOD = 60;
   1e2d4:	8c e3       	ldi	r24, 0x3C	; 60
   1e2d6:	90 e0       	ldi	r25, 0x00	; 0
   1e2d8:	a0 e0       	ldi	r26, 0x00	; 0
   1e2da:	b0 e0       	ldi	r27, 0x00	; 0
   1e2dc:	80 93 92 01 	sts	0x0192, r24
   1e2e0:	90 93 93 01 	sts	0x0193, r25
   1e2e4:	a0 93 94 01 	sts	0x0194, r26
   1e2e8:	b0 93 95 01 	sts	0x0195, r27
		/* Setup Back Light to notify user device is in bootloader mode*/
		DDRC |= _BV(PORTC6);
   1e2ec:	3e 9a       	sbi	0x07, 6	; 7
		PORTC |= _BV(PORTC6);
   1e2ee:	46 9a       	sbi	0x08, 6	; 8
   1e2f0:	0c c0       	rjmp	.+24     	; 0x1e30a <main+0xaa>
	}
	else
	{
		TIMEOUT_PERIOD = 1;
   1e2f2:	81 e0       	ldi	r24, 0x01	; 1
   1e2f4:	90 e0       	ldi	r25, 0x00	; 0
   1e2f6:	a0 e0       	ldi	r26, 0x00	; 0
   1e2f8:	b0 e0       	ldi	r27, 0x00	; 0
   1e2fa:	80 93 92 01 	sts	0x0192, r24
   1e2fe:	90 93 93 01 	sts	0x0193, r25
   1e302:	a0 93 94 01 	sts	0x0194, r26
   1e306:	b0 93 95 01 	sts	0x0195, r27
	}
	
	timeout = 0;
   1e30a:	10 92 96 01 	sts	0x0196, r1
   1e30e:	10 92 97 01 	sts	0x0197, r1
   1e312:	10 92 98 01 	sts	0x0198, r1
   1e316:	10 92 99 01 	sts	0x0199, r1
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == 'Q')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e31a:	79 e0       	ldi	r23, 0x09	; 9
   1e31c:	67 2e       	mov	r6, r23
   1e31e:	a7 c2       	rjmp	.+1358   	; 0x1e86e <main+0x60e>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e320:	24 e0       	ldi	r18, 0x04	; 4
   1e322:	20 93 e9 00 	sts	0x00E9, r18
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1e326:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1e32a:	82 ff       	sbrs	r24, 2
   1e32c:	87 c2       	rjmp	.+1294   	; 0x1e83c <main+0x5dc>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1e32e:	2c df       	rcall	.-424    	; 0x1e188 <FetchNextCommandByte>
   1e330:	18 2f       	mov	r17, r24

	if (Command == 'E')
   1e332:	85 34       	cpi	r24, 0x45	; 69
   1e334:	19 f4       	brne	.+6      	; 0x1e33c <main+0xdc>
	{
		RunBootloader = false;
   1e336:	10 92 0f 01 	sts	0x010F, r1
   1e33a:	03 c0       	rjmp	.+6      	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'T')
   1e33c:	84 35       	cpi	r24, 0x54	; 84
   1e33e:	19 f4       	brne	.+6      	; 0x1e346 <main+0xe6>
	{
		FetchNextCommandByte();
   1e340:	23 df       	rcall	.-442    	; 0x1e188 <FetchNextCommandByte>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1e342:	8d e0       	ldi	r24, 0x0D	; 13
   1e344:	51 c2       	rjmp	.+1186   	; 0x1e7e8 <main+0x588>
	}
	else if ((Command == 'L') || (Command == 'P'))
   1e346:	8c 34       	cpi	r24, 0x4C	; 76
   1e348:	e1 f3       	breq	.-8      	; 0x1e342 <main+0xe2>
   1e34a:	80 35       	cpi	r24, 0x50	; 80
   1e34c:	d1 f3       	breq	.-12     	; 0x1e342 <main+0xe2>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
   1e34e:	84 37       	cpi	r24, 0x74	; 116
   1e350:	11 f4       	brne	.+4      	; 0x1e356 <main+0xf6>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1e352:	84 e4       	ldi	r24, 0x44	; 68
   1e354:	9a c0       	rjmp	.+308    	; 0x1e48a <main+0x22a>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
   1e356:	81 36       	cpi	r24, 0x61	; 97
   1e358:	11 f4       	brne	.+4      	; 0x1e35e <main+0xfe>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1e35a:	89 e5       	ldi	r24, 0x59	; 89
   1e35c:	45 c2       	rjmp	.+1162   	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'A')
   1e35e:	81 34       	cpi	r24, 0x41	; 65
   1e360:	f1 f4       	brne	.+60     	; 0x1e39e <main+0x13e>
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1e362:	12 df       	rcall	.-476    	; 0x1e188 <FetchNextCommandByte>
   1e364:	38 2e       	mov	r3, r24
   1e366:	33 0c       	add	r3, r3
   1e368:	22 24       	eor	r2, r2
   1e36a:	71 01       	movw	r14, r2
   1e36c:	00 27       	eor	r16, r16
   1e36e:	f7 fc       	sbrc	r15, 7
   1e370:	00 95       	com	r16
   1e372:	10 2f       	mov	r17, r16
   1e374:	e0 92 8e 01 	sts	0x018E, r14
   1e378:	f0 92 8f 01 	sts	0x018F, r15
   1e37c:	00 93 90 01 	sts	0x0190, r16
   1e380:	10 93 91 01 	sts	0x0191, r17
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1e384:	01 df       	rcall	.-510    	; 0x1e188 <FetchNextCommandByte>
   1e386:	90 e0       	ldi	r25, 0x00	; 0
   1e388:	88 0f       	add	r24, r24
   1e38a:	99 1f       	adc	r25, r25
   1e38c:	aa 27       	eor	r26, r26
   1e38e:	97 fd       	sbrc	r25, 7
   1e390:	a0 95       	com	r26
   1e392:	ba 2f       	mov	r27, r26
   1e394:	8e 29       	or	r24, r14
   1e396:	9f 29       	or	r25, r15
   1e398:	a0 2b       	or	r26, r16
   1e39a:	b1 2b       	or	r27, r17
   1e39c:	f6 c1       	rjmp	.+1004   	; 0x1e78a <main+0x52a>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
   1e39e:	80 37       	cpi	r24, 0x70	; 112
   1e3a0:	11 f4       	brne	.+4      	; 0x1e3a6 <main+0x146>
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1e3a2:	83 e5       	ldi	r24, 0x53	; 83
   1e3a4:	21 c2       	rjmp	.+1090   	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'S')
   1e3a6:	83 35       	cpi	r24, 0x53	; 83
   1e3a8:	59 f4       	brne	.+22     	; 0x1e3c0 <main+0x160>
   1e3aa:	00 e0       	ldi	r16, 0x00	; 0
   1e3ac:	11 e0       	ldi	r17, 0x01	; 1
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1e3ae:	d8 01       	movw	r26, r16
   1e3b0:	8d 91       	ld	r24, X+
   1e3b2:	8d 01       	movw	r16, r26
   1e3b4:	01 df       	rcall	.-510    	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1e3b6:	b1 e0       	ldi	r27, 0x01	; 1
   1e3b8:	07 30       	cpi	r16, 0x07	; 7
   1e3ba:	1b 07       	cpc	r17, r27
   1e3bc:	c1 f7       	brne	.-16     	; 0x1e3ae <main+0x14e>
   1e3be:	15 c2       	rjmp	.+1066   	; 0x1e7ea <main+0x58a>
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
   1e3c0:	86 35       	cpi	r24, 0x56	; 86
   1e3c2:	21 f4       	brne	.+8      	; 0x1e3cc <main+0x16c>
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1e3c4:	81 e3       	ldi	r24, 0x31	; 49
   1e3c6:	f8 de       	rcall	.-528    	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1e3c8:	80 e3       	ldi	r24, 0x30	; 48
   1e3ca:	0e c2       	rjmp	.+1052   	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 's')
   1e3cc:	83 37       	cpi	r24, 0x73	; 115
   1e3ce:	31 f4       	brne	.+12     	; 0x1e3dc <main+0x17c>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1e3d0:	82 e8       	ldi	r24, 0x82	; 130
   1e3d2:	f2 de       	rcall	.-540    	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1e3d4:	87 e9       	ldi	r24, 0x97	; 151
   1e3d6:	f0 de       	rcall	.-544    	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1e3d8:	8e e1       	ldi	r24, 0x1E	; 30
   1e3da:	06 c2       	rjmp	.+1036   	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'e')
   1e3dc:	85 36       	cpi	r24, 0x65	; 101
   1e3de:	29 f5       	brne	.+74     	; 0x1e42a <main+0x1ca>
   1e3e0:	80 e0       	ldi	r24, 0x00	; 0
   1e3e2:	90 e0       	ldi	r25, 0x00	; 0
   1e3e4:	a0 e0       	ldi	r26, 0x00	; 0
   1e3e6:	b0 e0       	ldi	r27, 0x00	; 0
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1e3e8:	23 e0       	ldi	r18, 0x03	; 3
   1e3ea:	fc 01       	movw	r30, r24
   1e3ec:	a0 93 5b 00 	sts	0x005B, r26
   1e3f0:	20 93 57 00 	sts	0x0057, r18
   1e3f4:	e8 95       	spm
			boot_spm_busy_wait();
   1e3f6:	07 b6       	in	r0, 0x37	; 55
   1e3f8:	00 fc       	sbrc	r0, 0
   1e3fa:	fd cf       	rjmp	.-6      	; 0x1e3f6 <main+0x196>
			boot_page_write(CurrFlashAddress);
   1e3fc:	35 e0       	ldi	r19, 0x05	; 5
   1e3fe:	fc 01       	movw	r30, r24
   1e400:	a0 93 5b 00 	sts	0x005B, r26
   1e404:	30 93 57 00 	sts	0x0057, r19
   1e408:	e8 95       	spm
			boot_spm_busy_wait();
   1e40a:	07 b6       	in	r0, 0x37	; 55
   1e40c:	00 fc       	sbrc	r0, 0
   1e40e:	fd cf       	rjmp	.-6      	; 0x1e40a <main+0x1aa>
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1e410:	80 50       	subi	r24, 0x00	; 0
   1e412:	9f 4f       	sbci	r25, 0xFF	; 255
   1e414:	af 4f       	sbci	r26, 0xFF	; 255
   1e416:	bf 4f       	sbci	r27, 0xFF	; 255
   1e418:	80 30       	cpi	r24, 0x00	; 0
   1e41a:	60 ee       	ldi	r22, 0xE0	; 224
   1e41c:	96 07       	cpc	r25, r22
   1e41e:	61 e0       	ldi	r22, 0x01	; 1
   1e420:	a6 07       	cpc	r26, r22
   1e422:	60 e0       	ldi	r22, 0x00	; 0
   1e424:	b6 07       	cpc	r27, r22
   1e426:	01 f7       	brne	.-64     	; 0x1e3e8 <main+0x188>
   1e428:	8c cf       	rjmp	.-232    	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
   1e42a:	8c 36       	cpi	r24, 0x6C	; 108
   1e42c:	49 f4       	brne	.+18     	; 0x1e440 <main+0x1e0>
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1e42e:	ac de       	rcall	.-680    	; 0x1e188 <FetchNextCommandByte>
   1e430:	80 95       	com	r24
   1e432:	e1 e0       	ldi	r30, 0x01	; 1
   1e434:	f0 e0       	ldi	r31, 0x00	; 0
   1e436:	08 2e       	mov	r0, r24
   1e438:	60 92 57 00 	sts	0x0057, r6
   1e43c:	e8 95       	spm
   1e43e:	81 cf       	rjmp	.-254    	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
   1e440:	82 37       	cpi	r24, 0x72	; 114
   1e442:	31 f4       	brne	.+12     	; 0x1e450 <main+0x1f0>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1e444:	e1 e0       	ldi	r30, 0x01	; 1
   1e446:	f0 e0       	ldi	r31, 0x00	; 0
   1e448:	60 92 57 00 	sts	0x0057, r6
   1e44c:	84 91       	lpm	r24, Z+
   1e44e:	cc c1       	rjmp	.+920    	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'F')
   1e450:	86 34       	cpi	r24, 0x46	; 70
   1e452:	31 f4       	brne	.+12     	; 0x1e460 <main+0x200>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1e454:	e0 e0       	ldi	r30, 0x00	; 0
   1e456:	f0 e0       	ldi	r31, 0x00	; 0
   1e458:	60 92 57 00 	sts	0x0057, r6
   1e45c:	84 91       	lpm	r24, Z+
   1e45e:	c4 c1       	rjmp	.+904    	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'N')
   1e460:	8e 34       	cpi	r24, 0x4E	; 78
   1e462:	31 f4       	brne	.+12     	; 0x1e470 <main+0x210>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1e464:	e3 e0       	ldi	r30, 0x03	; 3
   1e466:	f0 e0       	ldi	r31, 0x00	; 0
   1e468:	60 92 57 00 	sts	0x0057, r6
   1e46c:	84 91       	lpm	r24, Z+
   1e46e:	bc c1       	rjmp	.+888    	; 0x1e7e8 <main+0x588>
	}
	else if (Command == 'Q')
   1e470:	81 35       	cpi	r24, 0x51	; 81
   1e472:	31 f4       	brne	.+12     	; 0x1e480 <main+0x220>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1e474:	e2 e0       	ldi	r30, 0x02	; 2
   1e476:	f0 e0       	ldi	r31, 0x00	; 0
   1e478:	60 92 57 00 	sts	0x0057, r6
   1e47c:	84 91       	lpm	r24, Z+
   1e47e:	b4 c1       	rjmp	.+872    	; 0x1e7e8 <main+0x588>
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
   1e480:	82 36       	cpi	r24, 0x62	; 98
   1e482:	31 f4       	brne	.+12     	; 0x1e490 <main+0x230>
	{
		WriteNextResponseByte('Y');
   1e484:	89 e5       	ldi	r24, 0x59	; 89
   1e486:	98 de       	rcall	.-720    	; 0x1e1b8 <WriteNextResponseByte>

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1e488:	81 e0       	ldi	r24, 0x01	; 1
   1e48a:	96 de       	rcall	.-724    	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1e48c:	80 e0       	ldi	r24, 0x00	; 0
   1e48e:	ac c1       	rjmp	.+856    	; 0x1e7e8 <main+0x588>
	}
	else if ((Command == 'B') || (Command == 'g'))
   1e490:	82 34       	cpi	r24, 0x42	; 66
   1e492:	19 f0       	breq	.+6      	; 0x1e49a <main+0x23a>
   1e494:	87 36       	cpi	r24, 0x67	; 103
   1e496:	09 f0       	breq	.+2      	; 0x1e49a <main+0x23a>
   1e498:	f5 c0       	rjmp	.+490    	; 0x1e684 <main+0x424>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e49a:	76 de       	rcall	.-788    	; 0x1e188 <FetchNextCommandByte>
   1e49c:	08 2f       	mov	r16, r24
	BlockSize |=  FetchNextCommandByte();
   1e49e:	74 de       	rcall	.-792    	; 0x1e188 <FetchNextCommandByte>
   1e4a0:	f8 2e       	mov	r15, r24

	MemoryType =  FetchNextCommandByte();
   1e4a2:	72 de       	rcall	.-796    	; 0x1e188 <FetchNextCommandByte>
   1e4a4:	88 2e       	mov	r8, r24

	if ((MemoryType != 'E') && (MemoryType != 'F'))
   1e4a6:	85 54       	subi	r24, 0x45	; 69
   1e4a8:	82 30       	cpi	r24, 0x02	; 2
   1e4aa:	08 f0       	brcs	.+2      	; 0x1e4ae <main+0x24e>
   1e4ac:	9c c1       	rjmp	.+824    	; 0x1e7e6 <main+0x586>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1e4ae:	0a 83       	std	Y+2, r16	; 0x02
   1e4b0:	19 82       	std	Y+1, r1	; 0x01
	BlockSize |=  FetchNextCommandByte();
   1e4b2:	2f 2d       	mov	r18, r15
   1e4b4:	30 e0       	ldi	r19, 0x00	; 0
   1e4b6:	89 81       	ldd	r24, Y+1	; 0x01
   1e4b8:	9a 81       	ldd	r25, Y+2	; 0x02
   1e4ba:	28 2b       	or	r18, r24
   1e4bc:	39 2b       	or	r19, r25
   1e4be:	3c 83       	std	Y+4, r19	; 0x04
   1e4c0:	2b 83       	std	Y+3, r18	; 0x03

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
   1e4c2:	17 36       	cpi	r17, 0x67	; 103
   1e4c4:	09 f0       	breq	.+2      	; 0x1e4c8 <main+0x268>
   1e4c6:	55 c0       	rjmp	.+170    	; 0x1e572 <main+0x312>
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1e4c8:	91 e1       	ldi	r25, 0x11	; 17
   1e4ca:	90 93 57 00 	sts	0x0057, r25
   1e4ce:	e8 95       	spm
   1e4d0:	dd 24       	eor	r13, r13
   1e4d2:	49 c0       	rjmp	.+146    	; 0x1e566 <main+0x306>
   1e4d4:	e0 90 8e 01 	lds	r14, 0x018E
   1e4d8:	f0 90 8f 01 	lds	r15, 0x018F
   1e4dc:	00 91 90 01 	lds	r16, 0x0190
   1e4e0:	10 91 91 01 	lds	r17, 0x0191

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1e4e4:	a6 e4       	ldi	r26, 0x46	; 70
   1e4e6:	8a 16       	cp	r8, r26
   1e4e8:	09 f5       	brne	.+66     	; 0x1e52c <main+0x2cc>
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1e4ea:	8d 2d       	mov	r24, r13
   1e4ec:	90 e0       	ldi	r25, 0x00	; 0
   1e4ee:	a0 e0       	ldi	r26, 0x00	; 0
   1e4f0:	b0 e0       	ldi	r27, 0x00	; 0
   1e4f2:	8e 29       	or	r24, r14
   1e4f4:	9f 29       	or	r25, r15
   1e4f6:	a0 2b       	or	r26, r16
   1e4f8:	b1 2b       	or	r27, r17
   1e4fa:	ab bf       	out	0x3b, r26	; 59
   1e4fc:	fc 01       	movw	r30, r24
   1e4fe:	87 91       	elpm	r24, Z+
   1e500:	5b de       	rcall	.-842    	; 0x1e1b8 <WriteNextResponseByte>
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1e502:	dd 20       	and	r13, r13
   1e504:	81 f0       	breq	.+32     	; 0x1e526 <main+0x2c6>
				  CurrAddress += 2;
   1e506:	82 e0       	ldi	r24, 0x02	; 2
   1e508:	90 e0       	ldi	r25, 0x00	; 0
   1e50a:	a0 e0       	ldi	r26, 0x00	; 0
   1e50c:	b0 e0       	ldi	r27, 0x00	; 0
   1e50e:	e8 0e       	add	r14, r24
   1e510:	f9 1e       	adc	r15, r25
   1e512:	0a 1f       	adc	r16, r26
   1e514:	1b 1f       	adc	r17, r27
   1e516:	e0 92 8e 01 	sts	0x018E, r14
   1e51a:	f0 92 8f 01 	sts	0x018F, r15
   1e51e:	00 93 90 01 	sts	0x0190, r16
   1e522:	10 93 91 01 	sts	0x0191, r17

				HighByte = !HighByte;
   1e526:	91 e0       	ldi	r25, 0x01	; 1
   1e528:	d9 26       	eor	r13, r25
   1e52a:	18 c0       	rjmp	.+48     	; 0x1e55c <main+0x2fc>
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1e52c:	d8 01       	movw	r26, r16
   1e52e:	c7 01       	movw	r24, r14
   1e530:	b6 95       	lsr	r27
   1e532:	a7 95       	ror	r26
   1e534:	97 95       	ror	r25
   1e536:	87 95       	ror	r24
   1e538:	4b d5       	rcall	.+2710   	; 0x1efd0 <__eerd_byte_usb1286>
   1e53a:	3e de       	rcall	.-900    	; 0x1e1b8 <WriteNextResponseByte>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e53c:	82 e0       	ldi	r24, 0x02	; 2
   1e53e:	90 e0       	ldi	r25, 0x00	; 0
   1e540:	a0 e0       	ldi	r26, 0x00	; 0
   1e542:	b0 e0       	ldi	r27, 0x00	; 0
   1e544:	e8 0e       	add	r14, r24
   1e546:	f9 1e       	adc	r15, r25
   1e548:	0a 1f       	adc	r16, r26
   1e54a:	1b 1f       	adc	r17, r27
   1e54c:	e0 92 8e 01 	sts	0x018E, r14
   1e550:	f0 92 8f 01 	sts	0x018F, r15
   1e554:	00 93 90 01 	sts	0x0190, r16
   1e558:	10 93 91 01 	sts	0x0191, r17
   1e55c:	ab 81       	ldd	r26, Y+3	; 0x03
   1e55e:	bc 81       	ldd	r27, Y+4	; 0x04
   1e560:	11 97       	sbiw	r26, 0x01	; 1
   1e562:	bc 83       	std	Y+4, r27	; 0x04
   1e564:	ab 83       	std	Y+3, r26	; 0x03
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1e566:	eb 81       	ldd	r30, Y+3	; 0x03
   1e568:	fc 81       	ldd	r31, Y+4	; 0x04
   1e56a:	ef 2b       	or	r30, r31
   1e56c:	09 f0       	breq	.+2      	; 0x1e570 <main+0x310>
   1e56e:	b2 cf       	rjmp	.-156    	; 0x1e4d4 <main+0x274>
   1e570:	3c c1       	rjmp	.+632    	; 0x1e7ea <main+0x58a>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1e572:	a0 90 8e 01 	lds	r10, 0x018E
   1e576:	b0 90 8f 01 	lds	r11, 0x018F
   1e57a:	c0 90 90 01 	lds	r12, 0x0190
   1e57e:	d0 90 91 01 	lds	r13, 0x0191

		if (MemoryType == 'F')
   1e582:	f6 e4       	ldi	r31, 0x46	; 70
   1e584:	8f 16       	cp	r8, r31
   1e586:	09 f0       	breq	.+2      	; 0x1e58a <main+0x32a>
   1e588:	67 c0       	rjmp	.+206    	; 0x1e658 <main+0x3f8>
		{
			boot_page_erase(PageStartAddress);
   1e58a:	23 e0       	ldi	r18, 0x03	; 3
   1e58c:	f5 01       	movw	r30, r10
   1e58e:	c0 92 5b 00 	sts	0x005B, r12
   1e592:	20 93 57 00 	sts	0x0057, r18
   1e596:	e8 95       	spm
			boot_spm_busy_wait();
   1e598:	07 b6       	in	r0, 0x37	; 55
   1e59a:	00 fc       	sbrc	r0, 0
   1e59c:	fd cf       	rjmp	.-6      	; 0x1e598 <main+0x338>
   1e59e:	5c c0       	rjmp	.+184    	; 0x1e658 <main+0x3f8>
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1e5a0:	36 e4       	ldi	r19, 0x46	; 70
   1e5a2:	83 16       	cp	r8, r19
   1e5a4:	81 f5       	brne	.+96     	; 0x1e606 <main+0x3a6>
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1e5a6:	99 20       	and	r9, r9
   1e5a8:	49 f1       	breq	.+82     	; 0x1e5fc <main+0x39c>
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1e5aa:	e0 90 8e 01 	lds	r14, 0x018E
   1e5ae:	f0 90 8f 01 	lds	r15, 0x018F
   1e5b2:	00 91 90 01 	lds	r16, 0x0190
   1e5b6:	10 91 91 01 	lds	r17, 0x0191
   1e5ba:	e6 dd       	rcall	.-1076   	; 0x1e188 <FetchNextCommandByte>
   1e5bc:	58 2e       	mov	r5, r24
   1e5be:	44 24       	eor	r4, r4
   1e5c0:	87 2d       	mov	r24, r7
   1e5c2:	90 e0       	ldi	r25, 0x00	; 0
   1e5c4:	84 29       	or	r24, r4
   1e5c6:	95 29       	or	r25, r5
   1e5c8:	61 e0       	ldi	r22, 0x01	; 1
   1e5ca:	0c 01       	movw	r0, r24
   1e5cc:	f7 01       	movw	r30, r14
   1e5ce:	00 93 5b 00 	sts	0x005B, r16
   1e5d2:	60 93 57 00 	sts	0x0057, r22
   1e5d6:	e8 95       	spm
   1e5d8:	11 24       	eor	r1, r1

					/* Increment the address counter after use */
					CurrAddress += 2;
   1e5da:	82 e0       	ldi	r24, 0x02	; 2
   1e5dc:	90 e0       	ldi	r25, 0x00	; 0
   1e5de:	a0 e0       	ldi	r26, 0x00	; 0
   1e5e0:	b0 e0       	ldi	r27, 0x00	; 0
   1e5e2:	e8 0e       	add	r14, r24
   1e5e4:	f9 1e       	adc	r15, r25
   1e5e6:	0a 1f       	adc	r16, r26
   1e5e8:	1b 1f       	adc	r17, r27
   1e5ea:	e0 92 8e 01 	sts	0x018E, r14
   1e5ee:	f0 92 8f 01 	sts	0x018F, r15
   1e5f2:	00 93 90 01 	sts	0x0190, r16
   1e5f6:	10 93 91 01 	sts	0x0191, r17
   1e5fa:	02 c0       	rjmp	.+4      	; 0x1e600 <main+0x3a0>
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1e5fc:	c5 dd       	rcall	.-1142   	; 0x1e188 <FetchNextCommandByte>
   1e5fe:	78 2e       	mov	r7, r24
				}

				HighByte = !HighByte;
   1e600:	91 e0       	ldi	r25, 0x01	; 1
   1e602:	99 26       	eor	r9, r25
   1e604:	23 c0       	rjmp	.+70     	; 0x1e64c <main+0x3ec>
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e606:	e0 90 8e 01 	lds	r14, 0x018E
   1e60a:	f0 90 8f 01 	lds	r15, 0x018F
   1e60e:	00 91 90 01 	lds	r16, 0x0190
   1e612:	10 91 91 01 	lds	r17, 0x0191
   1e616:	16 95       	lsr	r17
   1e618:	07 95       	ror	r16
   1e61a:	f7 94       	ror	r15
   1e61c:	e7 94       	ror	r14
   1e61e:	b4 dd       	rcall	.-1176   	; 0x1e188 <FetchNextCommandByte>
   1e620:	68 2f       	mov	r22, r24
   1e622:	c7 01       	movw	r24, r14
   1e624:	dd d4       	rcall	.+2490   	; 0x1efe0 <__eewr_byte_usb1286>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1e626:	80 91 8e 01 	lds	r24, 0x018E
   1e62a:	90 91 8f 01 	lds	r25, 0x018F
   1e62e:	a0 91 90 01 	lds	r26, 0x0190
   1e632:	b0 91 91 01 	lds	r27, 0x0191
   1e636:	02 96       	adiw	r24, 0x02	; 2
   1e638:	a1 1d       	adc	r26, r1
   1e63a:	b1 1d       	adc	r27, r1
   1e63c:	80 93 8e 01 	sts	0x018E, r24
   1e640:	90 93 8f 01 	sts	0x018F, r25
   1e644:	a0 93 90 01 	sts	0x0190, r26
   1e648:	b0 93 91 01 	sts	0x0191, r27
   1e64c:	ab 81       	ldd	r26, Y+3	; 0x03
   1e64e:	bc 81       	ldd	r27, Y+4	; 0x04
   1e650:	11 97       	sbiw	r26, 0x01	; 1
   1e652:	bc 83       	std	Y+4, r27	; 0x04
   1e654:	ab 83       	std	Y+3, r26	; 0x03
   1e656:	02 c0       	rjmp	.+4      	; 0x1e65c <main+0x3fc>
   1e658:	77 24       	eor	r7, r7
   1e65a:	99 24       	eor	r9, r9
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1e65c:	eb 81       	ldd	r30, Y+3	; 0x03
   1e65e:	fc 81       	ldd	r31, Y+4	; 0x04
   1e660:	ef 2b       	or	r30, r31
   1e662:	09 f0       	breq	.+2      	; 0x1e666 <main+0x406>
   1e664:	9d cf       	rjmp	.-198    	; 0x1e5a0 <main+0x340>
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
   1e666:	f6 e4       	ldi	r31, 0x46	; 70
   1e668:	8f 16       	cp	r8, r31
   1e66a:	09 f0       	breq	.+2      	; 0x1e66e <main+0x40e>
   1e66c:	6a ce       	rjmp	.-812    	; 0x1e342 <main+0xe2>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1e66e:	25 e0       	ldi	r18, 0x05	; 5
   1e670:	f5 01       	movw	r30, r10
   1e672:	c0 92 5b 00 	sts	0x005B, r12
   1e676:	20 93 57 00 	sts	0x0057, r18
   1e67a:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1e67c:	07 b6       	in	r0, 0x37	; 55
   1e67e:	00 fc       	sbrc	r0, 0
   1e680:	fd cf       	rjmp	.-6      	; 0x1e67c <main+0x41c>
   1e682:	5f ce       	rjmp	.-834    	; 0x1e342 <main+0xe2>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
   1e684:	83 34       	cpi	r24, 0x43	; 67
   1e686:	a1 f4       	brne	.+40     	; 0x1e6b0 <main+0x450>
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1e688:	e0 90 8e 01 	lds	r14, 0x018E
   1e68c:	f0 90 8f 01 	lds	r15, 0x018F
   1e690:	00 91 90 01 	lds	r16, 0x0190
   1e694:	10 91 91 01 	lds	r17, 0x0191
   1e698:	77 dd       	rcall	.-1298   	; 0x1e188 <FetchNextCommandByte>
   1e69a:	90 e0       	ldi	r25, 0x00	; 0
   1e69c:	31 e0       	ldi	r19, 0x01	; 1
   1e69e:	0c 01       	movw	r0, r24
   1e6a0:	f7 01       	movw	r30, r14
   1e6a2:	00 93 5b 00 	sts	0x005B, r16
   1e6a6:	30 93 57 00 	sts	0x0057, r19
   1e6aa:	e8 95       	spm
   1e6ac:	11 24       	eor	r1, r1
   1e6ae:	49 ce       	rjmp	.-878    	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
   1e6b0:	83 36       	cpi	r24, 0x63	; 99
   1e6b2:	39 f5       	brne	.+78     	; 0x1e702 <main+0x4a2>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1e6b4:	e0 90 8e 01 	lds	r14, 0x018E
   1e6b8:	f0 90 8f 01 	lds	r15, 0x018F
   1e6bc:	00 91 90 01 	lds	r16, 0x0190
   1e6c0:	10 91 91 01 	lds	r17, 0x0191
   1e6c4:	61 dd       	rcall	.-1342   	; 0x1e188 <FetchNextCommandByte>
   1e6c6:	a8 01       	movw	r20, r16
   1e6c8:	97 01       	movw	r18, r14
   1e6ca:	21 60       	ori	r18, 0x01	; 1
   1e6cc:	90 e0       	ldi	r25, 0x00	; 0
   1e6ce:	61 e0       	ldi	r22, 0x01	; 1
   1e6d0:	0c 01       	movw	r0, r24
   1e6d2:	f9 01       	movw	r30, r18
   1e6d4:	40 93 5b 00 	sts	0x005B, r20
   1e6d8:	60 93 57 00 	sts	0x0057, r22
   1e6dc:	e8 95       	spm
   1e6de:	11 24       	eor	r1, r1

		/* Increment the address */
		CurrAddress += 2;
   1e6e0:	82 e0       	ldi	r24, 0x02	; 2
   1e6e2:	90 e0       	ldi	r25, 0x00	; 0
   1e6e4:	a0 e0       	ldi	r26, 0x00	; 0
   1e6e6:	b0 e0       	ldi	r27, 0x00	; 0
   1e6e8:	e8 0e       	add	r14, r24
   1e6ea:	f9 1e       	adc	r15, r25
   1e6ec:	0a 1f       	adc	r16, r26
   1e6ee:	1b 1f       	adc	r17, r27
   1e6f0:	e0 92 8e 01 	sts	0x018E, r14
   1e6f4:	f0 92 8f 01 	sts	0x018F, r15
   1e6f8:	00 93 90 01 	sts	0x0190, r16
   1e6fc:	10 93 91 01 	sts	0x0191, r17
   1e700:	20 ce       	rjmp	.-960    	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
   1e702:	8d 36       	cpi	r24, 0x6D	; 109
   1e704:	99 f4       	brne	.+38     	; 0x1e72c <main+0x4cc>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1e706:	80 91 8e 01 	lds	r24, 0x018E
   1e70a:	90 91 8f 01 	lds	r25, 0x018F
   1e70e:	a0 91 90 01 	lds	r26, 0x0190
   1e712:	b0 91 91 01 	lds	r27, 0x0191
   1e716:	25 e0       	ldi	r18, 0x05	; 5
   1e718:	fc 01       	movw	r30, r24
   1e71a:	a0 93 5b 00 	sts	0x005B, r26
   1e71e:	20 93 57 00 	sts	0x0057, r18
   1e722:	e8 95       	spm

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1e724:	07 b6       	in	r0, 0x37	; 55
   1e726:	00 fc       	sbrc	r0, 0
   1e728:	fd cf       	rjmp	.-6      	; 0x1e724 <main+0x4c4>
   1e72a:	0b ce       	rjmp	.-1002   	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
   1e72c:	82 35       	cpi	r24, 0x52	; 82
   1e72e:	81 f4       	brne	.+32     	; 0x1e750 <main+0x4f0>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1e730:	e0 90 8e 01 	lds	r14, 0x018E
   1e734:	f0 90 8f 01 	lds	r15, 0x018F
   1e738:	00 91 90 01 	lds	r16, 0x0190
   1e73c:	10 91 91 01 	lds	r17, 0x0191
   1e740:	0b bf       	out	0x3b, r16	; 59
   1e742:	f7 01       	movw	r30, r14
   1e744:	e7 90       	elpm	r14, Z+
   1e746:	f6 90       	elpm	r15, Z+
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1e748:	8f 2d       	mov	r24, r15
   1e74a:	36 dd       	rcall	.-1428   	; 0x1e1b8 <WriteNextResponseByte>
		WriteNextResponseByte(ProgramWord & 0xFF);
   1e74c:	8e 2d       	mov	r24, r14
   1e74e:	4c c0       	rjmp	.+152    	; 0x1e7e8 <main+0x588>
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
   1e750:	84 34       	cpi	r24, 0x44	; 68
   1e752:	21 f5       	brne	.+72     	; 0x1e79c <main+0x53c>
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1e754:	e0 90 8e 01 	lds	r14, 0x018E
   1e758:	f0 90 8f 01 	lds	r15, 0x018F
   1e75c:	00 91 90 01 	lds	r16, 0x0190
   1e760:	10 91 91 01 	lds	r17, 0x0191
   1e764:	16 95       	lsr	r17
   1e766:	07 95       	ror	r16
   1e768:	f7 94       	ror	r15
   1e76a:	e7 94       	ror	r14
   1e76c:	0d dd       	rcall	.-1510   	; 0x1e188 <FetchNextCommandByte>
   1e76e:	68 2f       	mov	r22, r24
   1e770:	c7 01       	movw	r24, r14
   1e772:	36 d4       	rcall	.+2156   	; 0x1efe0 <__eewr_byte_usb1286>

		/* Increment the address after use */
		CurrAddress += 2;
   1e774:	80 91 8e 01 	lds	r24, 0x018E
   1e778:	90 91 8f 01 	lds	r25, 0x018F
   1e77c:	a0 91 90 01 	lds	r26, 0x0190
   1e780:	b0 91 91 01 	lds	r27, 0x0191
   1e784:	02 96       	adiw	r24, 0x02	; 2
   1e786:	a1 1d       	adc	r26, r1
   1e788:	b1 1d       	adc	r27, r1
   1e78a:	80 93 8e 01 	sts	0x018E, r24
   1e78e:	90 93 8f 01 	sts	0x018F, r25
   1e792:	a0 93 90 01 	sts	0x0190, r26
   1e796:	b0 93 91 01 	sts	0x0191, r27
   1e79a:	d3 cd       	rjmp	.-1114   	; 0x1e342 <main+0xe2>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'd')
   1e79c:	84 36       	cpi	r24, 0x64	; 100
   1e79e:	09 f5       	brne	.+66     	; 0x1e7e2 <main+0x582>
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1e7a0:	e0 90 8e 01 	lds	r14, 0x018E
   1e7a4:	f0 90 8f 01 	lds	r15, 0x018F
   1e7a8:	00 91 90 01 	lds	r16, 0x0190
   1e7ac:	10 91 91 01 	lds	r17, 0x0191
   1e7b0:	d8 01       	movw	r26, r16
   1e7b2:	c7 01       	movw	r24, r14
   1e7b4:	b6 95       	lsr	r27
   1e7b6:	a7 95       	ror	r26
   1e7b8:	97 95       	ror	r25
   1e7ba:	87 95       	ror	r24
   1e7bc:	09 d4       	rcall	.+2066   	; 0x1efd0 <__eerd_byte_usb1286>
   1e7be:	fc dc       	rcall	.-1544   	; 0x1e1b8 <WriteNextResponseByte>

		/* Increment the address after use */
		CurrAddress += 2;
   1e7c0:	82 e0       	ldi	r24, 0x02	; 2
   1e7c2:	90 e0       	ldi	r25, 0x00	; 0
   1e7c4:	a0 e0       	ldi	r26, 0x00	; 0
   1e7c6:	b0 e0       	ldi	r27, 0x00	; 0
   1e7c8:	e8 0e       	add	r14, r24
   1e7ca:	f9 1e       	adc	r15, r25
   1e7cc:	0a 1f       	adc	r16, r26
   1e7ce:	1b 1f       	adc	r17, r27
   1e7d0:	e0 92 8e 01 	sts	0x018E, r14
   1e7d4:	f0 92 8f 01 	sts	0x018F, r15
   1e7d8:	00 93 90 01 	sts	0x0190, r16
   1e7dc:	10 93 91 01 	sts	0x0191, r17
   1e7e0:	04 c0       	rjmp	.+8      	; 0x1e7ea <main+0x58a>
	}
	#endif
	else if (Command != 27)
   1e7e2:	8b 31       	cpi	r24, 0x1B	; 27
   1e7e4:	11 f0       	breq	.+4      	; 0x1e7ea <main+0x58a>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
   1e7e6:	8f e3       	ldi	r24, 0x3F	; 63
   1e7e8:	e7 dc       	rcall	.-1586   	; 0x1e1b8 <WriteNextResponseByte>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e7ea:	93 e0       	ldi	r25, 0x03	; 3
   1e7ec:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1e7f0:	90 91 e8 00 	lds	r25, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e7f4:	80 91 e8 00 	lds	r24, 0x00E8
   1e7f8:	8e 77       	andi	r24, 0x7E	; 126
   1e7fa:	80 93 e8 00 	sts	0x00E8, r24

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1e7fe:	95 ff       	sbrs	r25, 5
   1e800:	04 c0       	rjmp	.+8      	; 0x1e80a <main+0x5aa>
   1e802:	10 c0       	rjmp	.+32     	; 0x1e824 <main+0x5c4>
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e804:	8e b3       	in	r24, 0x1e	; 30
   1e806:	88 23       	and	r24, r24
   1e808:	c9 f0       	breq	.+50     	; 0x1e83c <main+0x5dc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e80a:	80 91 e8 00 	lds	r24, 0x00E8
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1e80e:	80 ff       	sbrs	r24, 0
   1e810:	f9 cf       	rjmp	.-14     	; 0x1e804 <main+0x5a4>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1e812:	80 91 e8 00 	lds	r24, 0x00E8
   1e816:	8e 77       	andi	r24, 0x7E	; 126
   1e818:	80 93 e8 00 	sts	0x00E8, r24
   1e81c:	03 c0       	rjmp	.+6      	; 0x1e824 <main+0x5c4>
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e81e:	8e b3       	in	r24, 0x1e	; 30
   1e820:	88 23       	and	r24, r24
   1e822:	61 f0       	breq	.+24     	; 0x1e83c <main+0x5dc>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1e824:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1e828:	80 ff       	sbrs	r24, 0
   1e82a:	f9 cf       	rjmp	.-14     	; 0x1e81e <main+0x5be>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e82c:	a4 e0       	ldi	r26, 0x04	; 4
   1e82e:	a0 93 e9 00 	sts	0x00E9, r26
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1e832:	80 91 e8 00 	lds	r24, 0x00E8
   1e836:	8b 77       	andi	r24, 0x7B	; 123
   1e838:	80 93 e8 00 	sts	0x00E8, r24
	timeout = 0;
	
	while (RunBootloader)
	{
		CDC_Task();
		USB_USBTask();
   1e83c:	b5 d3       	rcall	.+1898   	; 0x1efa8 <USB_USBTask>
		if (timeout > TIMEOUT_PERIOD)
   1e83e:	20 91 96 01 	lds	r18, 0x0196
   1e842:	30 91 97 01 	lds	r19, 0x0197
   1e846:	40 91 98 01 	lds	r20, 0x0198
   1e84a:	50 91 99 01 	lds	r21, 0x0199
   1e84e:	80 91 92 01 	lds	r24, 0x0192
   1e852:	90 91 93 01 	lds	r25, 0x0193
   1e856:	a0 91 94 01 	lds	r26, 0x0194
   1e85a:	b0 91 95 01 	lds	r27, 0x0195
   1e85e:	82 17       	cp	r24, r18
   1e860:	93 07       	cpc	r25, r19
   1e862:	a4 07       	cpc	r26, r20
   1e864:	b5 07       	cpc	r27, r21
   1e866:	18 f4       	brcc	.+6      	; 0x1e86e <main+0x60e>
		{
			RunBootloader = false;
   1e868:	10 92 0f 01 	sts	0x010F, r1
			/*turn off backlight*/
			PORTC &= ~_BV(PORTC6); 
   1e86c:	46 98       	cbi	0x08, 6	; 8
		TIMEOUT_PERIOD = 1;
	}
	
	timeout = 0;
	
	while (RunBootloader)
   1e86e:	80 91 0f 01 	lds	r24, 0x010F
   1e872:	88 23       	and	r24, r24
   1e874:	09 f0       	breq	.+2      	; 0x1e878 <main+0x618>
   1e876:	54 cd       	rjmp	.-1368   	; 0x1e320 <main+0xc0>
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1e878:	80 91 e0 00 	lds	r24, 0x00E0
   1e87c:	81 60       	ori	r24, 0x01	; 1
   1e87e:	80 93 e0 00 	sts	0x00E0, r24

	/* Disconnect from the host - USB interface will be reset later along with the AVR */
	USB_Detach();
	
	/* Unlock the forced application start mode of the bootloader if it is restarted */
	MagicBootKey = MAGIC_BOOT_KEY;
   1e882:	82 e4       	ldi	r24, 0x42	; 66
   1e884:	9c ed       	ldi	r25, 0xDC	; 220
   1e886:	90 93 a5 01 	sts	0x01A5, r25
   1e88a:	80 93 a4 01 	sts	0x01A4, r24

	/* Enable the watchdog and force a timeout to reset the AVR */
	wdt_enable(WDTO_250MS);
   1e88e:	2c e0       	ldi	r18, 0x0C	; 12
   1e890:	88 e1       	ldi	r24, 0x18	; 24
   1e892:	90 e0       	ldi	r25, 0x00	; 0
   1e894:	0f b6       	in	r0, 0x3f	; 63
   1e896:	f8 94       	cli
   1e898:	a8 95       	wdr
   1e89a:	80 93 60 00 	sts	0x0060, r24
   1e89e:	0f be       	out	0x3f, r0	; 63
   1e8a0:	20 93 60 00 	sts	0x0060, r18
   1e8a4:	ff cf       	rjmp	.-2      	; 0x1e8a4 <main+0x644>

0001e8a6 <CALLBACK_USB_GetDescriptor>:
 *  USB host.
 */
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue,
                                    const uint8_t wIndex,
                                    const void** const DescriptorAddress)
{
   1e8a6:	fa 01       	movw	r30, r20
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1e8a8:	92 30       	cpi	r25, 0x02	; 2
   1e8aa:	49 f0       	breq	.+18     	; 0x1e8be <CALLBACK_USB_GetDescriptor+0x18>
   1e8ac:	93 30       	cpi	r25, 0x03	; 3
   1e8ae:	61 f0       	breq	.+24     	; 0x1e8c8 <CALLBACK_USB_GetDescriptor+0x22>
   1e8b0:	91 30       	cpi	r25, 0x01	; 1
   1e8b2:	f9 f4       	brne	.+62     	; 0x1e8f2 <CALLBACK_USB_GetDescriptor+0x4c>
   1e8b4:	80 e1       	ldi	r24, 0x10	; 16
   1e8b6:	91 e0       	ldi	r25, 0x01	; 1
   1e8b8:	22 e1       	ldi	r18, 0x12	; 18
   1e8ba:	30 e0       	ldi	r19, 0x00	; 0
   1e8bc:	1e c0       	rjmp	.+60     	; 0x1e8fa <CALLBACK_USB_GetDescriptor+0x54>
   1e8be:	82 e2       	ldi	r24, 0x22	; 34
   1e8c0:	91 e0       	ldi	r25, 0x01	; 1
   1e8c2:	2e e3       	ldi	r18, 0x3E	; 62
   1e8c4:	30 e0       	ldi	r19, 0x00	; 0
   1e8c6:	19 c0       	rjmp	.+50     	; 0x1e8fa <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
   1e8c8:	88 23       	and	r24, r24
   1e8ca:	29 f4       	brne	.+10     	; 0x1e8d6 <CALLBACK_USB_GetDescriptor+0x30>
   1e8cc:	80 e6       	ldi	r24, 0x60	; 96
   1e8ce:	91 e0       	ldi	r25, 0x01	; 1
   1e8d0:	24 e0       	ldi	r18, 0x04	; 4
   1e8d2:	30 e0       	ldi	r19, 0x00	; 0
   1e8d4:	12 c0       	rjmp	.+36     	; 0x1e8fa <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
   1e8d6:	81 30       	cpi	r24, 0x01	; 1
   1e8d8:	29 f4       	brne	.+10     	; 0x1e8e4 <CALLBACK_USB_GetDescriptor+0x3e>
   1e8da:	88 e9       	ldi	r24, 0x98	; 152
   1e8dc:	90 ee       	ldi	r25, 0xE0	; 224
   1e8de:	28 e1       	ldi	r18, 0x18	; 24
   1e8e0:	30 e0       	ldi	r19, 0x00	; 0
   1e8e2:	0b c0       	rjmp	.+22     	; 0x1e8fa <CALLBACK_USB_GetDescriptor+0x54>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
   1e8e4:	82 30       	cpi	r24, 0x02	; 2
   1e8e6:	29 f4       	brne	.+10     	; 0x1e8f2 <CALLBACK_USB_GetDescriptor+0x4c>
   1e8e8:	84 e6       	ldi	r24, 0x64	; 100
   1e8ea:	91 e0       	ldi	r25, 0x01	; 1
   1e8ec:	28 e2       	ldi	r18, 0x28	; 40
   1e8ee:	30 e0       	ldi	r19, 0x00	; 0
   1e8f0:	04 c0       	rjmp	.+8      	; 0x1e8fa <CALLBACK_USB_GetDescriptor+0x54>
   1e8f2:	80 e0       	ldi	r24, 0x00	; 0
   1e8f4:	90 e0       	ldi	r25, 0x00	; 0
   1e8f6:	20 e0       	ldi	r18, 0x00	; 0
   1e8f8:	30 e0       	ldi	r19, 0x00	; 0
			}

			break;
	}

	*DescriptorAddress = Address;
   1e8fa:	91 83       	std	Z+1, r25	; 0x01
   1e8fc:	80 83       	st	Z, r24
	return Size;
}
   1e8fe:	c9 01       	movw	r24, r18
   1e900:	08 95       	ret

0001e902 <BootloaderAPI_ErasePage>:
 */

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
   1e902:	9b 01       	movw	r18, r22
   1e904:	ac 01       	movw	r20, r24
	boot_page_erase_safe(Address);
   1e906:	07 b6       	in	r0, 0x37	; 55
   1e908:	00 fc       	sbrc	r0, 0
   1e90a:	fd cf       	rjmp	.-6      	; 0x1e906 <BootloaderAPI_ErasePage+0x4>
   1e90c:	f9 99       	sbic	0x1f, 1	; 31
   1e90e:	fe cf       	rjmp	.-4      	; 0x1e90c <BootloaderAPI_ErasePage+0xa>
   1e910:	83 e0       	ldi	r24, 0x03	; 3
   1e912:	f9 01       	movw	r30, r18
   1e914:	40 93 5b 00 	sts	0x005B, r20
   1e918:	80 93 57 00 	sts	0x0057, r24
   1e91c:	e8 95       	spm
	boot_spm_busy_wait();
   1e91e:	07 b6       	in	r0, 0x37	; 55
   1e920:	00 fc       	sbrc	r0, 0
   1e922:	fd cf       	rjmp	.-6      	; 0x1e91e <BootloaderAPI_ErasePage+0x1c>
	boot_rww_enable();
   1e924:	81 e1       	ldi	r24, 0x11	; 17
   1e926:	80 93 57 00 	sts	0x0057, r24
   1e92a:	e8 95       	spm
}
   1e92c:	08 95       	ret

0001e92e <BootloaderAPI_WritePage>:

void BootloaderAPI_WritePage(const uint32_t Address)
{
   1e92e:	9b 01       	movw	r18, r22
   1e930:	ac 01       	movw	r20, r24
	boot_page_write_safe(Address);
   1e932:	07 b6       	in	r0, 0x37	; 55
   1e934:	00 fc       	sbrc	r0, 0
   1e936:	fd cf       	rjmp	.-6      	; 0x1e932 <BootloaderAPI_WritePage+0x4>
   1e938:	f9 99       	sbic	0x1f, 1	; 31
   1e93a:	fe cf       	rjmp	.-4      	; 0x1e938 <BootloaderAPI_WritePage+0xa>
   1e93c:	85 e0       	ldi	r24, 0x05	; 5
   1e93e:	f9 01       	movw	r30, r18
   1e940:	40 93 5b 00 	sts	0x005B, r20
   1e944:	80 93 57 00 	sts	0x0057, r24
   1e948:	e8 95       	spm
	boot_spm_busy_wait();
   1e94a:	07 b6       	in	r0, 0x37	; 55
   1e94c:	00 fc       	sbrc	r0, 0
   1e94e:	fd cf       	rjmp	.-6      	; 0x1e94a <BootloaderAPI_WritePage+0x1c>
	boot_rww_enable();
   1e950:	81 e1       	ldi	r24, 0x11	; 17
   1e952:	80 93 57 00 	sts	0x0057, r24
   1e956:	e8 95       	spm
}
   1e958:	08 95       	ret

0001e95a <BootloaderAPI_FillWord>:

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
   1e95a:	0f 93       	push	r16
   1e95c:	1f 93       	push	r17
   1e95e:	8b 01       	movw	r16, r22
   1e960:	9c 01       	movw	r18, r24
	boot_page_fill_safe(Address, Word);
   1e962:	07 b6       	in	r0, 0x37	; 55
   1e964:	00 fc       	sbrc	r0, 0
   1e966:	fd cf       	rjmp	.-6      	; 0x1e962 <BootloaderAPI_FillWord+0x8>
   1e968:	f9 99       	sbic	0x1f, 1	; 31
   1e96a:	fe cf       	rjmp	.-4      	; 0x1e968 <BootloaderAPI_FillWord+0xe>
   1e96c:	81 e0       	ldi	r24, 0x01	; 1
   1e96e:	0a 01       	movw	r0, r20
   1e970:	f8 01       	movw	r30, r16
   1e972:	20 93 5b 00 	sts	0x005B, r18
   1e976:	80 93 57 00 	sts	0x0057, r24
   1e97a:	e8 95       	spm
   1e97c:	11 24       	eor	r1, r1
}
   1e97e:	1f 91       	pop	r17
   1e980:	0f 91       	pop	r16
   1e982:	08 95       	ret

0001e984 <BootloaderAPI_ReadSignature>:

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1e984:	21 e2       	ldi	r18, 0x21	; 33
   1e986:	fc 01       	movw	r30, r24
   1e988:	20 93 57 00 	sts	0x0057, r18
   1e98c:	24 91       	lpm	r18, Z+
}
   1e98e:	82 2f       	mov	r24, r18
   1e990:	08 95       	ret

0001e992 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1e992:	29 e0       	ldi	r18, 0x09	; 9
   1e994:	fc 01       	movw	r30, r24
   1e996:	20 93 57 00 	sts	0x0057, r18
   1e99a:	24 91       	lpm	r18, Z+
}
   1e99c:	82 2f       	mov	r24, r18
   1e99e:	08 95       	ret

0001e9a0 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1e9a0:	e1 e0       	ldi	r30, 0x01	; 1
   1e9a2:	f0 e0       	ldi	r31, 0x00	; 0
   1e9a4:	89 e0       	ldi	r24, 0x09	; 9
   1e9a6:	80 93 57 00 	sts	0x0057, r24
   1e9aa:	84 91       	lpm	r24, Z+
}
   1e9ac:	08 95       	ret

0001e9ae <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
   1e9ae:	98 2f       	mov	r25, r24
	boot_lock_bits_set_safe(LockBits);
   1e9b0:	07 b6       	in	r0, 0x37	; 55
   1e9b2:	00 fc       	sbrc	r0, 0
   1e9b4:	fd cf       	rjmp	.-6      	; 0x1e9b0 <BootloaderAPI_WriteLock+0x2>
   1e9b6:	f9 99       	sbic	0x1f, 1	; 31
   1e9b8:	fe cf       	rjmp	.-4      	; 0x1e9b6 <BootloaderAPI_WriteLock+0x8>
   1e9ba:	90 95       	com	r25
   1e9bc:	89 e0       	ldi	r24, 0x09	; 9
   1e9be:	e1 e0       	ldi	r30, 0x01	; 1
   1e9c0:	f0 e0       	ldi	r31, 0x00	; 0
   1e9c2:	09 2e       	mov	r0, r25
   1e9c4:	80 93 57 00 	sts	0x0057, r24
   1e9c8:	e8 95       	spm
}
   1e9ca:	08 95       	ret

0001e9cc <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1e9cc:	8f 70       	andi	r24, 0x0F	; 15
   1e9ce:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1e9d2:	80 91 eb 00 	lds	r24, 0x00EB
   1e9d6:	81 60       	ori	r24, 0x01	; 1
   1e9d8:	80 93 eb 00 	sts	0x00EB, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1e9dc:	10 92 ed 00 	sts	0x00ED, r1
	UECFG0X = UECFG0XData;
   1e9e0:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1e9e4:	40 93 ed 00 	sts	0x00ED, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1e9e8:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1e9ec:	88 1f       	adc	r24, r24
   1e9ee:	88 27       	eor	r24, r24
   1e9f0:	88 1f       	adc	r24, r24
   1e9f2:	08 95       	ret

0001e9f4 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1e9f4:	80 91 9c 01 	lds	r24, 0x019C
   1e9f8:	88 23       	and	r24, r24
   1e9fa:	8c f4       	brge	.+34     	; 0x1ea1e <Endpoint_ClearStatusStage+0x2a>
   1e9fc:	03 c0       	rjmp	.+6      	; 0x1ea04 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1e9fe:	8e b3       	in	r24, 0x1e	; 30
   1ea00:	88 23       	and	r24, r24
   1ea02:	b1 f0       	breq	.+44     	; 0x1ea30 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ea04:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1ea08:	82 ff       	sbrs	r24, 2
   1ea0a:	f9 cf       	rjmp	.-14     	; 0x1e9fe <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ea0c:	80 91 e8 00 	lds	r24, 0x00E8
   1ea10:	8b 77       	andi	r24, 0x7B	; 123
   1ea12:	80 93 e8 00 	sts	0x00E8, r24
   1ea16:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1ea18:	8e b3       	in	r24, 0x1e	; 30
   1ea1a:	88 23       	and	r24, r24
   1ea1c:	49 f0       	breq	.+18     	; 0x1ea30 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ea1e:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1ea22:	80 ff       	sbrs	r24, 0
   1ea24:	f9 cf       	rjmp	.-14     	; 0x1ea18 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ea26:	80 91 e8 00 	lds	r24, 0x00E8
   1ea2a:	8e 77       	andi	r24, 0x7E	; 126
   1ea2c:	80 93 e8 00 	sts	0x00E8, r24
   1ea30:	08 95       	ret

0001ea32 <USB_ResetInterface>:

void USB_ResetInterface(void)
{
   1ea32:	ef 92       	push	r14
   1ea34:	ff 92       	push	r15
   1ea36:	0f 93       	push	r16
   1ea38:	1f 93       	push	r17
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1ea3a:	48 d0       	rcall	.+144    	; 0x1eacc <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1ea3c:	4f d0       	rcall	.+158    	; 0x1eadc <USB_INT_ClearAllInterrupts>
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1ea3e:	08 ed       	ldi	r16, 0xD8	; 216
   1ea40:	10 e0       	ldi	r17, 0x00	; 0
   1ea42:	f8 01       	movw	r30, r16
   1ea44:	80 81       	ld	r24, Z
   1ea46:	8f 77       	andi	r24, 0x7F	; 127
   1ea48:	80 83       	st	Z, r24
				USBCON |=  (1 << USBE);
   1ea4a:	80 81       	ld	r24, Z
   1ea4c:	80 68       	ori	r24, 0x80	; 128
   1ea4e:	80 83       	st	Z, r24
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1ea50:	80 81       	ld	r24, Z
   1ea52:	8f 7d       	andi	r24, 0xDF	; 223
   1ea54:	80 83       	st	Z, r24

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1ea56:	e7 ed       	ldi	r30, 0xD7	; 215
   1ea58:	f0 e0       	ldi	r31, 0x00	; 0
   1ea5a:	80 81       	ld	r24, Z
   1ea5c:	80 68       	ori	r24, 0x80	; 128
   1ea5e:	80 83       	st	Z, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1ea60:	19 bc       	out	0x29, r1	; 41
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
   1ea62:	1e ba       	out	0x1e, r1	; 30
	USB_Device_ConfigurationNumber  = 0;
   1ea64:	10 92 9a 01 	sts	0x019A, r1
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1ea68:	80 ee       	ldi	r24, 0xE0	; 224
   1ea6a:	e8 2e       	mov	r14, r24
   1ea6c:	f1 2c       	mov	r15, r1
   1ea6e:	f7 01       	movw	r30, r14
   1ea70:	80 81       	ld	r24, Z
   1ea72:	8b 7f       	andi	r24, 0xFB	; 251
   1ea74:	80 83       	st	Z, r24
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1ea76:	f8 01       	movw	r30, r16
   1ea78:	80 81       	ld	r24, Z
   1ea7a:	81 60       	ori	r24, 0x01	; 1
   1ea7c:	80 83       	st	Z, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ea7e:	80 e0       	ldi	r24, 0x00	; 0
   1ea80:	60 e0       	ldi	r22, 0x00	; 0
   1ea82:	42 e0       	ldi	r20, 0x02	; 2
   1ea84:	a3 df       	rcall	.-186    	; 0x1e9cc <Endpoint_ConfigureEndpoint_Prv>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ea86:	e1 ee       	ldi	r30, 0xE1	; 225
   1ea88:	f0 e0       	ldi	r31, 0x00	; 0
   1ea8a:	80 81       	ld	r24, Z
   1ea8c:	8e 7f       	andi	r24, 0xFE	; 254
   1ea8e:	80 83       	st	Z, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ea90:	e2 ee       	ldi	r30, 0xE2	; 226
   1ea92:	f0 e0       	ldi	r31, 0x00	; 0
   1ea94:	80 81       	ld	r24, Z
   1ea96:	81 60       	ori	r24, 0x01	; 1
   1ea98:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1ea9a:	80 81       	ld	r24, Z
   1ea9c:	88 60       	ori	r24, 0x08	; 8
   1ea9e:	80 83       	st	Z, r24
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1eaa0:	f7 01       	movw	r30, r14
   1eaa2:	80 81       	ld	r24, Z
   1eaa4:	8e 7f       	andi	r24, 0xFE	; 254
   1eaa6:	80 83       	st	Z, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1eaa8:	f8 01       	movw	r30, r16
   1eaaa:	80 81       	ld	r24, Z
   1eaac:	80 61       	ori	r24, 0x10	; 16
   1eaae:	80 83       	st	Z, r24
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1eab0:	1f 91       	pop	r17
   1eab2:	0f 91       	pop	r16
   1eab4:	ff 90       	pop	r15
   1eab6:	ef 90       	pop	r14
   1eab8:	08 95       	ret

0001eaba <USB_Init>:

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1eaba:	e7 ed       	ldi	r30, 0xD7	; 215
   1eabc:	f0 e0       	ldi	r31, 0x00	; 0
   1eabe:	80 81       	ld	r24, Z
   1eac0:	81 60       	ori	r24, 0x01	; 1
   1eac2:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1eac4:	81 e0       	ldi	r24, 0x01	; 1
   1eac6:	80 93 9b 01 	sts	0x019B, r24

	USB_ResetInterface();
}
   1eaca:	b3 cf       	rjmp	.-154    	; 0x1ea32 <USB_ResetInterface>

0001eacc <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1eacc:	e8 ed       	ldi	r30, 0xD8	; 216
   1eace:	f0 e0       	ldi	r31, 0x00	; 0
   1ead0:	80 81       	ld	r24, Z
   1ead2:	8c 7f       	andi	r24, 0xFC	; 252
   1ead4:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1ead6:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1eada:	08 95       	ret

0001eadc <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1eadc:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1eae0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1eae4:	08 95       	ret

0001eae6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1eae6:	1f 92       	push	r1
   1eae8:	0f 92       	push	r0
   1eaea:	0f b6       	in	r0, 0x3f	; 63
   1eaec:	0f 92       	push	r0
   1eaee:	0b b6       	in	r0, 0x3b	; 59
   1eaf0:	0f 92       	push	r0
   1eaf2:	11 24       	eor	r1, r1
   1eaf4:	2f 93       	push	r18
   1eaf6:	3f 93       	push	r19
   1eaf8:	4f 93       	push	r20
   1eafa:	5f 93       	push	r21
   1eafc:	6f 93       	push	r22
   1eafe:	7f 93       	push	r23
   1eb00:	8f 93       	push	r24
   1eb02:	9f 93       	push	r25
   1eb04:	af 93       	push	r26
   1eb06:	bf 93       	push	r27
   1eb08:	ef 93       	push	r30
   1eb0a:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1eb0c:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1eb10:	80 ff       	sbrs	r24, 0
   1eb12:	1b c0       	rjmp	.+54     	; 0x1eb4a <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1eb14:	80 91 d8 00 	lds	r24, 0x00D8
   1eb18:	80 ff       	sbrs	r24, 0
   1eb1a:	17 c0       	rjmp	.+46     	; 0x1eb4a <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1eb1c:	80 91 da 00 	lds	r24, 0x00DA
   1eb20:	8e 7f       	andi	r24, 0xFE	; 254
   1eb22:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1eb26:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1eb2a:	80 ff       	sbrs	r24, 0
   1eb2c:	0b c0       	rjmp	.+22     	; 0x1eb44 <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb2e:	84 e1       	ldi	r24, 0x14	; 20
   1eb30:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb32:	86 e1       	ldi	r24, 0x16	; 22
   1eb34:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1eb36:	09 b4       	in	r0, 0x29	; 41
   1eb38:	00 fe       	sbrs	r0, 0
   1eb3a:	fd cf       	rjmp	.-6      	; 0x1eb36 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1eb3c:	81 e0       	ldi	r24, 0x01	; 1
   1eb3e:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1eb40:	32 d2       	rcall	.+1124   	; 0x1efa6 <USB_Event_Stub>
   1eb42:	03 c0       	rjmp	.+6      	; 0x1eb4a <__vector_10+0x64>
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb44:	19 bc       	out	0x29, r1	; 41
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1eb46:	1e ba       	out	0x1e, r1	; 30
			EVENT_USB_Device_Disconnect();
   1eb48:	2e d2       	rcall	.+1116   	; 0x1efa6 <USB_Event_Stub>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1eb4a:	80 91 e1 00 	lds	r24, 0x00E1
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1eb4e:	80 ff       	sbrs	r24, 0
   1eb50:	17 c0       	rjmp	.+46     	; 0x1eb80 <__vector_10+0x9a>
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1eb52:	80 91 e2 00 	lds	r24, 0x00E2
   1eb56:	80 ff       	sbrs	r24, 0
   1eb58:	13 c0       	rjmp	.+38     	; 0x1eb80 <__vector_10+0x9a>
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1eb5a:	80 91 e2 00 	lds	r24, 0x00E2
   1eb5e:	8e 7f       	andi	r24, 0xFE	; 254
   1eb60:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1eb64:	80 91 e2 00 	lds	r24, 0x00E2
   1eb68:	80 61       	ori	r24, 0x10	; 16
   1eb6a:	80 93 e2 00 	sts	0x00E2, r24
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1eb6e:	80 91 d8 00 	lds	r24, 0x00D8
   1eb72:	80 62       	ori	r24, 0x20	; 32
   1eb74:	80 93 d8 00 	sts	0x00D8, r24
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1eb78:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1eb7a:	85 e0       	ldi	r24, 0x05	; 5
   1eb7c:	8e bb       	out	0x1e, r24	; 30
		EVENT_USB_Device_Suspend();
   1eb7e:	13 d2       	rcall	.+1062   	; 0x1efa6 <USB_Event_Stub>
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1eb80:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1eb84:	84 ff       	sbrs	r24, 4
   1eb86:	2c c0       	rjmp	.+88     	; 0x1ebe0 <__vector_10+0xfa>
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1eb88:	80 91 e2 00 	lds	r24, 0x00E2
   1eb8c:	84 ff       	sbrs	r24, 4
   1eb8e:	28 c0       	rjmp	.+80     	; 0x1ebe0 <__vector_10+0xfa>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1eb90:	84 e1       	ldi	r24, 0x14	; 20
   1eb92:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1eb94:	86 e1       	ldi	r24, 0x16	; 22
   1eb96:	89 bd       	out	0x29, r24	; 41
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1eb98:	09 b4       	in	r0, 0x29	; 41
   1eb9a:	00 fe       	sbrs	r0, 0
   1eb9c:	fd cf       	rjmp	.-6      	; 0x1eb98 <__vector_10+0xb2>
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1eb9e:	80 91 d8 00 	lds	r24, 0x00D8
   1eba2:	8f 7d       	andi	r24, 0xDF	; 223
   1eba4:	80 93 d8 00 	sts	0x00D8, r24
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1eba8:	80 91 e1 00 	lds	r24, 0x00E1
   1ebac:	8f 7e       	andi	r24, 0xEF	; 239
   1ebae:	80 93 e1 00 	sts	0x00E1, r24
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1ebb2:	80 91 e2 00 	lds	r24, 0x00E2
   1ebb6:	8f 7e       	andi	r24, 0xEF	; 239
   1ebb8:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1ebbc:	80 91 e2 00 	lds	r24, 0x00E2
   1ebc0:	81 60       	ori	r24, 0x01	; 1
   1ebc2:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1ebc6:	80 91 9a 01 	lds	r24, 0x019A
   1ebca:	88 23       	and	r24, r24
   1ebcc:	31 f4       	brne	.+12     	; 0x1ebda <__vector_10+0xf4>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ebce:	80 91 e3 00 	lds	r24, 0x00E3
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ebd2:	87 fd       	sbrc	r24, 7
   1ebd4:	02 c0       	rjmp	.+4      	; 0x1ebda <__vector_10+0xf4>
   1ebd6:	81 e0       	ldi	r24, 0x01	; 1
   1ebd8:	01 c0       	rjmp	.+2      	; 0x1ebdc <__vector_10+0xf6>
   1ebda:	84 e0       	ldi	r24, 0x04	; 4
   1ebdc:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1ebde:	e3 d1       	rcall	.+966    	; 0x1efa6 <USB_Event_Stub>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1ebe0:	80 91 e1 00 	lds	r24, 0x00E1
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1ebe4:	83 ff       	sbrs	r24, 3
   1ebe6:	21 c0       	rjmp	.+66     	; 0x1ec2a <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1ebe8:	80 91 e2 00 	lds	r24, 0x00E2
   1ebec:	83 ff       	sbrs	r24, 3
   1ebee:	1d c0       	rjmp	.+58     	; 0x1ec2a <__vector_10+0x144>
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1ebf0:	80 91 e1 00 	lds	r24, 0x00E1
   1ebf4:	87 7f       	andi	r24, 0xF7	; 247
   1ebf6:	80 93 e1 00 	sts	0x00E1, r24
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1ebfa:	82 e0       	ldi	r24, 0x02	; 2
   1ebfc:	8e bb       	out	0x1e, r24	; 30
		USB_Device_ConfigurationNumber = 0;
   1ebfe:	10 92 9a 01 	sts	0x019A, r1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1ec02:	80 91 e1 00 	lds	r24, 0x00E1
   1ec06:	8e 7f       	andi	r24, 0xFE	; 254
   1ec08:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1ec0c:	80 91 e2 00 	lds	r24, 0x00E2
   1ec10:	8e 7f       	andi	r24, 0xFE	; 254
   1ec12:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1ec16:	80 91 e2 00 	lds	r24, 0x00E2
   1ec1a:	80 61       	ori	r24, 0x10	; 16
   1ec1c:	80 93 e2 00 	sts	0x00E2, r24
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
   1ec20:	80 e0       	ldi	r24, 0x00	; 0
   1ec22:	60 e0       	ldi	r22, 0x00	; 0
   1ec24:	42 e0       	ldi	r20, 0x02	; 2
   1ec26:	d2 de       	rcall	.-604    	; 0x1e9cc <Endpoint_ConfigureEndpoint_Prv>

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1ec28:	be d1       	rcall	.+892    	; 0x1efa6 <USB_Event_Stub>
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1ec2a:	ff 91       	pop	r31
   1ec2c:	ef 91       	pop	r30
   1ec2e:	bf 91       	pop	r27
   1ec30:	af 91       	pop	r26
   1ec32:	9f 91       	pop	r25
   1ec34:	8f 91       	pop	r24
   1ec36:	7f 91       	pop	r23
   1ec38:	6f 91       	pop	r22
   1ec3a:	5f 91       	pop	r21
   1ec3c:	4f 91       	pop	r20
   1ec3e:	3f 91       	pop	r19
   1ec40:	2f 91       	pop	r18
   1ec42:	0f 90       	pop	r0
   1ec44:	0b be       	out	0x3b, r0	; 59
   1ec46:	0f 90       	pop	r0
   1ec48:	0f be       	out	0x3f, r0	; 63
   1ec4a:	0f 90       	pop	r0
   1ec4c:	1f 90       	pop	r1
   1ec4e:	18 95       	reti

0001ec50 <Endpoint_Write_Control_Stream_LE>:
   1ec50:	9c 01       	movw	r18, r24
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1ec52:	40 91 a2 01 	lds	r20, 0x01A2
   1ec56:	50 91 a3 01 	lds	r21, 0x01A3
   1ec5a:	46 17       	cp	r20, r22
   1ec5c:	57 07       	cpc	r21, r23
   1ec5e:	18 f4       	brcc	.+6      	; 0x1ec66 <Endpoint_Write_Control_Stream_LE+0x16>

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (const void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1ec60:	f9 01       	movw	r30, r18
   1ec62:	90 e0       	ldi	r25, 0x00	; 0
   1ec64:	3c c0       	rjmp	.+120    	; 0x1ecde <Endpoint_Write_Control_Stream_LE+0x8e>
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1ec66:	61 15       	cp	r22, r1
   1ec68:	71 05       	cpc	r23, r1
   1ec6a:	11 f0       	breq	.+4      	; 0x1ec70 <Endpoint_Write_Control_Stream_LE+0x20>
   1ec6c:	ab 01       	movw	r20, r22
   1ec6e:	f8 cf       	rjmp	.-16     	; 0x1ec60 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ec70:	80 91 e8 00 	lds	r24, 0x00E8
   1ec74:	8e 77       	andi	r24, 0x7E	; 126
   1ec76:	80 93 e8 00 	sts	0x00E8, r24
   1ec7a:	40 e0       	ldi	r20, 0x00	; 0
   1ec7c:	50 e0       	ldi	r21, 0x00	; 0
   1ec7e:	f0 cf       	rjmp	.-32     	; 0x1ec60 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ec80:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ec82:	88 23       	and	r24, r24
   1ec84:	e9 f1       	breq	.+122    	; 0x1ed00 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ec86:	85 30       	cpi	r24, 0x05	; 5
   1ec88:	e9 f1       	breq	.+122    	; 0x1ed04 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ec8a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ec8e:	83 ff       	sbrs	r24, 3
   1ec90:	02 c0       	rjmp	.+4      	; 0x1ec96 <Endpoint_Write_Control_Stream_LE+0x46>
   1ec92:	81 e0       	ldi	r24, 0x01	; 1
   1ec94:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ec96:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1ec9a:	82 fd       	sbrc	r24, 2
   1ec9c:	2b c0       	rjmp	.+86     	; 0x1ecf4 <Endpoint_Write_Control_Stream_LE+0xa4>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ec9e:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1eca2:	80 ff       	sbrs	r24, 0
   1eca4:	1c c0       	rjmp	.+56     	; 0x1ecde <Endpoint_Write_Control_Stream_LE+0x8e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
   1eca6:	20 91 f2 00 	lds	r18, 0x00F2
   1ecaa:	30 91 f3 00 	lds	r19, 0x00F3
   1ecae:	07 c0       	rjmp	.+14     	; 0x1ecbe <Endpoint_Write_Control_Stream_LE+0x6e>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ecb0:	81 91       	ld	r24, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ecb2:	80 93 f1 00 	sts	0x00F1, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ecb6:	41 50       	subi	r20, 0x01	; 1
   1ecb8:	50 40       	sbci	r21, 0x00	; 0
				BytesInEndpoint++;
   1ecba:	2f 5f       	subi	r18, 0xFF	; 255
   1ecbc:	3f 4f       	sbci	r19, 0xFF	; 255

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1ecbe:	41 15       	cp	r20, r1
   1ecc0:	51 05       	cpc	r21, r1
   1ecc2:	19 f0       	breq	.+6      	; 0x1ecca <Endpoint_Write_Control_Stream_LE+0x7a>
   1ecc4:	28 30       	cpi	r18, 0x08	; 8
   1ecc6:	31 05       	cpc	r19, r1
   1ecc8:	98 f3       	brcs	.-26     	; 0x1ecb0 <Endpoint_Write_Control_Stream_LE+0x60>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1ecca:	90 e0       	ldi	r25, 0x00	; 0
   1eccc:	28 30       	cpi	r18, 0x08	; 8
   1ecce:	31 05       	cpc	r19, r1
   1ecd0:	09 f4       	brne	.+2      	; 0x1ecd4 <Endpoint_Write_Control_Stream_LE+0x84>
   1ecd2:	91 e0       	ldi	r25, 0x01	; 1
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ecd4:	80 91 e8 00 	lds	r24, 0x00E8
   1ecd8:	8e 77       	andi	r24, 0x7E	; 126
   1ecda:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1ecde:	41 15       	cp	r20, r1
   1ece0:	51 05       	cpc	r21, r1
   1ece2:	71 f6       	brne	.-100    	; 0x1ec80 <Endpoint_Write_Control_Stream_LE+0x30>
   1ece4:	99 23       	and	r25, r25
   1ece6:	61 f6       	brne	.-104    	; 0x1ec80 <Endpoint_Write_Control_Stream_LE+0x30>
   1ece8:	05 c0       	rjmp	.+10     	; 0x1ecf4 <Endpoint_Write_Control_Stream_LE+0xa4>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ecea:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ecec:	88 23       	and	r24, r24
   1ecee:	41 f0       	breq	.+16     	; 0x1ed00 <Endpoint_Write_Control_Stream_LE+0xb0>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ecf0:	85 30       	cpi	r24, 0x05	; 5
   1ecf2:	41 f0       	breq	.+16     	; 0x1ed04 <Endpoint_Write_Control_Stream_LE+0xb4>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ecf4:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1ecf8:	82 ff       	sbrs	r24, 2
   1ecfa:	f7 cf       	rjmp	.-18     	; 0x1ecea <Endpoint_Write_Control_Stream_LE+0x9a>
   1ecfc:	80 e0       	ldi	r24, 0x00	; 0
   1ecfe:	08 95       	ret
   1ed00:	82 e0       	ldi	r24, 0x02	; 2
   1ed02:	08 95       	ret
   1ed04:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ed06:	08 95       	ret

0001ed08 <Endpoint_Read_Control_Stream_LE>:
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1ed08:	9c 01       	movw	r18, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1ed0a:	61 15       	cp	r22, r1
   1ed0c:	71 05       	cpc	r23, r1
   1ed0e:	29 f4       	brne	.+10     	; 0x1ed1a <Endpoint_Read_Control_Stream_LE+0x12>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed10:	80 91 e8 00 	lds	r24, 0x00E8
   1ed14:	8b 77       	andi	r24, 0x7B	; 123
   1ed16:	80 93 e8 00 	sts	0x00E8, r24

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
   1ed1a:	f9 01       	movw	r30, r18
   1ed1c:	21 c0       	rjmp	.+66     	; 0x1ed60 <Endpoint_Read_Control_Stream_LE+0x58>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ed1e:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ed20:	88 23       	and	r24, r24
   1ed22:	69 f1       	breq	.+90     	; 0x1ed7e <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ed24:	85 30       	cpi	r24, 0x05	; 5
   1ed26:	69 f1       	breq	.+90     	; 0x1ed82 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ed28:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1ed2c:	83 ff       	sbrs	r24, 3
   1ed2e:	02 c0       	rjmp	.+4      	; 0x1ed34 <Endpoint_Read_Control_Stream_LE+0x2c>
   1ed30:	81 e0       	ldi	r24, 0x01	; 1
   1ed32:	08 95       	ret
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1ed34:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1ed38:	82 ff       	sbrs	r24, 2
   1ed3a:	f1 cf       	rjmp	.-30     	; 0x1ed1e <Endpoint_Read_Control_Stream_LE+0x16>
   1ed3c:	06 c0       	rjmp	.+12     	; 0x1ed4a <Endpoint_Read_Control_Stream_LE+0x42>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ed3e:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1ed42:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1ed44:	61 50       	subi	r22, 0x01	; 1
   1ed46:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1ed48:	31 f0       	breq	.+12     	; 0x1ed56 <Endpoint_Read_Control_Stream_LE+0x4e>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
   1ed4a:	80 91 f2 00 	lds	r24, 0x00F2
   1ed4e:	90 91 f3 00 	lds	r25, 0x00F3
   1ed52:	89 2b       	or	r24, r25
   1ed54:	a1 f7       	brne	.-24     	; 0x1ed3e <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ed56:	80 91 e8 00 	lds	r24, 0x00E8
   1ed5a:	8b 77       	andi	r24, 0x7B	; 123
   1ed5c:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1ed60:	61 15       	cp	r22, r1
   1ed62:	71 05       	cpc	r23, r1
   1ed64:	e1 f6       	brne	.-72     	; 0x1ed1e <Endpoint_Read_Control_Stream_LE+0x16>
   1ed66:	05 c0       	rjmp	.+10     	; 0x1ed72 <Endpoint_Read_Control_Stream_LE+0x6a>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1ed68:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1ed6a:	88 23       	and	r24, r24
   1ed6c:	41 f0       	breq	.+16     	; 0x1ed7e <Endpoint_Read_Control_Stream_LE+0x76>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1ed6e:	85 30       	cpi	r24, 0x05	; 5
   1ed70:	41 f0       	breq	.+16     	; 0x1ed82 <Endpoint_Read_Control_Stream_LE+0x7a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1ed72:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1ed76:	80 ff       	sbrs	r24, 0
   1ed78:	f7 cf       	rjmp	.-18     	; 0x1ed68 <Endpoint_Read_Control_Stream_LE+0x60>
   1ed7a:	80 e0       	ldi	r24, 0x00	; 0
   1ed7c:	08 95       	ret
   1ed7e:	82 e0       	ldi	r24, 0x02	; 2
   1ed80:	08 95       	ret
   1ed82:	83 e0       	ldi	r24, 0x03	; 3
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1ed84:	08 95       	ret

0001ed86 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1ed86:	0f 93       	push	r16
   1ed88:	1f 93       	push	r17
   1ed8a:	df 93       	push	r29
   1ed8c:	cf 93       	push	r28
   1ed8e:	00 d0       	rcall	.+0      	; 0x1ed90 <USB_Device_ProcessControlRequest+0xa>
   1ed90:	cd b7       	in	r28, 0x3d	; 61
   1ed92:	de b7       	in	r29, 0x3e	; 62
   1ed94:	ec e9       	ldi	r30, 0x9C	; 156
   1ed96:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1ed98:	80 91 f1 00 	lds	r24, 0x00F1
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1ed9c:	81 93       	st	Z+, r24
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1ed9e:	81 e0       	ldi	r24, 0x01	; 1
   1eda0:	e4 3a       	cpi	r30, 0xA4	; 164
   1eda2:	f8 07       	cpc	r31, r24
   1eda4:	c9 f7       	brne	.-14     	; 0x1ed98 <USB_Device_ProcessControlRequest+0x12>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1eda6:	20 da       	rcall	.-3008   	; 0x1e1e8 <EVENT_USB_Device_ControlRequest>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1eda8:	80 91 e8 00 	lds	r24, 0x00E8

	if (Endpoint_IsSETUPReceived())
   1edac:	83 ff       	sbrs	r24, 3
   1edae:	e6 c0       	rjmp	.+460    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1edb0:	80 91 9c 01 	lds	r24, 0x019C

		switch (USB_ControlRequest.bRequest)
   1edb4:	90 91 9d 01 	lds	r25, 0x019D
   1edb8:	95 30       	cpi	r25, 0x05	; 5
   1edba:	09 f4       	brne	.+2      	; 0x1edbe <USB_Device_ProcessControlRequest+0x38>
   1edbc:	6f c0       	rjmp	.+222    	; 0x1ee9c <USB_Device_ProcessControlRequest+0x116>
   1edbe:	96 30       	cpi	r25, 0x06	; 6
   1edc0:	40 f4       	brcc	.+16     	; 0x1edd2 <USB_Device_ProcessControlRequest+0x4c>
   1edc2:	91 30       	cpi	r25, 0x01	; 1
   1edc4:	91 f1       	breq	.+100    	; 0x1ee2a <USB_Device_ProcessControlRequest+0xa4>
   1edc6:	91 30       	cpi	r25, 0x01	; 1
   1edc8:	70 f0       	brcs	.+28     	; 0x1ede6 <USB_Device_ProcessControlRequest+0x60>
   1edca:	93 30       	cpi	r25, 0x03	; 3
   1edcc:	09 f0       	breq	.+2      	; 0x1edd0 <USB_Device_ProcessControlRequest+0x4a>
   1edce:	d6 c0       	rjmp	.+428    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
   1edd0:	2c c0       	rjmp	.+88     	; 0x1ee2a <USB_Device_ProcessControlRequest+0xa4>
   1edd2:	98 30       	cpi	r25, 0x08	; 8
   1edd4:	09 f4       	brne	.+2      	; 0x1edd8 <USB_Device_ProcessControlRequest+0x52>
   1edd6:	a5 c0       	rjmp	.+330    	; 0x1ef22 <USB_Device_ProcessControlRequest+0x19c>
   1edd8:	99 30       	cpi	r25, 0x09	; 9
   1edda:	09 f4       	brne	.+2      	; 0x1edde <USB_Device_ProcessControlRequest+0x58>
   1eddc:	b4 c0       	rjmp	.+360    	; 0x1ef46 <USB_Device_ProcessControlRequest+0x1c0>
   1edde:	96 30       	cpi	r25, 0x06	; 6
   1ede0:	09 f0       	breq	.+2      	; 0x1ede4 <USB_Device_ProcessControlRequest+0x5e>
   1ede2:	cc c0       	rjmp	.+408    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
   1ede4:	7e c0       	rjmp	.+252    	; 0x1eee2 <USB_Device_ProcessControlRequest+0x15c>
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ede6:	80 38       	cpi	r24, 0x80	; 128
   1ede8:	11 f4       	brne	.+4      	; 0x1edee <USB_Device_ProcessControlRequest+0x68>
   1edea:	90 e0       	ldi	r25, 0x00	; 0
   1edec:	14 c0       	rjmp	.+40     	; 0x1ee16 <USB_Device_ProcessControlRequest+0x90>
   1edee:	82 38       	cpi	r24, 0x82	; 130
   1edf0:	09 f0       	breq	.+2      	; 0x1edf4 <USB_Device_ProcessControlRequest+0x6e>
   1edf2:	c4 c0       	rjmp	.+392    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1edf4:	80 91 a0 01 	lds	r24, 0x01A0
   1edf8:	8f 70       	andi	r24, 0x0F	; 15
   1edfa:	80 93 e9 00 	sts	0x00E9, r24
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1edfe:	80 91 eb 00 	lds	r24, 0x00EB
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);

			CurrentStatus = Endpoint_IsStalled();
   1ee02:	90 e0       	ldi	r25, 0x00	; 0
   1ee04:	25 e0       	ldi	r18, 0x05	; 5
   1ee06:	96 95       	lsr	r25
   1ee08:	87 95       	ror	r24
   1ee0a:	2a 95       	dec	r18
   1ee0c:	e1 f7       	brne	.-8      	; 0x1ee06 <USB_Device_ProcessControlRequest+0x80>
   1ee0e:	98 2f       	mov	r25, r24
   1ee10:	91 70       	andi	r25, 0x01	; 1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee12:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee16:	80 91 e8 00 	lds	r24, 0x00E8
   1ee1a:	87 7f       	andi	r24, 0xF7	; 247
   1ee1c:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1ee20:	90 93 f1 00 	sts	0x00F1, r25
				UEDATX = (Data >> 8);
   1ee24:	10 92 f1 00 	sts	0x00F1, r1
   1ee28:	87 c0       	rjmp	.+270    	; 0x1ef38 <USB_Device_ProcessControlRequest+0x1b2>
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1ee2a:	88 23       	and	r24, r24
   1ee2c:	19 f0       	breq	.+6      	; 0x1ee34 <USB_Device_ProcessControlRequest+0xae>
   1ee2e:	82 30       	cpi	r24, 0x02	; 2
   1ee30:	09 f0       	breq	.+2      	; 0x1ee34 <USB_Device_ProcessControlRequest+0xae>
   1ee32:	a4 c0       	rjmp	.+328    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1ee34:	8f 71       	andi	r24, 0x1F	; 31
   1ee36:	82 30       	cpi	r24, 0x02	; 2
   1ee38:	09 f0       	breq	.+2      	; 0x1ee3c <USB_Device_ProcessControlRequest+0xb6>
   1ee3a:	a0 c0       	rjmp	.+320    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1ee3c:	80 91 9e 01 	lds	r24, 0x019E
   1ee40:	88 23       	and	r24, r24
   1ee42:	31 f5       	brne	.+76     	; 0x1ee90 <USB_Device_ProcessControlRequest+0x10a>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1ee44:	20 91 a0 01 	lds	r18, 0x01A0
   1ee48:	2f 70       	andi	r18, 0x0F	; 15

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1ee4a:	09 f4       	brne	.+2      	; 0x1ee4e <USB_Device_ProcessControlRequest+0xc8>
   1ee4c:	97 c0       	rjmp	.+302    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee4e:	20 93 e9 00 	sts	0x00E9, r18
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1ee52:	80 91 eb 00 	lds	r24, 0x00EB
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1ee56:	80 ff       	sbrs	r24, 0
   1ee58:	1b c0       	rjmp	.+54     	; 0x1ee90 <USB_Device_ProcessControlRequest+0x10a>
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1ee5a:	93 30       	cpi	r25, 0x03	; 3
   1ee5c:	21 f4       	brne	.+8      	; 0x1ee66 <USB_Device_ProcessControlRequest+0xe0>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ee5e:	80 91 eb 00 	lds	r24, 0x00EB
   1ee62:	80 62       	ori	r24, 0x20	; 32
   1ee64:	13 c0       	rjmp	.+38     	; 0x1ee8c <USB_Device_ProcessControlRequest+0x106>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1ee66:	80 91 eb 00 	lds	r24, 0x00EB
   1ee6a:	80 61       	ori	r24, 0x10	; 16
   1ee6c:	80 93 eb 00 	sts	0x00EB, r24
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1ee70:	81 e0       	ldi	r24, 0x01	; 1
   1ee72:	90 e0       	ldi	r25, 0x00	; 0
   1ee74:	02 c0       	rjmp	.+4      	; 0x1ee7a <USB_Device_ProcessControlRequest+0xf4>
   1ee76:	88 0f       	add	r24, r24
   1ee78:	99 1f       	adc	r25, r25
   1ee7a:	2a 95       	dec	r18
   1ee7c:	e2 f7       	brpl	.-8      	; 0x1ee76 <USB_Device_ProcessControlRequest+0xf0>
   1ee7e:	80 93 ea 00 	sts	0x00EA, r24
				UERST = 0;
   1ee82:	10 92 ea 00 	sts	0x00EA, r1

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1ee86:	80 91 eb 00 	lds	r24, 0x00EB
   1ee8a:	88 60       	ori	r24, 0x08	; 8
   1ee8c:	80 93 eb 00 	sts	0x00EB, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1ee90:	10 92 e9 00 	sts	0x00E9, r1
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ee94:	80 91 e8 00 	lds	r24, 0x00E8
   1ee98:	87 7f       	andi	r24, 0xF7	; 247
   1ee9a:	51 c0       	rjmp	.+162    	; 0x1ef3e <USB_Device_ProcessControlRequest+0x1b8>
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ee9c:	88 23       	and	r24, r24
   1ee9e:	09 f0       	breq	.+2      	; 0x1eea2 <USB_Device_ProcessControlRequest+0x11c>
   1eea0:	6d c0       	rjmp	.+218    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1eea2:	10 91 9e 01 	lds	r17, 0x019E
   1eea6:	1f 77       	andi	r17, 0x7F	; 127
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1eea8:	0f b7       	in	r16, 0x3f	; 63
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1eeaa:	f8 94       	cli
   1eeac:	80 91 e8 00 	lds	r24, 0x00E8
   1eeb0:	87 7f       	andi	r24, 0xF7	; 247
   1eeb2:	80 93 e8 00 	sts	0x00E8, r24
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1eeb6:	9e dd       	rcall	.-1220   	; 0x1e9f4 <Endpoint_ClearStatusStage>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1eeb8:	80 91 e8 00 	lds	r24, 0x00E8

	while (!(Endpoint_IsINReady()));
   1eebc:	80 ff       	sbrs	r24, 0
   1eebe:	fc cf       	rjmp	.-8      	; 0x1eeb8 <USB_Device_ProcessControlRequest+0x132>
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1eec0:	80 91 e3 00 	lds	r24, 0x00E3
   1eec4:	80 78       	andi	r24, 0x80	; 128
   1eec6:	81 2b       	or	r24, r17

				UDADDR = Temp;
   1eec8:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
   1eecc:	80 68       	ori	r24, 0x80	; 128
   1eece:	80 93 e3 00 	sts	0x00E3, r24

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1eed2:	11 23       	and	r17, r17
   1eed4:	11 f4       	brne	.+4      	; 0x1eeda <USB_Device_ProcessControlRequest+0x154>
   1eed6:	82 e0       	ldi	r24, 0x02	; 2
   1eed8:	01 c0       	rjmp	.+2      	; 0x1eedc <USB_Device_ProcessControlRequest+0x156>
   1eeda:	83 e0       	ldi	r24, 0x03	; 3
   1eedc:	8e bb       	out	0x1e, r24	; 30
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1eede:	0f bf       	out	0x3f, r16	; 63
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
   1eee0:	4d c0       	rjmp	.+154    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1eee2:	80 58       	subi	r24, 0x80	; 128
   1eee4:	82 30       	cpi	r24, 0x02	; 2
   1eee6:	08 f0       	brcs	.+2      	; 0x1eeea <USB_Device_ProcessControlRequest+0x164>
   1eee8:	49 c0       	rjmp	.+146    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1eeea:	80 91 9e 01 	lds	r24, 0x019E
   1eeee:	90 91 9f 01 	lds	r25, 0x019F
   1eef2:	60 91 a0 01 	lds	r22, 0x01A0
   1eef6:	ae 01       	movw	r20, r28
   1eef8:	4f 5f       	subi	r20, 0xFF	; 255
   1eefa:	5f 4f       	sbci	r21, 0xFF	; 255
   1eefc:	d4 dc       	rcall	.-1624   	; 0x1e8a6 <CALLBACK_USB_GetDescriptor>
   1eefe:	bc 01       	movw	r22, r24
   1ef00:	00 97       	sbiw	r24, 0x00	; 0
   1ef02:	09 f4       	brne	.+2      	; 0x1ef06 <USB_Device_ProcessControlRequest+0x180>
   1ef04:	3b c0       	rjmp	.+118    	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ef06:	80 91 e8 00 	lds	r24, 0x00E8
   1ef0a:	87 7f       	andi	r24, 0xF7	; 247
   1ef0c:	80 93 e8 00 	sts	0x00E8, r24
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1ef10:	89 81       	ldd	r24, Y+1	; 0x01
   1ef12:	9a 81       	ldd	r25, Y+2	; 0x02
   1ef14:	9d de       	rcall	.-710    	; 0x1ec50 <Endpoint_Write_Control_Stream_LE>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1ef16:	80 91 e8 00 	lds	r24, 0x00E8
   1ef1a:	8b 77       	andi	r24, 0x7B	; 123
   1ef1c:	80 93 e8 00 	sts	0x00E8, r24
   1ef20:	2d c0       	rjmp	.+90     	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1ef22:	80 38       	cpi	r24, 0x80	; 128
   1ef24:	59 f5       	brne	.+86     	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ef26:	80 91 e8 00 	lds	r24, 0x00E8
   1ef2a:	87 7f       	andi	r24, 0xF7	; 247
   1ef2c:	80 93 e8 00 	sts	0x00E8, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1ef30:	80 91 9a 01 	lds	r24, 0x019A
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1ef34:	80 93 f1 00 	sts	0x00F1, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1ef38:	80 91 e8 00 	lds	r24, 0x00E8
   1ef3c:	8e 77       	andi	r24, 0x7E	; 126
   1ef3e:	80 93 e8 00 	sts	0x00E8, r24
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1ef42:	58 dd       	rcall	.-1360   	; 0x1e9f4 <Endpoint_ClearStatusStage>
   1ef44:	1b c0       	rjmp	.+54     	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1ef46:	88 23       	and	r24, r24
   1ef48:	c9 f4       	brne	.+50     	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1ef4a:	90 91 9e 01 	lds	r25, 0x019E
   1ef4e:	92 30       	cpi	r25, 0x02	; 2
   1ef50:	a8 f4       	brcc	.+42     	; 0x1ef7c <USB_Device_ProcessControlRequest+0x1f6>
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ef52:	80 91 e8 00 	lds	r24, 0x00E8
   1ef56:	87 7f       	andi	r24, 0xF7	; 247
   1ef58:	80 93 e8 00 	sts	0x00E8, r24
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1ef5c:	90 93 9a 01 	sts	0x019A, r25

	Endpoint_ClearStatusStage();
   1ef60:	49 dd       	rcall	.-1390   	; 0x1e9f4 <Endpoint_ClearStatusStage>

	if (USB_Device_ConfigurationNumber)
   1ef62:	80 91 9a 01 	lds	r24, 0x019A
   1ef66:	88 23       	and	r24, r24
   1ef68:	31 f4       	brne	.+12     	; 0x1ef76 <USB_Device_ProcessControlRequest+0x1f0>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1ef6a:	80 91 e3 00 	lds	r24, 0x00E3
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1ef6e:	87 fd       	sbrc	r24, 7
   1ef70:	02 c0       	rjmp	.+4      	; 0x1ef76 <USB_Device_ProcessControlRequest+0x1f0>
   1ef72:	81 e0       	ldi	r24, 0x01	; 1
   1ef74:	01 c0       	rjmp	.+2      	; 0x1ef78 <USB_Device_ProcessControlRequest+0x1f2>
   1ef76:	84 e0       	ldi	r24, 0x04	; 4
   1ef78:	8e bb       	out	0x1e, r24	; 30

	EVENT_USB_Device_ConfigurationChanged();
   1ef7a:	66 d9       	rcall	.-3380   	; 0x1e248 <EVENT_USB_Device_ConfigurationChanged>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1ef7c:	80 91 e8 00 	lds	r24, 0x00E8

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1ef80:	83 ff       	sbrs	r24, 3
   1ef82:	0a c0       	rjmp	.+20     	; 0x1ef98 <USB_Device_ProcessControlRequest+0x212>
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1ef84:	80 91 eb 00 	lds	r24, 0x00EB
   1ef88:	80 62       	ori	r24, 0x20	; 32
   1ef8a:	80 93 eb 00 	sts	0x00EB, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1ef8e:	80 91 e8 00 	lds	r24, 0x00E8
   1ef92:	87 7f       	andi	r24, 0xF7	; 247
   1ef94:	80 93 e8 00 	sts	0x00E8, r24
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();
	}
}
   1ef98:	0f 90       	pop	r0
   1ef9a:	0f 90       	pop	r0
   1ef9c:	cf 91       	pop	r28
   1ef9e:	df 91       	pop	r29
   1efa0:	1f 91       	pop	r17
   1efa2:	0f 91       	pop	r16
   1efa4:	08 95       	ret

0001efa6 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
   1efa6:	08 95       	ret

0001efa8 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1efa8:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1efaa:	8e b3       	in	r24, 0x1e	; 30
   1efac:	88 23       	and	r24, r24
   1efae:	71 f0       	breq	.+28     	; 0x1efcc <USB_USBTask+0x24>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1efb0:	10 91 e9 00 	lds	r17, 0x00E9
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1efb4:	80 91 ec 00 	lds	r24, 0x00EC
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1efb8:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1efbc:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1efc0:	83 ff       	sbrs	r24, 3
   1efc2:	01 c0       	rjmp	.+2      	; 0x1efc6 <USB_USBTask+0x1e>
		  USB_Device_ProcessControlRequest();
   1efc4:	e0 de       	rcall	.-576    	; 0x1ed86 <USB_Device_ProcessControlRequest>
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1efc6:	1f 70       	andi	r17, 0x0F	; 15
   1efc8:	10 93 e9 00 	sts	0x00E9, r17
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
   1efcc:	1f 91       	pop	r17
   1efce:	08 95       	ret

0001efd0 <__eerd_byte_usb1286>:
   1efd0:	f9 99       	sbic	0x1f, 1	; 31
   1efd2:	fe cf       	rjmp	.-4      	; 0x1efd0 <__eerd_byte_usb1286>
   1efd4:	92 bd       	out	0x22, r25	; 34
   1efd6:	81 bd       	out	0x21, r24	; 33
   1efd8:	f8 9a       	sbi	0x1f, 0	; 31
   1efda:	99 27       	eor	r25, r25
   1efdc:	80 b5       	in	r24, 0x20	; 32
   1efde:	08 95       	ret

0001efe0 <__eewr_byte_usb1286>:
   1efe0:	26 2f       	mov	r18, r22

0001efe2 <__eewr_r18_usb1286>:
   1efe2:	f9 99       	sbic	0x1f, 1	; 31
   1efe4:	fe cf       	rjmp	.-4      	; 0x1efe2 <__eewr_r18_usb1286>
   1efe6:	1f ba       	out	0x1f, r1	; 31
   1efe8:	92 bd       	out	0x22, r25	; 34
   1efea:	81 bd       	out	0x21, r24	; 33
   1efec:	20 bd       	out	0x20, r18	; 32
   1efee:	0f b6       	in	r0, 0x3f	; 63
   1eff0:	f8 94       	cli
   1eff2:	fa 9a       	sbi	0x1f, 2	; 31
   1eff4:	f9 9a       	sbi	0x1f, 1	; 31
   1eff6:	0f be       	out	0x3f, r0	; 63
   1eff8:	01 96       	adiw	r24, 0x01	; 1
   1effa:	08 95       	ret

0001effc <_exit>:
   1effc:	f8 94       	cli

0001effe <__stop_program>:
   1effe:	ff cf       	rjmp	.-2      	; 0x1effe <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
   1ffa0:	0c 94 81 f4 	jmp	0x1e902	; 0x1e902 <BootloaderAPI_ErasePage>

0001ffa4 <BootloaderAPI_WritePage_Trampoline>:
   1ffa4:	0c 94 97 f4 	jmp	0x1e92e	; 0x1e92e <BootloaderAPI_WritePage>

0001ffa8 <BootloaderAPI_FillWord_Trampoline>:
   1ffa8:	0c 94 ad f4 	jmp	0x1e95a	; 0x1e95a <BootloaderAPI_FillWord>

0001ffac <BootloaderAPI_ReadSignature_Trampoline>:
   1ffac:	0c 94 c2 f4 	jmp	0x1e984	; 0x1e984 <BootloaderAPI_ReadSignature>

0001ffb0 <BootloaderAPI_ReadFuse_Trampoline>:
   1ffb0:	0c 94 c9 f4 	jmp	0x1e992	; 0x1e992 <BootloaderAPI_ReadFuse>

0001ffb4 <BootloaderAPI_ReadLock_Trampoline>:
   1ffb4:	0c 94 d0 f4 	jmp	0x1e9a0	; 0x1e9a0 <BootloaderAPI_ReadLock>

0001ffb8 <BootloaderAPI_WriteLock_Trampoline>:
   1ffb8:	0c 94 d7 f4 	jmp	0x1e9ae	; 0x1e9ae <BootloaderAPI_WriteLock>

0001ffbc <BootloaderAPU_UNUSED1>:
   1ffbc:	08 95       	ret

0001ffbe <BootloaderAPU_UNUSED2>:
   1ffbe:	08 95       	ret

0001ffc0 <BootloaderAPU_UNUSED3>:
   1ffc0:	08 95       	ret

0001ffc2 <BootloaderAPU_UNUSED4>:
   1ffc2:	08 95       	ret

0001ffc4 <BootloaderAPU_UNUSED5>:
   1ffc4:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
   1ffe2:	e0 cf       	rjmp	.-64     	; 0x1ffa4 <BootloaderAPI_WritePage_Trampoline>
   1ffe4:	e1 cf       	rjmp	.-62     	; 0x1ffa8 <BootloaderAPI_FillWord_Trampoline>
   1ffe6:	e2 cf       	rjmp	.-60     	; 0x1ffac <BootloaderAPI_ReadSignature_Trampoline>
   1ffe8:	e3 cf       	rjmp	.-58     	; 0x1ffb0 <BootloaderAPI_ReadFuse_Trampoline>
   1ffea:	e4 cf       	rjmp	.-56     	; 0x1ffb4 <BootloaderAPI_ReadLock_Trampoline>
   1ffec:	e5 cf       	rjmp	.-54     	; 0x1ffb8 <BootloaderAPI_WriteLock_Trampoline>
   1ffee:	e6 cf       	rjmp	.-52     	; 0x1ffbc <BootloaderAPU_UNUSED1>
   1fff0:	e6 cf       	rjmp	.-52     	; 0x1ffbe <BootloaderAPU_UNUSED2>
   1fff2:	e6 cf       	rjmp	.-52     	; 0x1ffc0 <BootloaderAPU_UNUSED3>
   1fff4:	e6 cf       	rjmp	.-52     	; 0x1ffc2 <BootloaderAPU_UNUSED4>
   1fff6:	e6 cf       	rjmp	.-52     	; 0x1ffc4 <BootloaderAPU_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 e0       	ldi	r16, 0x00	; 0
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	b1 df       	rcall	.-158    	; 0x1ff60 <__data_load_end+0xed2>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__data_load_end+0x968>
