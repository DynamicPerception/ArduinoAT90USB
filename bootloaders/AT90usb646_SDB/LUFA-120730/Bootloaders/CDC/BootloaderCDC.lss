
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  0000fec8  00000f9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ec8  0000f000  0000f000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  0000ffa0  0000ffa0  00001030  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0000ffe0  0000ffe0  00001048  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0000fff8  0000fff8  00001060  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000012  00800194  00800194  00001068  2**0
                  ALLOC
  6 .stab         00000954  00000000  00000000  00001068  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000001af  00000000  00000000  000019bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 00000398  00000000  00000000  00001b70  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005127  00000000  00000000  00001f08  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00001386  00000000  00000000  0000702f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000087da  00000000  00000000  000083b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000095c  00000000  00000000  00010b90  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000023aa  00000000  00000000  000114ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000038de  00000000  00000000  00013896  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 000e0f4f  00000000  00000000  00017174  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000618  00000000  00000000  000f80c8  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000f000 <__vectors>:
    f000:	6a c0       	rjmp	.+212    	; 0xf0d6 <__ctors_end>
    f002:	00 00       	nop
    f004:	83 c0       	rjmp	.+262    	; 0xf10c <__bad_interrupt>
    f006:	00 00       	nop
    f008:	81 c0       	rjmp	.+258    	; 0xf10c <__bad_interrupt>
    f00a:	00 00       	nop
    f00c:	7f c0       	rjmp	.+254    	; 0xf10c <__bad_interrupt>
    f00e:	00 00       	nop
    f010:	7d c0       	rjmp	.+250    	; 0xf10c <__bad_interrupt>
    f012:	00 00       	nop
    f014:	7b c0       	rjmp	.+246    	; 0xf10c <__bad_interrupt>
    f016:	00 00       	nop
    f018:	79 c0       	rjmp	.+242    	; 0xf10c <__bad_interrupt>
    f01a:	00 00       	nop
    f01c:	77 c0       	rjmp	.+238    	; 0xf10c <__bad_interrupt>
    f01e:	00 00       	nop
    f020:	75 c0       	rjmp	.+234    	; 0xf10c <__bad_interrupt>
    f022:	00 00       	nop
    f024:	73 c0       	rjmp	.+230    	; 0xf10c <__bad_interrupt>
    f026:	00 00       	nop
    f028:	be c4       	rjmp	.+2428   	; 0xf9a6 <__vector_10>
    f02a:	00 00       	nop
    f02c:	6f c0       	rjmp	.+222    	; 0xf10c <__bad_interrupt>
    f02e:	00 00       	nop
    f030:	6d c0       	rjmp	.+218    	; 0xf10c <__bad_interrupt>
    f032:	00 00       	nop
    f034:	6b c0       	rjmp	.+214    	; 0xf10c <__bad_interrupt>
    f036:	00 00       	nop
    f038:	69 c0       	rjmp	.+210    	; 0xf10c <__bad_interrupt>
    f03a:	00 00       	nop
    f03c:	67 c0       	rjmp	.+206    	; 0xf10c <__bad_interrupt>
    f03e:	00 00       	nop
    f040:	65 c0       	rjmp	.+202    	; 0xf10c <__bad_interrupt>
    f042:	00 00       	nop
    f044:	63 c0       	rjmp	.+198    	; 0xf10c <__bad_interrupt>
    f046:	00 00       	nop
    f048:	61 c0       	rjmp	.+194    	; 0xf10c <__bad_interrupt>
    f04a:	00 00       	nop
    f04c:	5f c0       	rjmp	.+190    	; 0xf10c <__bad_interrupt>
    f04e:	00 00       	nop
    f050:	5d c0       	rjmp	.+186    	; 0xf10c <__bad_interrupt>
    f052:	00 00       	nop
    f054:	5b c0       	rjmp	.+182    	; 0xf10c <__bad_interrupt>
    f056:	00 00       	nop
    f058:	59 c0       	rjmp	.+178    	; 0xf10c <__bad_interrupt>
    f05a:	00 00       	nop
    f05c:	57 c0       	rjmp	.+174    	; 0xf10c <__bad_interrupt>
    f05e:	00 00       	nop
    f060:	55 c0       	rjmp	.+170    	; 0xf10c <__bad_interrupt>
    f062:	00 00       	nop
    f064:	53 c0       	rjmp	.+166    	; 0xf10c <__bad_interrupt>
    f066:	00 00       	nop
    f068:	51 c0       	rjmp	.+162    	; 0xf10c <__bad_interrupt>
    f06a:	00 00       	nop
    f06c:	4f c0       	rjmp	.+158    	; 0xf10c <__bad_interrupt>
    f06e:	00 00       	nop
    f070:	4d c0       	rjmp	.+154    	; 0xf10c <__bad_interrupt>
    f072:	00 00       	nop
    f074:	4b c0       	rjmp	.+150    	; 0xf10c <__bad_interrupt>
    f076:	00 00       	nop
    f078:	49 c0       	rjmp	.+146    	; 0xf10c <__bad_interrupt>
    f07a:	00 00       	nop
    f07c:	47 c0       	rjmp	.+142    	; 0xf10c <__bad_interrupt>
    f07e:	00 00       	nop
    f080:	45 c0       	rjmp	.+138    	; 0xf10c <__bad_interrupt>
    f082:	00 00       	nop
    f084:	43 c0       	rjmp	.+134    	; 0xf10c <__bad_interrupt>
    f086:	00 00       	nop
    f088:	41 c0       	rjmp	.+130    	; 0xf10c <__bad_interrupt>
    f08a:	00 00       	nop
    f08c:	3f c0       	rjmp	.+126    	; 0xf10c <__bad_interrupt>
    f08e:	00 00       	nop
    f090:	3d c0       	rjmp	.+122    	; 0xf10c <__bad_interrupt>
    f092:	00 00       	nop
    f094:	3b c0       	rjmp	.+118    	; 0xf10c <__bad_interrupt>
    f096:	00 00       	nop

0000f098 <ProductString>:
    f098:	3c 03 44 00 79 00 6e 00 61 00 6d 00 69 00 63 00     <.D.y.n.a.m.i.c.
    f0a8:	20 00 50 00 65 00 72 00 63 00 65 00 70 00 74 00      .P.e.r.c.e.p.t.
    f0b8:	69 00 6f 00 6e 00 20 00 42 00 6f 00 6f 00 74 00     i.o.n. .B.o.o.t.
    f0c8:	6c 00 6f 00 61 00 64 00 65 00 72 00 00 00           l.o.a.d.e.r...

0000f0d6 <__ctors_end>:
    f0d6:	11 24       	eor	r1, r1
    f0d8:	1f be       	out	0x3f, r1	; 63
    f0da:	cf ef       	ldi	r28, 0xFF	; 255
    f0dc:	d0 e1       	ldi	r29, 0x10	; 16
    f0de:	de bf       	out	0x3e, r29	; 62
    f0e0:	cd bf       	out	0x3d, r28	; 61

0000f0e2 <__do_copy_data>:
    f0e2:	11 e0       	ldi	r17, 0x01	; 1
    f0e4:	a0 e0       	ldi	r26, 0x00	; 0
    f0e6:	b1 e0       	ldi	r27, 0x01	; 1
    f0e8:	e8 ec       	ldi	r30, 0xC8	; 200
    f0ea:	fe ef       	ldi	r31, 0xFE	; 254
    f0ec:	02 c0       	rjmp	.+4      	; 0xf0f2 <__do_copy_data+0x10>
    f0ee:	05 90       	lpm	r0, Z+
    f0f0:	0d 92       	st	X+, r0
    f0f2:	a4 39       	cpi	r26, 0x94	; 148
    f0f4:	b1 07       	cpc	r27, r17
    f0f6:	d9 f7       	brne	.-10     	; 0xf0ee <__do_copy_data+0xc>

0000f0f8 <__do_clear_bss>:
    f0f8:	11 e0       	ldi	r17, 0x01	; 1
    f0fa:	a4 e9       	ldi	r26, 0x94	; 148
    f0fc:	b1 e0       	ldi	r27, 0x01	; 1
    f0fe:	01 c0       	rjmp	.+2      	; 0xf102 <.do_clear_bss_start>

0000f100 <.do_clear_bss_loop>:
    f100:	1d 92       	st	X+, r1

0000f102 <.do_clear_bss_start>:
    f102:	a6 3a       	cpi	r26, 0xA6	; 166
    f104:	b1 07       	cpc	r27, r17
    f106:	e1 f7       	brne	.-8      	; 0xf100 <.do_clear_bss_loop>
    f108:	49 d0       	rcall	.+146    	; 0xf19c <main>
    f10a:	dc c6       	rjmp	.+3512   	; 0xfec4 <_exit>

0000f10c <__bad_interrupt>:
    f10c:	79 cf       	rjmp	.-270    	; 0xf000 <__vectors>

0000f10e <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f10e:	84 e0       	ldi	r24, 0x04	; 4
    f110:	80 93 e9 00 	sts	0x00E9, r24
    f114:	0d c0       	rjmp	.+26     	; 0xf130 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    f116:	80 91 e8 00 	lds	r24, 0x00E8
    f11a:	8b 77       	andi	r24, 0x7B	; 123
    f11c:	80 93 e8 00 	sts	0x00E8, r24
    f120:	03 c0       	rjmp	.+6      	; 0xf128 <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    f122:	8e b3       	in	r24, 0x1e	; 30
    f124:	88 23       	and	r24, r24
    f126:	59 f0       	breq	.+22     	; 0xf13e <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    f128:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
    f12c:	82 ff       	sbrs	r24, 2
    f12e:	f9 cf       	rjmp	.-14     	; 0xf122 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    f130:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
    f134:	85 ff       	sbrs	r24, 5
    f136:	ef cf       	rjmp	.-34     	; 0xf116 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    f138:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
    f13c:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
    f13e:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
    f140:	08 95       	ret

0000f142 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f142:	93 e0       	ldi	r25, 0x03	; 3
    f144:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    f148:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    f14c:	95 fd       	sbrc	r25, 5
    f14e:	0d c0       	rjmp	.+26     	; 0xf16a <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    f150:	90 91 e8 00 	lds	r25, 0x00E8
    f154:	9e 77       	andi	r25, 0x7E	; 126
    f156:	90 93 e8 00 	sts	0x00E8, r25
    f15a:	03 c0       	rjmp	.+6      	; 0xf162 <WriteNextResponseByte+0x20>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    f15c:	9e b3       	in	r25, 0x1e	; 30
    f15e:	99 23       	and	r25, r25
    f160:	31 f0       	breq	.+12     	; 0xf16e <WriteNextResponseByte+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    f162:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
    f166:	90 ff       	sbrs	r25, 0
    f168:	f9 cf       	rjmp	.-14     	; 0xf15c <WriteNextResponseByte+0x1a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    f16a:	80 93 f1 00 	sts	0x00F1, r24
    f16e:	08 95       	ret

0000f170 <BL_Pulse>:
	((void (*)(void))0x0000)();
}

void BL_Pulse(void)
{
	Pulse++;
    f170:	80 91 9a 01 	lds	r24, 0x019A
    f174:	90 91 9b 01 	lds	r25, 0x019B
    f178:	01 96       	adiw	r24, 0x01	; 1
    f17a:	90 93 9b 01 	sts	0x019B, r25
    f17e:	80 93 9a 01 	sts	0x019A, r24
	uint8_t p = Pulse >> 8;
    f182:	29 2f       	mov	r18, r25
	if (p > 127)
    f184:	97 ff       	sbrs	r25, 7
    f186:	03 c0       	rjmp	.+6      	; 0xf18e <BL_Pulse+0x1e>
	{
		p = 254-p;
    f188:	3e ef       	ldi	r19, 0xFE	; 254
    f18a:	39 1b       	sub	r19, r25
    f18c:	23 2f       	mov	r18, r19
	}
	p += p;
    f18e:	22 0f       	add	r18, r18
	if (((uint8_t)Pulse) > p)
    f190:	28 17       	cp	r18, r24
    f192:	10 f4       	brcc	.+4      	; 0xf198 <BL_Pulse+0x28>
	{
		PORTC &= ~_BV(PC6);
    f194:	46 98       	cbi	0x08, 6	; 8
    f196:	08 95       	ret
	}
	else
	{
		PORTC |= _BV(PC6);
    f198:	46 9a       	sbi	0x08, 6	; 8
    f19a:	08 95       	ret

0000f19c <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
    f19c:	2f 92       	push	r2
    f19e:	3f 92       	push	r3
    f1a0:	4f 92       	push	r4
    f1a2:	5f 92       	push	r5
    f1a4:	6f 92       	push	r6
    f1a6:	7f 92       	push	r7
    f1a8:	8f 92       	push	r8
    f1aa:	9f 92       	push	r9
    f1ac:	af 92       	push	r10
    f1ae:	bf 92       	push	r11
    f1b0:	cf 92       	push	r12
    f1b2:	df 92       	push	r13
    f1b4:	ef 92       	push	r14
    f1b6:	ff 92       	push	r15
    f1b8:	0f 93       	push	r16
    f1ba:	1f 93       	push	r17
    f1bc:	cf 93       	push	r28
    f1be:	df 93       	push	r29
    f1c0:	cd b7       	in	r28, 0x3d	; 61
    f1c2:	de b7       	in	r29, 0x3e	; 62
    f1c4:	29 97       	sbiw	r28, 0x09	; 9
    f1c6:	0f b6       	in	r0, 0x3f	; 63
    f1c8:	f8 94       	cli
    f1ca:	de bf       	out	0x3e, r29	; 62
    f1cc:	0f be       	out	0x3f, r0	; 63
    f1ce:	cd bf       	out	0x3d, r28	; 61
	/* Setup hardware required for the bootloader */
	DDRF = ~_BV(PF0);	//Set the D-Pad to a digital input	
    f1d0:	8e ef       	ldi	r24, 0xFE	; 254
    f1d2:	80 bb       	out	0x10, r24	; 16
	PORTF |= _BV(PF0);	//set pull up on D-Pad
    f1d4:	88 9a       	sbi	0x11, 0	; 17
	
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
    f1d6:	84 b7       	in	r24, 0x34	; 52
    f1d8:	87 7f       	andi	r24, 0xF7	; 247
    f1da:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
    f1dc:	88 e1       	ldi	r24, 0x18	; 24
    f1de:	0f b6       	in	r0, 0x3f	; 63
    f1e0:	f8 94       	cli
    f1e2:	80 93 60 00 	sts	0x0060, r24
    f1e6:	10 92 60 00 	sts	0x0060, r1
    f1ea:	0f be       	out	0x3f, r0	; 63
	
	if(!(PINF & _BV(PF0)))
    f1ec:	78 99       	sbic	0x0f, 0	; 15
    f1ee:	71 c2       	rjmp	.+1250   	; 0xf6d2 <main+0x536>
	{
		/* Set the LCD backlight as an output */
		DDRC = _BV(PC6);	
    f1f0:	80 e4       	ldi	r24, 0x40	; 64
    f1f2:	87 b9       	out	0x07, r24	; 7
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
    f1f4:	90 e0       	ldi	r25, 0x00	; 0
    f1f6:	80 e8       	ldi	r24, 0x80	; 128
    f1f8:	0f b6       	in	r0, 0x3f	; 63
    f1fa:	f8 94       	cli
    f1fc:	80 93 61 00 	sts	0x0061, r24
    f200:	90 93 61 00 	sts	0x0061, r25
    f204:	0f be       	out	0x3f, r0	; 63
		
		/* Disable clock division */
		clock_prescale_set(clock_div_1);

		/* Relocate the interrupt vector table to the bootloader section */
		MCUCR = (1 << IVCE);
    f206:	81 e0       	ldi	r24, 0x01	; 1
    f208:	85 bf       	out	0x35, r24	; 53
		MCUCR = (1 << IVSEL);
    f20a:	82 e0       	ldi	r24, 0x02	; 2
    f20c:	85 bf       	out	0x35, r24	; 53

		/* Initialize the USB and other board hardware drivers */
		USB_Init();
    f20e:	b5 d3       	rcall	.+1898   	; 0xf97a <USB_Init>
    f210:	78 94       	sei

		/* Enable global interrupts so that the USB stack can function */
		sei();
    f212:	e4 e0       	ldi	r30, 0x04	; 4
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f214:	2e 2e       	mov	r2, r30
    f216:	f3 e0       	ldi	r31, 0x03	; 3
    f218:	8f 2e       	mov	r8, r31
    f21a:	01 e0       	ldi	r16, 0x01	; 1
				else
				{
					LowByte = FetchNextCommandByte();
				}

				HighByte = !HighByte;
    f21c:	a5 e0       	ldi	r26, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    f21e:	3a 2e       	mov	r3, r26
    f220:	b9 e0       	ldi	r27, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == 'Q')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    f222:	9b 2e       	mov	r9, r27
    f224:	3d c2       	rjmp	.+1146   	; 0xf6a0 <main+0x504>
		USB_Init();

		/* Enable global interrupts so that the USB stack can function */
		sei();
		
		while (finished == 0)
    f226:	20 92 e9 00 	sts	0x00E9, r2
    f22a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    f22e:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
    f230:	35 c2       	rjmp	.+1130   	; 0xf69c <main+0x500>
    f232:	6d df       	rcall	.-294    	; 0xf10e <FetchNextCommandByte>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
    f234:	28 2f       	mov	r18, r24
    f236:	85 34       	cpi	r24, 0x45	; 69
    f238:	49 f4       	brne	.+18     	; 0xf24c <main+0xb0>

	if (Command == 'E')
    f23a:	8d e0       	ldi	r24, 0x0D	; 13
    f23c:	82 df       	rcall	.-252    	; 0xf142 <WriteNextResponseByte>
	{

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    f23e:	81 e0       	ldi	r24, 0x01	; 1
    f240:	90 e0       	ldi	r25, 0x00	; 0
    f242:	90 93 95 01 	sts	0x0195, r25
		finished = 1;
    f246:	80 93 94 01 	sts	0x0194, r24
    f24a:	01 c2       	rjmp	.+1026   	; 0xf64e <main+0x4b2>
    f24c:	84 35       	cpi	r24, 0x54	; 84
    f24e:	11 f4       	brne	.+4      	; 0xf254 <main+0xb8>
    f250:	5e df       	rcall	.-324    	; 0xf10e <FetchNextCommandByte>
	}
	else if (Command == 'T')
    f252:	d7 c1       	rjmp	.+942    	; 0xf602 <main+0x466>
    f254:	8c 34       	cpi	r24, 0x4C	; 76
	{
		FetchNextCommandByte();
    f256:	09 f4       	brne	.+2      	; 0xf25a <main+0xbe>
    f258:	d4 c1       	rjmp	.+936    	; 0xf602 <main+0x466>
    f25a:	80 35       	cpi	r24, 0x50	; 80

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == 'L') || (Command == 'P'))
    f25c:	09 f4       	brne	.+2      	; 0xf260 <main+0xc4>
    f25e:	d1 c1       	rjmp	.+930    	; 0xf602 <main+0x466>
    f260:	84 37       	cpi	r24, 0x74	; 116
    f262:	11 f4       	brne	.+4      	; 0xf268 <main+0xcc>
    f264:	84 e4       	ldi	r24, 0x44	; 68
    f266:	87 c0       	rjmp	.+270    	; 0xf376 <main+0x1da>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
    f268:	81 36       	cpi	r24, 0x61	; 97
    f26a:	11 f4       	brne	.+4      	; 0xf270 <main+0xd4>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
    f26c:	89 e5       	ldi	r24, 0x59	; 89
    f26e:	ee c1       	rjmp	.+988    	; 0xf64c <main+0x4b0>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
    f270:	81 34       	cpi	r24, 0x41	; 65
    f272:	19 f5       	brne	.+70     	; 0xf2ba <main+0x11e>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
    f274:	4c df       	rcall	.-360    	; 0xf10e <FetchNextCommandByte>
    f276:	18 2f       	mov	r17, r24
	}
	else if (Command == 'A')
    f278:	4a df       	rcall	.-364    	; 0xf10e <FetchNextCommandByte>
    f27a:	28 2f       	mov	r18, r24
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
    f27c:	30 e0       	ldi	r19, 0x00	; 0
    f27e:	22 0f       	add	r18, r18
    f280:	33 1f       	adc	r19, r19
		CurrAddress  |= (FetchNextCommandByte() << 1);
    f282:	a9 01       	movw	r20, r18
    f284:	66 27       	eor	r22, r22
    f286:	57 fd       	sbrc	r21, 7
    f288:	60 95       	com	r22
    f28a:	76 2f       	mov	r23, r22
    f28c:	11 0f       	add	r17, r17
    f28e:	1c 83       	std	Y+4, r17	; 0x04
    f290:	1b 82       	std	Y+3, r1	; 0x03
    f292:	2b 81       	ldd	r18, Y+3	; 0x03
    f294:	3c 81       	ldd	r19, Y+4	; 0x04
    f296:	c9 01       	movw	r24, r18
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
    f298:	aa 27       	eor	r26, r26
    f29a:	97 fd       	sbrc	r25, 7
    f29c:	a0 95       	com	r26
    f29e:	ba 2f       	mov	r27, r26
    f2a0:	48 2b       	or	r20, r24
    f2a2:	59 2b       	or	r21, r25
    f2a4:	6a 2b       	or	r22, r26
    f2a6:	7b 2b       	or	r23, r27
    f2a8:	40 93 96 01 	sts	0x0196, r20
		CurrAddress  |= (FetchNextCommandByte() << 1);
    f2ac:	50 93 97 01 	sts	0x0197, r21
    f2b0:	60 93 98 01 	sts	0x0198, r22
    f2b4:	70 93 99 01 	sts	0x0199, r23
    f2b8:	a4 c1       	rjmp	.+840    	; 0xf602 <main+0x466>
    f2ba:	80 37       	cpi	r24, 0x70	; 112
    f2bc:	11 f4       	brne	.+4      	; 0xf2c2 <main+0x126>
    f2be:	83 e5       	ldi	r24, 0x53	; 83
    f2c0:	c5 c1       	rjmp	.+906    	; 0xf64c <main+0x4b0>
    f2c2:	83 35       	cpi	r24, 0x53	; 83
    f2c4:	61 f4       	brne	.+24     	; 0xf2de <main+0x142>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
    f2c6:	60 e0       	ldi	r22, 0x00	; 0
    f2c8:	c6 2e       	mov	r12, r22
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
    f2ca:	61 e0       	ldi	r22, 0x01	; 1
    f2cc:	d6 2e       	mov	r13, r22
	}
	else if (Command == 'S')
    f2ce:	17 e0       	ldi	r17, 0x07	; 7
    f2d0:	f6 01       	movw	r30, r12
    f2d2:	81 91       	ld	r24, Z+
    f2d4:	6f 01       	movw	r12, r30
    f2d6:	35 df       	rcall	.-406    	; 0xf142 <WriteNextResponseByte>
    f2d8:	11 50       	subi	r17, 0x01	; 1
    f2da:	d1 f7       	brne	.-12     	; 0xf2d0 <main+0x134>
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
    f2dc:	b8 c1       	rjmp	.+880    	; 0xf64e <main+0x4b2>
    f2de:	86 35       	cpi	r24, 0x56	; 86
    f2e0:	21 f4       	brne	.+8      	; 0xf2ea <main+0x14e>
    f2e2:	81 e3       	ldi	r24, 0x31	; 49
    f2e4:	2e df       	rcall	.-420    	; 0xf142 <WriteNextResponseByte>
    f2e6:	80 e3       	ldi	r24, 0x30	; 48
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
    f2e8:	b1 c1       	rjmp	.+866    	; 0xf64c <main+0x4b0>
    f2ea:	83 37       	cpi	r24, 0x73	; 115
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
    f2ec:	31 f4       	brne	.+12     	; 0xf2fa <main+0x15e>
    f2ee:	82 e8       	ldi	r24, 0x82	; 130
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
    f2f0:	28 df       	rcall	.-432    	; 0xf142 <WriteNextResponseByte>
    f2f2:	86 e9       	ldi	r24, 0x96	; 150
    f2f4:	26 df       	rcall	.-436    	; 0xf142 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
    f2f6:	8e e1       	ldi	r24, 0x1E	; 30
    f2f8:	a9 c1       	rjmp	.+850    	; 0xf64c <main+0x4b0>
	}
	else if (Command == 's')
    f2fa:	85 36       	cpi	r24, 0x65	; 101
    f2fc:	a9 f4       	brne	.+42     	; 0xf328 <main+0x18c>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
    f2fe:	e0 e0       	ldi	r30, 0x00	; 0
    f300:	f0 e0       	ldi	r31, 0x00	; 0
    f302:	80 92 57 00 	sts	0x0057, r8
		WriteNextResponseByte(AVR_SIGNATURE_2);
    f306:	e8 95       	spm
    f308:	07 b6       	in	r0, 0x37	; 55
		WriteNextResponseByte(AVR_SIGNATURE_1);
    f30a:	00 fc       	sbrc	r0, 0
    f30c:	fd cf       	rjmp	.-6      	; 0xf308 <main+0x16c>
	}
	else if (Command == 'e')
    f30e:	30 92 57 00 	sts	0x0057, r3
    f312:	e8 95       	spm
    f314:	07 b6       	in	r0, 0x37	; 55
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
    f316:	00 fc       	sbrc	r0, 0
    f318:	fd cf       	rjmp	.-6      	; 0xf314 <main+0x178>
    f31a:	e0 50       	subi	r30, 0x00	; 0
			boot_spm_busy_wait();
    f31c:	ff 4f       	sbci	r31, 0xFF	; 255
    f31e:	20 ef       	ldi	r18, 0xF0	; 240
    f320:	e0 30       	cpi	r30, 0x00	; 0
			boot_page_write(CurrFlashAddress);
    f322:	f2 07       	cpc	r31, r18
    f324:	71 f7       	brne	.-36     	; 0xf302 <main+0x166>
    f326:	6d c1       	rjmp	.+730    	; 0xf602 <main+0x466>
			boot_spm_busy_wait();
    f328:	8c 36       	cpi	r24, 0x6C	; 108
    f32a:	49 f4       	brne	.+18     	; 0xf33e <main+0x1a2>
    f32c:	f0 de       	rcall	.-544    	; 0xf10e <FetchNextCommandByte>
    f32e:	80 95       	com	r24
    f330:	e1 e0       	ldi	r30, 0x01	; 1
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
    f332:	f0 e0       	ldi	r31, 0x00	; 0
    f334:	08 2e       	mov	r0, r24
    f336:	90 92 57 00 	sts	0x0057, r9
    f33a:	e8 95       	spm

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
    f33c:	62 c1       	rjmp	.+708    	; 0xf602 <main+0x466>
    f33e:	82 37       	cpi	r24, 0x72	; 114
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
    f340:	19 f4       	brne	.+6      	; 0xf348 <main+0x1ac>
    f342:	e1 e0       	ldi	r30, 0x01	; 1
    f344:	f0 e0       	ldi	r31, 0x00	; 0
    f346:	0e c0       	rjmp	.+28     	; 0xf364 <main+0x1c8>
    f348:	86 34       	cpi	r24, 0x46	; 70
    f34a:	19 f4       	brne	.+6      	; 0xf352 <main+0x1b6>
    f34c:	e0 e0       	ldi	r30, 0x00	; 0
    f34e:	f0 e0       	ldi	r31, 0x00	; 0
    f350:	09 c0       	rjmp	.+18     	; 0xf364 <main+0x1c8>
    f352:	8e 34       	cpi	r24, 0x4E	; 78

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
    f354:	19 f4       	brne	.+6      	; 0xf35c <main+0x1c0>
    f356:	e3 e0       	ldi	r30, 0x03	; 3
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
    f358:	f0 e0       	ldi	r31, 0x00	; 0
    f35a:	04 c0       	rjmp	.+8      	; 0xf364 <main+0x1c8>
    f35c:	81 35       	cpi	r24, 0x51	; 81
	}
	else if (Command == 'F')
    f35e:	31 f4       	brne	.+12     	; 0xf36c <main+0x1d0>
    f360:	e2 e0       	ldi	r30, 0x02	; 2
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
    f362:	f0 e0       	ldi	r31, 0x00	; 0
    f364:	90 92 57 00 	sts	0x0057, r9
	}
	else if (Command == 'N')
    f368:	84 91       	lpm	r24, Z
    f36a:	70 c1       	rjmp	.+736    	; 0xf64c <main+0x4b0>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
    f36c:	82 36       	cpi	r24, 0x62	; 98
    f36e:	31 f4       	brne	.+12     	; 0xf37c <main+0x1e0>
    f370:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == 'Q')
    f372:	e7 de       	rcall	.-562    	; 0xf142 <WriteNextResponseByte>
    f374:	81 e0       	ldi	r24, 0x01	; 1
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
    f376:	e5 de       	rcall	.-566    	; 0xf142 <WriteNextResponseByte>
    f378:	80 e0       	ldi	r24, 0x00	; 0
    f37a:	68 c1       	rjmp	.+720    	; 0xf64c <main+0x4b0>
    f37c:	82 34       	cpi	r24, 0x42	; 66
    f37e:	19 f0       	breq	.+6      	; 0xf386 <main+0x1ea>
    f380:	87 36       	cpi	r24, 0x67	; 103
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
    f382:	09 f0       	breq	.+2      	; 0xf386 <main+0x1ea>
    f384:	db c0       	rjmp	.+438    	; 0xf53c <main+0x3a0>
	{
		WriteNextResponseByte('Y');
    f386:	28 87       	std	Y+8, r18	; 0x08
    f388:	c2 de       	rcall	.-636    	; 0xf10e <FetchNextCommandByte>
    f38a:	18 2f       	mov	r17, r24

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
    f38c:	c0 de       	rcall	.-640    	; 0xf10e <FetchNextCommandByte>
    f38e:	a8 2e       	mov	r10, r24
    f390:	be de       	rcall	.-644    	; 0xf10e <FetchNextCommandByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
    f392:	89 87       	std	Y+9, r24	; 0x09
    f394:	85 54       	subi	r24, 0x45	; 69
	}
	else if ((Command == 'B') || (Command == 'g'))
    f396:	28 85       	ldd	r18, Y+8	; 0x08
    f398:	82 30       	cpi	r24, 0x02	; 2
    f39a:	08 f0       	brcs	.+2      	; 0xf39e <main+0x202>
    f39c:	56 c1       	rjmp	.+684    	; 0xf64a <main+0x4ae>
    f39e:	1a 83       	std	Y+2, r17	; 0x02
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    f3a0:	19 82       	std	Y+1, r1	; 0x01
    f3a2:	bb 24       	eor	r11, r11
    f3a4:	89 81       	ldd	r24, Y+1	; 0x01
    f3a6:	9a 81       	ldd	r25, Y+2	; 0x02
	BlockSize |=  FetchNextCommandByte();
    f3a8:	a8 2a       	or	r10, r24
    f3aa:	b9 2a       	or	r11, r25
    f3ac:	27 36       	cpi	r18, 0x67	; 103

	MemoryType =  FetchNextCommandByte();
    f3ae:	09 f0       	breq	.+2      	; 0xf3b2 <main+0x216>
    f3b0:	45 c0       	rjmp	.+138    	; 0xf43c <main+0x2a0>
    f3b2:	91 e1       	ldi	r25, 0x11	; 17

	if ((MemoryType != 'E') && (MemoryType != 'F'))
    f3b4:	90 93 57 00 	sts	0x0057, r25
    f3b8:	e8 95       	spm
    f3ba:	10 e0       	ldi	r17, 0x00	; 0
    f3bc:	3a c0       	rjmp	.+116    	; 0xf432 <main+0x296>
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
    f3be:	c0 90 96 01 	lds	r12, 0x0196
	BlockSize |=  FetchNextCommandByte();
    f3c2:	d0 90 97 01 	lds	r13, 0x0197
    f3c6:	e0 90 98 01 	lds	r14, 0x0198
    f3ca:	f0 90 99 01 	lds	r15, 0x0199

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
    f3ce:	29 85       	ldd	r18, Y+9	; 0x09
    f3d0:	26 34       	cpi	r18, 0x46	; 70
	{
		/* Re-enable RWW section */
		boot_rww_enable();
    f3d2:	b9 f4       	brne	.+46     	; 0xf402 <main+0x266>
    f3d4:	e1 2f       	mov	r30, r17
    f3d6:	f0 e0       	ldi	r31, 0x00	; 0
    f3d8:	ec 29       	or	r30, r12
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
    f3da:	fd 29       	or	r31, r13
    f3dc:	84 91       	lpm	r24, Z
    f3de:	b1 de       	rcall	.-670    	; 0xf142 <WriteNextResponseByte>
    f3e0:	11 23       	and	r17, r17
    f3e2:	69 f0       	breq	.+26     	; 0xf3fe <main+0x262>
    f3e4:	d7 01       	movw	r26, r14
    f3e6:	c6 01       	movw	r24, r12
    f3e8:	02 96       	adiw	r24, 0x02	; 2
    f3ea:	a1 1d       	adc	r26, r1
    f3ec:	b1 1d       	adc	r27, r1
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    f3ee:	80 93 96 01 	sts	0x0196, r24
    f3f2:	90 93 97 01 	sts	0x0197, r25
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
    f3f6:	a0 93 98 01 	sts	0x0198, r26
    f3fa:	b0 93 99 01 	sts	0x0199, r27
    f3fe:	10 27       	eor	r17, r16
    f400:	15 c0       	rjmp	.+42     	; 0xf42c <main+0x290>
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
    f402:	d7 01       	movw	r26, r14
    f404:	c6 01       	movw	r24, r12
				  CurrAddress += 2;
    f406:	b6 95       	lsr	r27
    f408:	a7 95       	ror	r26
    f40a:	97 95       	ror	r25
    f40c:	87 95       	ror	r24
    f40e:	44 d5       	rcall	.+2696   	; 0xfe98 <__eerd_byte_usb646>
    f410:	98 de       	rcall	.-720    	; 0xf142 <WriteNextResponseByte>
    f412:	d7 01       	movw	r26, r14
    f414:	c6 01       	movw	r24, r12
    f416:	02 96       	adiw	r24, 0x02	; 2
    f418:	a1 1d       	adc	r26, r1
    f41a:	b1 1d       	adc	r27, r1
    f41c:	80 93 96 01 	sts	0x0196, r24

				HighByte = !HighByte;
    f420:	90 93 97 01 	sts	0x0197, r25
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
    f424:	a0 93 98 01 	sts	0x0198, r26
    f428:	b0 93 99 01 	sts	0x0199, r27
    f42c:	08 94       	sec
    f42e:	a1 08       	sbc	r10, r1
    f430:	b1 08       	sbc	r11, r1
    f432:	a1 14       	cp	r10, r1
    f434:	b1 04       	cpc	r11, r1
    f436:	09 f0       	breq	.+2      	; 0xf43a <main+0x29e>

				/* Increment the address counter after use */
				CurrAddress += 2;
    f438:	c2 cf       	rjmp	.-124    	; 0xf3be <main+0x222>
    f43a:	09 c1       	rjmp	.+530    	; 0xf64e <main+0x4b2>
    f43c:	40 90 96 01 	lds	r4, 0x0196
    f440:	50 90 97 01 	lds	r5, 0x0197
    f444:	60 90 98 01 	lds	r6, 0x0198
    f448:	70 90 99 01 	lds	r7, 0x0199
    f44c:	39 85       	ldd	r19, Y+9	; 0x09
    f44e:	36 34       	cpi	r19, 0x46	; 70
    f450:	09 f0       	breq	.+2      	; 0xf454 <main+0x2b8>
    f452:	62 c0       	rjmp	.+196    	; 0xf518 <main+0x37c>
    f454:	f2 01       	movw	r30, r4
    f456:	80 92 57 00 	sts	0x0057, r8
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
    f45a:	e8 95       	spm
    f45c:	07 b6       	in	r0, 0x37	; 55
    f45e:	00 fc       	sbrc	r0, 0
    f460:	fd cf       	rjmp	.-6      	; 0xf45c <main+0x2c0>
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
    f462:	5a c0       	rjmp	.+180    	; 0xf518 <main+0x37c>
    f464:	29 85       	ldd	r18, Y+9	; 0x09
    f466:	26 34       	cpi	r18, 0x46	; 70
    f468:	81 f5       	brne	.+96     	; 0xf4ca <main+0x32e>
    f46a:	3f 81       	ldd	r19, Y+7	; 0x07
    f46c:	33 23       	and	r19, r19
    f46e:	39 f1       	breq	.+78     	; 0xf4be <main+0x322>
    f470:	c0 90 96 01 	lds	r12, 0x0196

		if (MemoryType == 'F')
    f474:	d0 90 97 01 	lds	r13, 0x0197
    f478:	4a de       	rcall	.-876    	; 0xf10e <FetchNextCommandByte>
		{
			boot_page_erase(PageStartAddress);
    f47a:	8e 83       	std	Y+6, r24	; 0x06
    f47c:	1d 82       	std	Y+5, r1	; 0x05
    f47e:	81 2f       	mov	r24, r17
    f480:	90 e0       	ldi	r25, 0x00	; 0
			boot_spm_busy_wait();
    f482:	2d 81       	ldd	r18, Y+5	; 0x05
    f484:	3e 81       	ldd	r19, Y+6	; 0x06
    f486:	82 2b       	or	r24, r18
    f488:	93 2b       	or	r25, r19
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
    f48a:	f6 01       	movw	r30, r12
    f48c:	0c 01       	movw	r0, r24
    f48e:	00 93 57 00 	sts	0x0057, r16
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
    f492:	e8 95       	spm
    f494:	11 24       	eor	r1, r1
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
    f496:	80 91 96 01 	lds	r24, 0x0196
    f49a:	90 91 97 01 	lds	r25, 0x0197
    f49e:	a0 91 98 01 	lds	r26, 0x0198
    f4a2:	b0 91 99 01 	lds	r27, 0x0199
    f4a6:	02 96       	adiw	r24, 0x02	; 2
    f4a8:	a1 1d       	adc	r26, r1
    f4aa:	b1 1d       	adc	r27, r1
    f4ac:	80 93 96 01 	sts	0x0196, r24
    f4b0:	90 93 97 01 	sts	0x0197, r25
    f4b4:	a0 93 98 01 	sts	0x0198, r26
    f4b8:	b0 93 99 01 	sts	0x0199, r27
    f4bc:	02 c0       	rjmp	.+4      	; 0xf4c2 <main+0x326>

					/* Increment the address counter after use */
					CurrAddress += 2;
    f4be:	27 de       	rcall	.-946    	; 0xf10e <FetchNextCommandByte>
    f4c0:	18 2f       	mov	r17, r24
    f4c2:	2f 81       	ldd	r18, Y+7	; 0x07
    f4c4:	20 27       	eor	r18, r16
    f4c6:	2f 83       	std	Y+7, r18	; 0x07
    f4c8:	23 c0       	rjmp	.+70     	; 0xf510 <main+0x374>
    f4ca:	c0 90 96 01 	lds	r12, 0x0196
    f4ce:	d0 90 97 01 	lds	r13, 0x0197
    f4d2:	e0 90 98 01 	lds	r14, 0x0198
    f4d6:	f0 90 99 01 	lds	r15, 0x0199
    f4da:	f6 94       	lsr	r15
    f4dc:	e7 94       	ror	r14
    f4de:	d7 94       	ror	r13
    f4e0:	c7 94       	ror	r12
    f4e2:	15 de       	rcall	.-982    	; 0xf10e <FetchNextCommandByte>
    f4e4:	68 2f       	mov	r22, r24
				}
				else
				{
					LowByte = FetchNextCommandByte();
    f4e6:	c6 01       	movw	r24, r12
    f4e8:	df d4       	rcall	.+2494   	; 0xfea8 <__eewr_byte_usb646>
    f4ea:	80 91 96 01 	lds	r24, 0x0196
				}

				HighByte = !HighByte;
    f4ee:	90 91 97 01 	lds	r25, 0x0197
    f4f2:	a0 91 98 01 	lds	r26, 0x0198
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    f4f6:	b0 91 99 01 	lds	r27, 0x0199
    f4fa:	02 96       	adiw	r24, 0x02	; 2
    f4fc:	a1 1d       	adc	r26, r1
    f4fe:	b1 1d       	adc	r27, r1
    f500:	80 93 96 01 	sts	0x0196, r24
    f504:	90 93 97 01 	sts	0x0197, r25
    f508:	a0 93 98 01 	sts	0x0198, r26
    f50c:	b0 93 99 01 	sts	0x0199, r27
    f510:	08 94       	sec
    f512:	a1 08       	sbc	r10, r1
    f514:	b1 08       	sbc	r11, r1
    f516:	02 c0       	rjmp	.+4      	; 0xf51c <main+0x380>

				/* Increment the address counter after use */
				CurrAddress += 2;
    f518:	10 e0       	ldi	r17, 0x00	; 0
    f51a:	1f 82       	std	Y+7, r1	; 0x07
    f51c:	a1 14       	cp	r10, r1
    f51e:	b1 04       	cpc	r11, r1
    f520:	09 f0       	breq	.+2      	; 0xf524 <main+0x388>
    f522:	a0 cf       	rjmp	.-192    	; 0xf464 <main+0x2c8>
    f524:	39 85       	ldd	r19, Y+9	; 0x09
    f526:	36 34       	cpi	r19, 0x46	; 70
    f528:	09 f0       	breq	.+2      	; 0xf52c <main+0x390>
    f52a:	6b c0       	rjmp	.+214    	; 0xf602 <main+0x466>
    f52c:	f2 01       	movw	r30, r4
    f52e:	30 92 57 00 	sts	0x0057, r3
    f532:	e8 95       	spm
    f534:	07 b6       	in	r0, 0x37	; 55
    f536:	00 fc       	sbrc	r0, 0
    f538:	fd cf       	rjmp	.-6      	; 0xf534 <main+0x398>
    f53a:	63 c0       	rjmp	.+198    	; 0xf602 <main+0x466>
    f53c:	83 34       	cpi	r24, 0x43	; 67
    f53e:	69 f4       	brne	.+26     	; 0xf55a <main+0x3be>
    f540:	c0 90 96 01 	lds	r12, 0x0196
    f544:	d0 90 97 01 	lds	r13, 0x0197
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
    f548:	e2 dd       	rcall	.-1084   	; 0xf10e <FetchNextCommandByte>
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
    f54a:	90 e0       	ldi	r25, 0x00	; 0
    f54c:	f6 01       	movw	r30, r12
    f54e:	0c 01       	movw	r0, r24
    f550:	00 93 57 00 	sts	0x0057, r16
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
    f554:	e8 95       	spm
    f556:	11 24       	eor	r1, r1
    f558:	54 c0       	rjmp	.+168    	; 0xf602 <main+0x466>
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
    f55a:	83 36       	cpi	r24, 0x63	; 99
    f55c:	a1 f4       	brne	.+40     	; 0xf586 <main+0x3ea>
    f55e:	c0 90 96 01 	lds	r12, 0x0196

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
    f562:	d0 90 97 01 	lds	r13, 0x0197
    f566:	e0 90 98 01 	lds	r14, 0x0198
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
    f56a:	f0 90 99 01 	lds	r15, 0x0199
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
    f56e:	cf dd       	rcall	.-1122   	; 0xf10e <FetchNextCommandByte>
    f570:	f6 01       	movw	r30, r12
    f572:	e1 60       	ori	r30, 0x01	; 1
    f574:	90 e0       	ldi	r25, 0x00	; 0
    f576:	0c 01       	movw	r0, r24
    f578:	00 93 57 00 	sts	0x0057, r16
    f57c:	e8 95       	spm
    f57e:	11 24       	eor	r1, r1
    f580:	d7 01       	movw	r26, r14
    f582:	c6 01       	movw	r24, r12
    f584:	33 c0       	rjmp	.+102    	; 0xf5ec <main+0x450>
    f586:	8d 36       	cpi	r24, 0x6D	; 109
    f588:	59 f4       	brne	.+22     	; 0xf5a0 <main+0x404>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
    f58a:	e0 91 96 01 	lds	r30, 0x0196
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
    f58e:	f0 91 97 01 	lds	r31, 0x0197
    f592:	30 92 57 00 	sts	0x0057, r3
    f596:	e8 95       	spm
    f598:	07 b6       	in	r0, 0x37	; 55
    f59a:	00 fc       	sbrc	r0, 0
    f59c:	fd cf       	rjmp	.-6      	; 0xf598 <main+0x3fc>
    f59e:	31 c0       	rjmp	.+98     	; 0xf602 <main+0x466>
    f5a0:	82 35       	cpi	r24, 0x52	; 82
    f5a2:	51 f4       	brne	.+20     	; 0xf5b8 <main+0x41c>
    f5a4:	e0 91 96 01 	lds	r30, 0x0196
    f5a8:	f0 91 97 01 	lds	r31, 0x0197
    f5ac:	c5 90       	lpm	r12, Z+
    f5ae:	d4 90       	lpm	r13, Z
    f5b0:	8d 2d       	mov	r24, r13

		/* Increment the address */
		CurrAddress += 2;
    f5b2:	c7 dd       	rcall	.-1138   	; 0xf142 <WriteNextResponseByte>
    f5b4:	8c 2d       	mov	r24, r12
    f5b6:	4a c0       	rjmp	.+148    	; 0xf64c <main+0x4b0>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
    f5b8:	84 34       	cpi	r24, 0x44	; 68
    f5ba:	29 f5       	brne	.+74     	; 0xf606 <main+0x46a>
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
    f5bc:	c0 90 96 01 	lds	r12, 0x0196
    f5c0:	d0 90 97 01 	lds	r13, 0x0197
    f5c4:	e0 90 98 01 	lds	r14, 0x0198
    f5c8:	f0 90 99 01 	lds	r15, 0x0199

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
    f5cc:	f6 94       	lsr	r15
    f5ce:	e7 94       	ror	r14
    f5d0:	d7 94       	ror	r13

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
    f5d2:	c7 94       	ror	r12
    f5d4:	9c dd       	rcall	.-1224   	; 0xf10e <FetchNextCommandByte>
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
    f5d6:	68 2f       	mov	r22, r24
    f5d8:	c6 01       	movw	r24, r12
    f5da:	66 d4       	rcall	.+2252   	; 0xfea8 <__eewr_byte_usb646>
    f5dc:	80 91 96 01 	lds	r24, 0x0196
    f5e0:	90 91 97 01 	lds	r25, 0x0197
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
    f5e4:	a0 91 98 01 	lds	r26, 0x0198
		WriteNextResponseByte(ProgramWord & 0xFF);
    f5e8:	b0 91 99 01 	lds	r27, 0x0199
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
    f5ec:	02 96       	adiw	r24, 0x02	; 2
    f5ee:	a1 1d       	adc	r26, r1
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
    f5f0:	b1 1d       	adc	r27, r1
    f5f2:	80 93 96 01 	sts	0x0196, r24
    f5f6:	90 93 97 01 	sts	0x0197, r25
    f5fa:	a0 93 98 01 	sts	0x0198, r26
    f5fe:	b0 93 99 01 	sts	0x0199, r27
    f602:	8d e0       	ldi	r24, 0x0D	; 13
    f604:	23 c0       	rjmp	.+70     	; 0xf64c <main+0x4b0>
    f606:	84 36       	cpi	r24, 0x64	; 100
    f608:	f1 f4       	brne	.+60     	; 0xf646 <main+0x4aa>
    f60a:	c0 90 96 01 	lds	r12, 0x0196
    f60e:	d0 90 97 01 	lds	r13, 0x0197
    f612:	e0 90 98 01 	lds	r14, 0x0198

		/* Increment the address after use */
		CurrAddress += 2;
    f616:	f0 90 99 01 	lds	r15, 0x0199
    f61a:	d7 01       	movw	r26, r14
    f61c:	c6 01       	movw	r24, r12
    f61e:	b6 95       	lsr	r27
    f620:	a7 95       	ror	r26
    f622:	97 95       	ror	r25
    f624:	87 95       	ror	r24
    f626:	38 d4       	rcall	.+2160   	; 0xfe98 <__eerd_byte_usb646>
    f628:	8c dd       	rcall	.-1256   	; 0xf142 <WriteNextResponseByte>
    f62a:	d7 01       	movw	r26, r14
    f62c:	c6 01       	movw	r24, r12
    f62e:	02 96       	adiw	r24, 0x02	; 2
    f630:	a1 1d       	adc	r26, r1
    f632:	b1 1d       	adc	r27, r1
    f634:	80 93 96 01 	sts	0x0196, r24
    f638:	90 93 97 01 	sts	0x0197, r25

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
    f63c:	a0 93 98 01 	sts	0x0198, r26
	}
	else if (Command == 'd')
    f640:	b0 93 99 01 	sts	0x0199, r27
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
    f644:	04 c0       	rjmp	.+8      	; 0xf64e <main+0x4b2>
    f646:	8b 31       	cpi	r24, 0x1B	; 27
    f648:	11 f0       	breq	.+4      	; 0xf64e <main+0x4b2>
    f64a:	8f e3       	ldi	r24, 0x3F	; 63
    f64c:	7a dd       	rcall	.-1292   	; 0xf142 <WriteNextResponseByte>
    f64e:	80 92 e9 00 	sts	0x00E9, r8
    f652:	90 91 e8 00 	lds	r25, 0x00E8
    f656:	80 91 e8 00 	lds	r24, 0x00E8
    f65a:	8e 77       	andi	r24, 0x7E	; 126
    f65c:	80 93 e8 00 	sts	0x00E8, r24
    f660:	95 ff       	sbrs	r25, 5
    f662:	04 c0       	rjmp	.+8      	; 0xf66c <main+0x4d0>
    f664:	10 c0       	rjmp	.+32     	; 0xf686 <main+0x4ea>

		/* Increment the address after use */
		CurrAddress += 2;
    f666:	8e b3       	in	r24, 0x1e	; 30
    f668:	88 23       	and	r24, r24
    f66a:	c1 f0       	breq	.+48     	; 0xf69c <main+0x500>
    f66c:	80 91 e8 00 	lds	r24, 0x00E8
    f670:	80 ff       	sbrs	r24, 0
    f672:	f9 cf       	rjmp	.-14     	; 0xf666 <main+0x4ca>
    f674:	80 91 e8 00 	lds	r24, 0x00E8
    f678:	8e 77       	andi	r24, 0x7E	; 126
    f67a:	80 93 e8 00 	sts	0x00E8, r24
    f67e:	03 c0       	rjmp	.+6      	; 0xf686 <main+0x4ea>
    f680:	8e b3       	in	r24, 0x1e	; 30
	}
	#endif
	else if (Command != 27)
    f682:	88 23       	and	r24, r24
    f684:	59 f0       	breq	.+22     	; 0xf69c <main+0x500>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
    f686:	80 91 e8 00 	lds	r24, 0x00E8
    f68a:	80 ff       	sbrs	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f68c:	f9 cf       	rjmp	.-14     	; 0xf680 <main+0x4e4>
    f68e:	20 92 e9 00 	sts	0x00E9, r2
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
    f692:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    f696:	8b 77       	andi	r24, 0x7B	; 123
    f698:	80 93 e8 00 	sts	0x00E8, r24
    f69c:	e2 d3       	rcall	.+1988   	; 0xfe62 <USB_USBTask>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
    f69e:	68 dd       	rcall	.-1328   	; 0xf170 <BL_Pulse>
    f6a0:	80 91 94 01 	lds	r24, 0x0194
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    f6a4:	90 91 95 01 	lds	r25, 0x0195
    f6a8:	00 97       	sbiw	r24, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    f6aa:	09 f4       	brne	.+2      	; 0xf6ae <main+0x512>
    f6ac:	bc cd       	rjmp	.-1160   	; 0xf226 <main+0x8a>
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
    f6ae:	28 e0       	ldi	r18, 0x08	; 8
    f6b0:	88 e1       	ldi	r24, 0x18	; 24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    f6b2:	90 e0       	ldi	r25, 0x00	; 0
    f6b4:	0f b6       	in	r0, 0x3f	; 63
    f6b6:	f8 94       	cli
    f6b8:	a8 95       	wdr
    f6ba:	80 93 60 00 	sts	0x0060, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    f6be:	0f be       	out	0x3f, r0	; 63
    f6c0:	20 93 60 00 	sts	0x0060, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    f6c4:	80 91 e0 00 	lds	r24, 0x00E0

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
    f6c8:	81 60       	ori	r24, 0x01	; 1
    f6ca:	80 93 e0 00 	sts	0x00E0, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f6ce:	f8 94       	cli
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    f6d0:	ff cf       	rjmp	.-2      	; 0xf6d0 <main+0x534>
    f6d2:	88 98       	cbi	0x11, 0	; 17
    f6d4:	e0 e0       	ldi	r30, 0x00	; 0
    f6d6:	f0 e0       	ldi	r31, 0x00	; 0
    f6d8:	09 95       	icall
		sei();
		
		while (finished == 0)
		{
			CDC_Task();
			USB_USBTask();
    f6da:	80 e0       	ldi	r24, 0x00	; 0
    f6dc:	90 e0       	ldi	r25, 0x00	; 0
			BL_Pulse();
    f6de:	29 96       	adiw	r28, 0x09	; 9
    f6e0:	0f b6       	in	r0, 0x3f	; 63
		USB_Init();

		/* Enable global interrupts so that the USB stack can function */
		sei();
		
		while (finished == 0)
    f6e2:	f8 94       	cli
    f6e4:	de bf       	out	0x3e, r29	; 62
    f6e6:	0f be       	out	0x3f, r0	; 63
    f6e8:	cd bf       	out	0x3d, r28	; 61
    f6ea:	df 91       	pop	r29
    f6ec:	cf 91       	pop	r28
    f6ee:	1f 91       	pop	r17
		{
			CDC_Task();
			USB_USBTask();
			BL_Pulse();
		}
		wdt_enable(WDTO_15MS);
    f6f0:	0f 91       	pop	r16
    f6f2:	ff 90       	pop	r15
    f6f4:	ef 90       	pop	r14
    f6f6:	df 90       	pop	r13
    f6f8:	cf 90       	pop	r12
    f6fa:	bf 90       	pop	r11
    f6fc:	af 90       	pop	r10
    f6fe:	9f 90       	pop	r9
    f700:	8f 90       	pop	r8
    f702:	7f 90       	pop	r7
    f704:	6f 90       	pop	r6
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
    f706:	5f 90       	pop	r5
    f708:	4f 90       	pop	r4
    f70a:	3f 90       	pop	r3
    f70c:	2f 90       	pop	r2
    f70e:	08 95       	ret

0000f710 <EVENT_USB_Device_ConfigurationChanged>:
		/* Disconnect from the host - USB interface will be reset later along with the AVR */
		USB_Detach();
	
		cli();	
    f710:	82 e0       	ldi	r24, 0x02	; 2
    f712:	61 ec       	ldi	r22, 0xC1	; 193
		
		while(1);  //wait for watchdog to byte. 
	}
	
	/*RESET I/O*/
	PORTF &= ~_BV(PF0);
    f714:	42 e0       	ldi	r20, 0x02	; 2

	/*jump the ship!*/
	((void (*)(void))0x0000)();
    f716:	be d0       	rcall	.+380    	; 0xf894 <Endpoint_ConfigureEndpoint_Prv>
    f718:	83 e0       	ldi	r24, 0x03	; 3
    f71a:	61 e8       	ldi	r22, 0x81	; 129
}
    f71c:	42 e1       	ldi	r20, 0x12	; 18
    f71e:	ba d0       	rcall	.+372    	; 0xf894 <Endpoint_ConfigureEndpoint_Prv>
    f720:	84 e0       	ldi	r24, 0x04	; 4
    f722:	60 e8       	ldi	r22, 0x80	; 128
    f724:	42 e1       	ldi	r20, 0x12	; 18
    f726:	b6 c0       	rjmp	.+364    	; 0xf894 <Endpoint_ConfigureEndpoint_Prv>

0000f728 <EVENT_USB_Device_ControlRequest>:
    f728:	80 91 9e 01 	lds	r24, 0x019E
    f72c:	98 2f       	mov	r25, r24
    f72e:	9f 77       	andi	r25, 0x7F	; 127
    f730:	91 32       	cpi	r25, 0x21	; 33
    f732:	49 f5       	brne	.+82     	; 0xf786 <EVENT_USB_Device_ControlRequest+0x5e>
    f734:	90 91 9f 01 	lds	r25, 0x019F
    f738:	90 32       	cpi	r25, 0x20	; 32
    f73a:	a1 f0       	breq	.+40     	; 0xf764 <EVENT_USB_Device_ControlRequest+0x3c>
    f73c:	91 32       	cpi	r25, 0x21	; 33
    f73e:	19 f5       	brne	.+70     	; 0xf786 <EVENT_USB_Device_ControlRequest+0x5e>
    f740:	81 3a       	cpi	r24, 0xA1	; 161
    f742:	09 f5       	brne	.+66     	; 0xf786 <EVENT_USB_Device_ControlRequest+0x5e>
    f744:	80 91 e8 00 	lds	r24, 0x00E8
    f748:	87 7f       	andi	r24, 0xF7	; 247
    f74a:	80 93 e8 00 	sts	0x00E8, r24
    f74e:	88 e0       	ldi	r24, 0x08	; 8
    f750:	91 e0       	ldi	r25, 0x01	; 1
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    f752:	67 e0       	ldi	r22, 0x07	; 7
    f754:	70 e0       	ldi	r23, 0x00	; 0
    f756:	d8 d1       	rcall	.+944    	; 0xfb08 <Endpoint_Write_Control_Stream_LE>
    f758:	80 91 e8 00 	lds	r24, 0x00E8
    f75c:	8b 77       	andi	r24, 0x7B	; 123
    f75e:	80 93 e8 00 	sts	0x00E8, r24
    f762:	08 95       	ret
    f764:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
    f766:	79 f4       	brne	.+30     	; 0xf786 <EVENT_USB_Device_ControlRequest+0x5e>
    f768:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    f76c:	87 7f       	andi	r24, 0xF7	; 247
    f76e:	80 93 e8 00 	sts	0x00E8, r24
    f772:	88 e0       	ldi	r24, 0x08	; 8
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
    f774:	91 e0       	ldi	r25, 0x01	; 1
    f776:	67 e0       	ldi	r22, 0x07	; 7
    f778:	70 e0       	ldi	r23, 0x00	; 0
    f77a:	1f d2       	rcall	.+1086   	; 0xfbba <Endpoint_Read_Control_Stream_LE>
    f77c:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    f780:	8e 77       	andi	r24, 0x7E	; 126
    f782:	80 93 e8 00 	sts	0x00E8, r24
    f786:	08 95       	ret

0000f788 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
    f788:	92 30       	cpi	r25, 0x02	; 2
    f78a:	29 f0       	breq	.+10     	; 0xf796 <CALLBACK_USB_GetDescriptor+0xe>
    f78c:	93 30       	cpi	r25, 0x03	; 3
    f78e:	41 f0       	breq	.+16     	; 0xf7a0 <CALLBACK_USB_GetDescriptor+0x18>
    f790:	91 30       	cpi	r25, 0x01	; 1
    f792:	61 f4       	brne	.+24     	; 0xf7ac <CALLBACK_USB_GetDescriptor+0x24>
    f794:	10 c0       	rjmp	.+32     	; 0xf7b6 <CALLBACK_USB_GetDescriptor+0x2e>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
    f796:	8e e3       	ldi	r24, 0x3E	; 62
    f798:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
    f79a:	23 e4       	ldi	r18, 0x43	; 67
    f79c:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
    f79e:	1e c0       	rjmp	.+60     	; 0xf7dc <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_String:
			if (!(DescriptorNumber))
    f7a0:	88 23       	and	r24, r24
    f7a2:	71 f0       	breq	.+28     	; 0xf7c0 <CALLBACK_USB_GetDescriptor+0x38>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
    f7a4:	81 30       	cpi	r24, 0x01	; 1
    f7a6:	89 f0       	breq	.+34     	; 0xf7ca <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
    f7a8:	82 30       	cpi	r24, 0x02	; 2
    f7aa:	a1 f0       	breq	.+40     	; 0xf7d4 <CALLBACK_USB_GetDescriptor+0x4c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
    f7ac:	80 e0       	ldi	r24, 0x00	; 0
    f7ae:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
    f7b0:	20 e0       	ldi	r18, 0x00	; 0
    f7b2:	30 e0       	ldi	r19, 0x00	; 0
    f7b4:	13 c0       	rjmp	.+38     	; 0xf7dc <CALLBACK_USB_GetDescriptor+0x54>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
    f7b6:	82 e1       	ldi	r24, 0x12	; 18
    f7b8:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
    f7ba:	21 e8       	ldi	r18, 0x81	; 129
    f7bc:	31 e0       	ldi	r19, 0x01	; 1
    f7be:	0e c0       	rjmp	.+28     	; 0xf7dc <CALLBACK_USB_GetDescriptor+0x54>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
    f7c0:	84 e0       	ldi	r24, 0x04	; 4
    f7c2:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
    f7c4:	2f e3       	ldi	r18, 0x3F	; 63
    f7c6:	31 e0       	ldi	r19, 0x01	; 1
    f7c8:	09 c0       	rjmp	.+18     	; 0xf7dc <CALLBACK_USB_GetDescriptor+0x54>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
    f7ca:	8e e2       	ldi	r24, 0x2E	; 46
    f7cc:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
    f7ce:	2f e0       	ldi	r18, 0x0F	; 15
    f7d0:	31 e0       	ldi	r19, 0x01	; 1
    f7d2:	04 c0       	rjmp	.+8      	; 0xf7dc <CALLBACK_USB_GetDescriptor+0x54>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
    f7d4:	8c e3       	ldi	r24, 0x3C	; 60
    f7d6:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
    f7d8:	28 e9       	ldi	r18, 0x98	; 152
    f7da:	30 ef       	ldi	r19, 0xF0	; 240
			}

			break;
	}

	*DescriptorAddress = Address;
    f7dc:	fa 01       	movw	r30, r20
    f7de:	31 83       	std	Z+1, r19	; 0x01
    f7e0:	20 83       	st	Z, r18
	return Size;
}
    f7e2:	08 95       	ret

0000f7e4 <BootloaderAPI_ErasePage>:
 */

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
    f7e4:	dc 01       	movw	r26, r24
    f7e6:	cb 01       	movw	r24, r22
	boot_page_erase_safe(Address);
    f7e8:	07 b6       	in	r0, 0x37	; 55
    f7ea:	00 fc       	sbrc	r0, 0
    f7ec:	fd cf       	rjmp	.-6      	; 0xf7e8 <BootloaderAPI_ErasePage+0x4>
    f7ee:	f9 99       	sbic	0x1f, 1	; 31
    f7f0:	fe cf       	rjmp	.-4      	; 0xf7ee <BootloaderAPI_ErasePage+0xa>
    f7f2:	23 e0       	ldi	r18, 0x03	; 3
    f7f4:	fc 01       	movw	r30, r24
    f7f6:	20 93 57 00 	sts	0x0057, r18
    f7fa:	e8 95       	spm
	boot_spm_busy_wait();
    f7fc:	07 b6       	in	r0, 0x37	; 55
    f7fe:	00 fc       	sbrc	r0, 0
    f800:	fd cf       	rjmp	.-6      	; 0xf7fc <BootloaderAPI_ErasePage+0x18>
	boot_rww_enable();
    f802:	81 e1       	ldi	r24, 0x11	; 17
    f804:	80 93 57 00 	sts	0x0057, r24
    f808:	e8 95       	spm
}
    f80a:	08 95       	ret

0000f80c <BootloaderAPI_WritePage>:

void BootloaderAPI_WritePage(const uint32_t Address)
{
    f80c:	dc 01       	movw	r26, r24
    f80e:	cb 01       	movw	r24, r22
	boot_page_write_safe(Address);
    f810:	07 b6       	in	r0, 0x37	; 55
    f812:	00 fc       	sbrc	r0, 0
    f814:	fd cf       	rjmp	.-6      	; 0xf810 <BootloaderAPI_WritePage+0x4>
    f816:	f9 99       	sbic	0x1f, 1	; 31
    f818:	fe cf       	rjmp	.-4      	; 0xf816 <BootloaderAPI_WritePage+0xa>
    f81a:	25 e0       	ldi	r18, 0x05	; 5
    f81c:	fc 01       	movw	r30, r24
    f81e:	20 93 57 00 	sts	0x0057, r18
    f822:	e8 95       	spm
	boot_spm_busy_wait();
    f824:	07 b6       	in	r0, 0x37	; 55
    f826:	00 fc       	sbrc	r0, 0
    f828:	fd cf       	rjmp	.-6      	; 0xf824 <BootloaderAPI_WritePage+0x18>
	boot_rww_enable();
    f82a:	81 e1       	ldi	r24, 0x11	; 17
    f82c:	80 93 57 00 	sts	0x0057, r24
    f830:	e8 95       	spm
}
    f832:	08 95       	ret

0000f834 <BootloaderAPI_FillWord>:

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
    f834:	dc 01       	movw	r26, r24
    f836:	cb 01       	movw	r24, r22
	boot_page_fill_safe(Address, Word);
    f838:	07 b6       	in	r0, 0x37	; 55
    f83a:	00 fc       	sbrc	r0, 0
    f83c:	fd cf       	rjmp	.-6      	; 0xf838 <BootloaderAPI_FillWord+0x4>
    f83e:	f9 99       	sbic	0x1f, 1	; 31
    f840:	fe cf       	rjmp	.-4      	; 0xf83e <BootloaderAPI_FillWord+0xa>
    f842:	21 e0       	ldi	r18, 0x01	; 1
    f844:	fc 01       	movw	r30, r24
    f846:	0a 01       	movw	r0, r20
    f848:	20 93 57 00 	sts	0x0057, r18
    f84c:	e8 95       	spm
    f84e:	11 24       	eor	r1, r1
}
    f850:	08 95       	ret

0000f852 <BootloaderAPI_ReadSignature>:

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
    f852:	21 e2       	ldi	r18, 0x21	; 33
    f854:	fc 01       	movw	r30, r24
    f856:	20 93 57 00 	sts	0x0057, r18
    f85a:	84 91       	lpm	r24, Z
}
    f85c:	08 95       	ret

0000f85e <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
    f85e:	29 e0       	ldi	r18, 0x09	; 9
    f860:	fc 01       	movw	r30, r24
    f862:	20 93 57 00 	sts	0x0057, r18
    f866:	84 91       	lpm	r24, Z
}
    f868:	08 95       	ret

0000f86a <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
    f86a:	e1 e0       	ldi	r30, 0x01	; 1
    f86c:	f0 e0       	ldi	r31, 0x00	; 0
    f86e:	89 e0       	ldi	r24, 0x09	; 9
    f870:	80 93 57 00 	sts	0x0057, r24
    f874:	84 91       	lpm	r24, Z
}
    f876:	08 95       	ret

0000f878 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
    f878:	07 b6       	in	r0, 0x37	; 55
    f87a:	00 fc       	sbrc	r0, 0
    f87c:	fd cf       	rjmp	.-6      	; 0xf878 <BootloaderAPI_WriteLock>
    f87e:	f9 99       	sbic	0x1f, 1	; 31
    f880:	fe cf       	rjmp	.-4      	; 0xf87e <BootloaderAPI_WriteLock+0x6>
    f882:	80 95       	com	r24
    f884:	99 e0       	ldi	r25, 0x09	; 9
    f886:	e1 e0       	ldi	r30, 0x01	; 1
    f888:	f0 e0       	ldi	r31, 0x00	; 0
    f88a:	08 2e       	mov	r0, r24
    f88c:	90 93 57 00 	sts	0x0057, r25
    f890:	e8 95       	spm
}
    f892:	08 95       	ret

0000f894 <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    f894:	8f 70       	andi	r24, 0x0F	; 15
    f896:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
    f89a:	eb ee       	ldi	r30, 0xEB	; 235
    f89c:	f0 e0       	ldi	r31, 0x00	; 0
    f89e:	80 81       	ld	r24, Z
    f8a0:	81 60       	ori	r24, 0x01	; 1
    f8a2:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
    f8a4:	ed ee       	ldi	r30, 0xED	; 237
    f8a6:	f0 e0       	ldi	r31, 0x00	; 0
    f8a8:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
    f8aa:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    f8ae:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
    f8b0:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
    f8b4:	88 1f       	adc	r24, r24
    f8b6:	88 27       	eor	r24, r24
    f8b8:	88 1f       	adc	r24, r24
    f8ba:	08 95       	ret

0000f8bc <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    f8bc:	80 91 9e 01 	lds	r24, 0x019E
    f8c0:	87 ff       	sbrs	r24, 7
    f8c2:	11 c0       	rjmp	.+34     	; 0xf8e6 <Endpoint_ClearStatusStage+0x2a>
    f8c4:	03 c0       	rjmp	.+6      	; 0xf8cc <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    f8c6:	8e b3       	in	r24, 0x1e	; 30
    f8c8:	88 23       	and	r24, r24
    f8ca:	b1 f0       	breq	.+44     	; 0xf8f8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    f8cc:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    f8d0:	82 ff       	sbrs	r24, 2
    f8d2:	f9 cf       	rjmp	.-14     	; 0xf8c6 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    f8d4:	80 91 e8 00 	lds	r24, 0x00E8
    f8d8:	8b 77       	andi	r24, 0x7B	; 123
    f8da:	80 93 e8 00 	sts	0x00E8, r24
    f8de:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    f8e0:	8e b3       	in	r24, 0x1e	; 30
    f8e2:	88 23       	and	r24, r24
    f8e4:	49 f0       	breq	.+18     	; 0xf8f8 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    f8e6:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    f8ea:	80 ff       	sbrs	r24, 0
    f8ec:	f9 cf       	rjmp	.-14     	; 0xf8e0 <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    f8ee:	80 91 e8 00 	lds	r24, 0x00E8
    f8f2:	8e 77       	andi	r24, 0x7E	; 126
    f8f4:	80 93 e8 00 	sts	0x00E8, r24
    f8f8:	08 95       	ret

0000f8fa <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
    f8fa:	0f 93       	push	r16
    f8fc:	1f 93       	push	r17
    f8fe:	cf 93       	push	r28
    f900:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
    f902:	44 d0       	rcall	.+136    	; 0xf98c <USB_INT_DisableAllInterrupts>
    f904:	4b d0       	rcall	.+150    	; 0xf99c <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
    f906:	c8 ed       	ldi	r28, 0xD8	; 216
    f908:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
    f90a:	88 81       	ld	r24, Y
    f90c:	8f 77       	andi	r24, 0x7F	; 127
    f90e:	88 83       	st	Y, r24
    f910:	88 81       	ld	r24, Y
    f912:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
    f914:	88 83       	st	Y, r24
    f916:	88 81       	ld	r24, Y
    f918:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    f91a:	88 83       	st	Y, r24
    f91c:	e7 ed       	ldi	r30, 0xD7	; 215
    f91e:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
    f920:	80 81       	ld	r24, Z
    f922:	80 68       	ori	r24, 0x80	; 128
    f924:	80 83       	st	Z, r24
    f926:	19 bc       	out	0x29, r1	; 41
    f928:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    f92a:	10 92 9c 01 	sts	0x019C, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
    f92e:	00 ee       	ldi	r16, 0xE0	; 224
    f930:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
    f932:	f8 01       	movw	r30, r16
    f934:	80 81       	ld	r24, Z
    f936:	8b 7f       	andi	r24, 0xFB	; 251
    f938:	80 83       	st	Z, r24
    f93a:	88 81       	ld	r24, Y
    f93c:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
    f93e:	88 83       	st	Y, r24
    f940:	80 e0       	ldi	r24, 0x00	; 0
    f942:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    f944:	42 e0       	ldi	r20, 0x02	; 2
    f946:	a6 df       	rcall	.-180    	; 0xf894 <Endpoint_ConfigureEndpoint_Prv>
    f948:	e1 ee       	ldi	r30, 0xE1	; 225
    f94a:	f0 e0       	ldi	r31, 0x00	; 0
    f94c:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    f94e:	8e 7f       	andi	r24, 0xFE	; 254
    f950:	80 83       	st	Z, r24
    f952:	e2 ee       	ldi	r30, 0xE2	; 226
    f954:	f0 e0       	ldi	r31, 0x00	; 0
    f956:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    f958:	81 60       	ori	r24, 0x01	; 1
    f95a:	80 83       	st	Z, r24
    f95c:	80 81       	ld	r24, Z
    f95e:	88 60       	ori	r24, 0x08	; 8
    f960:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
    f962:	f8 01       	movw	r30, r16
    f964:	80 81       	ld	r24, Z
    f966:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
    f968:	80 83       	st	Z, r24
    f96a:	88 81       	ld	r24, Y
    f96c:	80 61       	ori	r24, 0x10	; 16
    f96e:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
    f970:	df 91       	pop	r29
    f972:	cf 91       	pop	r28
    f974:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
    f976:	0f 91       	pop	r16
    f978:	08 95       	ret

0000f97a <USB_Init>:
    f97a:	e7 ed       	ldi	r30, 0xD7	; 215
    f97c:	f0 e0       	ldi	r31, 0x00	; 0
    f97e:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
    f980:	81 60       	ori	r24, 0x01	; 1
    f982:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
    f984:	81 e0       	ldi	r24, 0x01	; 1
    f986:	80 93 9d 01 	sts	0x019D, r24

	USB_ResetInterface();
    f98a:	b7 cf       	rjmp	.-146    	; 0xf8fa <USB_ResetInterface>

0000f98c <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
    f98c:	e8 ed       	ldi	r30, 0xD8	; 216
    f98e:	f0 e0       	ldi	r31, 0x00	; 0
    f990:	80 81       	ld	r24, Z
    f992:	8c 7f       	andi	r24, 0xFC	; 252
    f994:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    f996:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    f99a:	08 95       	ret

0000f99c <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
    f99c:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
    f9a0:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    f9a4:	08 95       	ret

0000f9a6 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    f9a6:	1f 92       	push	r1
    f9a8:	0f 92       	push	r0
    f9aa:	0f b6       	in	r0, 0x3f	; 63
    f9ac:	0f 92       	push	r0
    f9ae:	11 24       	eor	r1, r1
    f9b0:	2f 93       	push	r18
    f9b2:	3f 93       	push	r19
    f9b4:	4f 93       	push	r20
    f9b6:	5f 93       	push	r21
    f9b8:	6f 93       	push	r22
    f9ba:	7f 93       	push	r23
    f9bc:	8f 93       	push	r24
    f9be:	9f 93       	push	r25
    f9c0:	af 93       	push	r26
    f9c2:	bf 93       	push	r27
    f9c4:	ef 93       	push	r30
    f9c6:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
    f9c8:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
    f9cc:	80 ff       	sbrs	r24, 0
    f9ce:	1b c0       	rjmp	.+54     	; 0xfa06 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
    f9d0:	80 91 d8 00 	lds	r24, 0x00D8
    f9d4:	80 ff       	sbrs	r24, 0
    f9d6:	17 c0       	rjmp	.+46     	; 0xfa06 <__vector_10+0x60>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
    f9d8:	80 91 da 00 	lds	r24, 0x00DA
    f9dc:	8e 7f       	andi	r24, 0xFE	; 254
    f9de:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
    f9e2:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
    f9e6:	80 ff       	sbrs	r24, 0
    f9e8:	0b c0       	rjmp	.+22     	; 0xfa00 <__vector_10+0x5a>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    f9ea:	88 e1       	ldi	r24, 0x18	; 24
    f9ec:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    f9ee:	8a e1       	ldi	r24, 0x1A	; 26
    f9f0:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
    f9f2:	09 b4       	in	r0, 0x29	; 41
    f9f4:	00 fe       	sbrs	r0, 0
    f9f6:	fd cf       	rjmp	.-6      	; 0xf9f2 <__vector_10+0x4c>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
    f9f8:	81 e0       	ldi	r24, 0x01	; 1
    f9fa:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
    f9fc:	31 d2       	rcall	.+1122   	; 0xfe60 <USB_Event_Stub>
    f9fe:	03 c0       	rjmp	.+6      	; 0xfa06 <__vector_10+0x60>
    fa00:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    fa02:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
    fa04:	2d d2       	rcall	.+1114   	; 0xfe60 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
    fa06:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
    fa0a:	80 ff       	sbrs	r24, 0
    fa0c:	17 c0       	rjmp	.+46     	; 0xfa3c <__vector_10+0x96>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
    fa0e:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
    fa12:	80 ff       	sbrs	r24, 0
    fa14:	13 c0       	rjmp	.+38     	; 0xfa3c <__vector_10+0x96>
    fa16:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    fa1a:	8e 7f       	andi	r24, 0xFE	; 254
    fa1c:	80 93 e2 00 	sts	0x00E2, r24
    fa20:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    fa24:	80 61       	ori	r24, 0x10	; 16
    fa26:	80 93 e2 00 	sts	0x00E2, r24
    fa2a:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
    fa2e:	80 62       	ori	r24, 0x20	; 32
    fa30:	80 93 d8 00 	sts	0x00D8, r24
    fa34:	19 bc       	out	0x29, r1	; 41
    fa36:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
    fa38:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    fa3a:	12 d2       	rcall	.+1060   	; 0xfe60 <USB_Event_Stub>
    fa3c:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
    fa40:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
    fa42:	2c c0       	rjmp	.+88     	; 0xfa9c <__vector_10+0xf6>
    fa44:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
    fa48:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
    fa4a:	28 c0       	rjmp	.+80     	; 0xfa9c <__vector_10+0xf6>
    fa4c:	88 e1       	ldi	r24, 0x18	; 24
    fa4e:	89 bd       	out	0x29, r24	; 41
    fa50:	8a e1       	ldi	r24, 0x1A	; 26

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
    fa52:	89 bd       	out	0x29, r24	; 41
    fa54:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
    fa56:	00 fe       	sbrs	r0, 0
    fa58:	fd cf       	rjmp	.-6      	; 0xfa54 <__vector_10+0xae>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
    fa5a:	80 91 d8 00 	lds	r24, 0x00D8
    fa5e:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
    fa60:	80 93 d8 00 	sts	0x00D8, r24
    fa64:	80 91 e1 00 	lds	r24, 0x00E1
    fa68:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
    fa6a:	80 93 e1 00 	sts	0x00E1, r24
    fa6e:	80 91 e2 00 	lds	r24, 0x00E2
    fa72:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
    fa74:	80 93 e2 00 	sts	0x00E2, r24
    fa78:	80 91 e2 00 	lds	r24, 0x00E2
    fa7c:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
    fa7e:	80 93 e2 00 	sts	0x00E2, r24
    fa82:	80 91 9c 01 	lds	r24, 0x019C
    fa86:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
    fa88:	21 f4       	brne	.+8      	; 0xfa92 <__vector_10+0xec>
    fa8a:	80 91 e3 00 	lds	r24, 0x00E3
    fa8e:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    fa90:	02 c0       	rjmp	.+4      	; 0xfa96 <__vector_10+0xf0>
    fa92:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    fa94:	01 c0       	rjmp	.+2      	; 0xfa98 <__vector_10+0xf2>
    fa96:	81 e0       	ldi	r24, 0x01	; 1
    fa98:	8e bb       	out	0x1e, r24	; 30
    fa9a:	e2 d1       	rcall	.+964    	; 0xfe60 <USB_Event_Stub>
    fa9c:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
    faa0:	83 ff       	sbrs	r24, 3
    faa2:	21 c0       	rjmp	.+66     	; 0xfae6 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
    faa4:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    faa8:	83 ff       	sbrs	r24, 3
    faaa:	1d c0       	rjmp	.+58     	; 0xfae6 <__vector_10+0x140>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
    faac:	80 91 e1 00 	lds	r24, 0x00E1
    fab0:	87 7f       	andi	r24, 0xF7	; 247
    fab2:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
    fab6:	82 e0       	ldi	r24, 0x02	; 2
    fab8:	8e bb       	out	0x1e, r24	; 30
    faba:	10 92 9c 01 	sts	0x019C, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
    fabe:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
    fac2:	8e 7f       	andi	r24, 0xFE	; 254
    fac4:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
    fac8:	80 91 e2 00 	lds	r24, 0x00E2
    facc:	8e 7f       	andi	r24, 0xFE	; 254
    face:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
    fad2:	80 91 e2 00 	lds	r24, 0x00E2
    fad6:	80 61       	ori	r24, 0x10	; 16
    fad8:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
    fadc:	80 e0       	ldi	r24, 0x00	; 0
    fade:	60 e0       	ldi	r22, 0x00	; 0
    fae0:	42 e0       	ldi	r20, 0x02	; 2
    fae2:	d8 de       	rcall	.-592    	; 0xf894 <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
    fae4:	bd d1       	rcall	.+890    	; 0xfe60 <USB_Event_Stub>
    fae6:	ff 91       	pop	r31
    fae8:	ef 91       	pop	r30
    faea:	bf 91       	pop	r27
    faec:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
    faee:	9f 91       	pop	r25
    faf0:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
    faf2:	7f 91       	pop	r23
    faf4:	6f 91       	pop	r22
    faf6:	5f 91       	pop	r21
    faf8:	4f 91       	pop	r20
    fafa:	3f 91       	pop	r19
    fafc:	2f 91       	pop	r18
    fafe:	0f 90       	pop	r0
    fb00:	0f be       	out	0x3f, r0	; 63
    fb02:	0f 90       	pop	r0
    fb04:	1f 90       	pop	r1
    fb06:	18 95       	reti

0000fb08 <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
    fb08:	20 91 a4 01 	lds	r18, 0x01A4
    fb0c:	30 91 a5 01 	lds	r19, 0x01A5
    fb10:	26 17       	cp	r18, r22
    fb12:	37 07       	cpc	r19, r23
    fb14:	20 f4       	brcc	.+8      	; 0xfb1e <Endpoint_Write_Control_Stream_LE+0x16>
    fb16:	b9 01       	movw	r22, r18
    fb18:	fc 01       	movw	r30, r24
    fb1a:	20 e0       	ldi	r18, 0x00	; 0
    fb1c:	35 c0       	rjmp	.+106    	; 0xfb88 <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    fb1e:	61 15       	cp	r22, r1
    fb20:	71 05       	cpc	r23, r1
    fb22:	d1 f7       	brne	.-12     	; 0xfb18 <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    fb24:	20 91 e8 00 	lds	r18, 0x00E8
    fb28:	2e 77       	andi	r18, 0x7E	; 126
    fb2a:	20 93 e8 00 	sts	0x00E8, r18
    fb2e:	f4 cf       	rjmp	.-24     	; 0xfb18 <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    fb30:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    fb32:	88 23       	and	r24, r24
    fb34:	f1 f1       	breq	.+124    	; 0xfbb2 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    fb36:	85 30       	cpi	r24, 0x05	; 5
    fb38:	c1 f1       	breq	.+112    	; 0xfbaa <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    fb3a:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    fb3e:	83 fd       	sbrc	r24, 3
    fb40:	36 c0       	rjmp	.+108    	; 0xfbae <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    fb42:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
    fb46:	82 fd       	sbrc	r24, 2
    fb48:	2a c0       	rjmp	.+84     	; 0xfb9e <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    fb4a:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
    fb4e:	80 ff       	sbrs	r24, 0
    fb50:	1b c0       	rjmp	.+54     	; 0xfb88 <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    fb52:	80 91 f2 00 	lds	r24, 0x00F2
    fb56:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    fb5a:	06 c0       	rjmp	.+12     	; 0xfb68 <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    fb5c:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    fb5e:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
    fb62:	61 50       	subi	r22, 0x01	; 1
    fb64:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    fb66:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
    fb68:	61 15       	cp	r22, r1
    fb6a:	71 05       	cpc	r23, r1
    fb6c:	19 f0       	breq	.+6      	; 0xfb74 <Endpoint_Write_Control_Stream_LE+0x6c>
    fb6e:	88 30       	cpi	r24, 0x08	; 8
    fb70:	91 05       	cpc	r25, r1
    fb72:	a0 f3       	brcs	.-24     	; 0xfb5c <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
    fb74:	21 e0       	ldi	r18, 0x01	; 1
    fb76:	88 30       	cpi	r24, 0x08	; 8
    fb78:	91 05       	cpc	r25, r1
    fb7a:	09 f0       	breq	.+2      	; 0xfb7e <Endpoint_Write_Control_Stream_LE+0x76>
    fb7c:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    fb7e:	80 91 e8 00 	lds	r24, 0x00E8
    fb82:	8e 77       	andi	r24, 0x7E	; 126
    fb84:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    fb88:	61 15       	cp	r22, r1
    fb8a:	71 05       	cpc	r23, r1
    fb8c:	89 f6       	brne	.-94     	; 0xfb30 <Endpoint_Write_Control_Stream_LE+0x28>
    fb8e:	22 23       	and	r18, r18
    fb90:	79 f6       	brne	.-98     	; 0xfb30 <Endpoint_Write_Control_Stream_LE+0x28>
    fb92:	05 c0       	rjmp	.+10     	; 0xfb9e <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    fb94:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    fb96:	88 23       	and	r24, r24
    fb98:	61 f0       	breq	.+24     	; 0xfbb2 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    fb9a:	85 30       	cpi	r24, 0x05	; 5
    fb9c:	61 f0       	breq	.+24     	; 0xfbb6 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    fb9e:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
    fba2:	82 ff       	sbrs	r24, 2
    fba4:	f7 cf       	rjmp	.-18     	; 0xfb94 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    fba6:	80 e0       	ldi	r24, 0x00	; 0
    fba8:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    fbaa:	83 e0       	ldi	r24, 0x03	; 3
    fbac:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    fbae:	81 e0       	ldi	r24, 0x01	; 1
    fbb0:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    fbb2:	82 e0       	ldi	r24, 0x02	; 2
    fbb4:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    fbb6:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    fbb8:	08 95       	ret

0000fbba <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
    fbba:	61 15       	cp	r22, r1
    fbbc:	71 05       	cpc	r23, r1
    fbbe:	29 f4       	brne	.+10     	; 0xfbca <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    fbc0:	20 91 e8 00 	lds	r18, 0x00E8
    fbc4:	2b 77       	andi	r18, 0x7B	; 123
    fbc6:	20 93 e8 00 	sts	0x00E8, r18
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
    fbca:	38 2f       	mov	r19, r24
    fbcc:	29 2f       	mov	r18, r25
    fbce:	25 c0       	rjmp	.+74     	; 0xfc1a <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    fbd0:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    fbd2:	88 23       	and	r24, r24
    fbd4:	a9 f1       	breq	.+106    	; 0xfc40 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    fbd6:	85 30       	cpi	r24, 0x05	; 5
    fbd8:	79 f1       	breq	.+94     	; 0xfc38 <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    fbda:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
    fbde:	83 fd       	sbrc	r24, 3
    fbe0:	2d c0       	rjmp	.+90     	; 0xfc3c <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
    fbe2:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    fbe6:	82 ff       	sbrs	r24, 2
    fbe8:	f3 cf       	rjmp	.-26     	; 0xfbd0 <Endpoint_Read_Control_Stream_LE+0x16>
    fbea:	e3 2f       	mov	r30, r19
    fbec:	f2 2f       	mov	r31, r18
    fbee:	08 c0       	rjmp	.+16     	; 0xfc00 <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    fbf0:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    fbf4:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
    fbf6:	3e 2f       	mov	r19, r30
    fbf8:	2f 2f       	mov	r18, r31
				Length--;
    fbfa:	61 50       	subi	r22, 0x01	; 1
    fbfc:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
    fbfe:	41 f0       	breq	.+16     	; 0xfc10 <Endpoint_Read_Control_Stream_LE+0x56>
    fc00:	3e 2f       	mov	r19, r30
    fc02:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
    fc04:	80 91 f2 00 	lds	r24, 0x00F2
    fc08:	90 91 f3 00 	lds	r25, 0x00F3
    fc0c:	00 97       	sbiw	r24, 0x00	; 0
    fc0e:	81 f7       	brne	.-32     	; 0xfbf0 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    fc10:	80 91 e8 00 	lds	r24, 0x00E8
    fc14:	8b 77       	andi	r24, 0x7B	; 123
    fc16:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
    fc1a:	61 15       	cp	r22, r1
    fc1c:	71 05       	cpc	r23, r1
    fc1e:	c1 f6       	brne	.-80     	; 0xfbd0 <Endpoint_Read_Control_Stream_LE+0x16>
    fc20:	05 c0       	rjmp	.+10     	; 0xfc2c <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
    fc22:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
    fc24:	88 23       	and	r24, r24
    fc26:	61 f0       	breq	.+24     	; 0xfc40 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
    fc28:	85 30       	cpi	r24, 0x05	; 5
    fc2a:	61 f0       	breq	.+24     	; 0xfc44 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    fc2c:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
    fc30:	80 ff       	sbrs	r24, 0
    fc32:	f7 cf       	rjmp	.-18     	; 0xfc22 <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
    fc34:	80 e0       	ldi	r24, 0x00	; 0
    fc36:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    fc38:	83 e0       	ldi	r24, 0x03	; 3
    fc3a:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    fc3c:	81 e0       	ldi	r24, 0x01	; 1
    fc3e:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    fc40:	82 e0       	ldi	r24, 0x02	; 2
    fc42:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
    fc44:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    fc46:	08 95       	ret

0000fc48 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    fc48:	0f 93       	push	r16
    fc4a:	1f 93       	push	r17
    fc4c:	cf 93       	push	r28
    fc4e:	df 93       	push	r29
    fc50:	00 d0       	rcall	.+0      	; 0xfc52 <USB_Device_ProcessControlRequest+0xa>
    fc52:	cd b7       	in	r28, 0x3d	; 61
    fc54:	de b7       	in	r29, 0x3e	; 62
    fc56:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
    fc58:	ee e9       	ldi	r30, 0x9E	; 158
    fc5a:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
    fc5c:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
    fc60:	91 93       	st	Z+, r25
    fc62:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    fc64:	d9 f7       	brne	.-10     	; 0xfc5c <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
    fc66:	60 dd       	rcall	.-1344   	; 0xf728 <EVENT_USB_Device_ControlRequest>
    fc68:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    fc6c:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
    fc6e:	e3 c0       	rjmp	.+454    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fc70:	80 91 9e 01 	lds	r24, 0x019E
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    fc74:	90 91 9f 01 	lds	r25, 0x019F

		switch (USB_ControlRequest.bRequest)
    fc78:	95 30       	cpi	r25, 0x05	; 5
    fc7a:	09 f4       	brne	.+2      	; 0xfc7e <USB_Device_ProcessControlRequest+0x36>
    fc7c:	6c c0       	rjmp	.+216    	; 0xfd56 <USB_Device_ProcessControlRequest+0x10e>
    fc7e:	96 30       	cpi	r25, 0x06	; 6
    fc80:	40 f4       	brcc	.+16     	; 0xfc92 <USB_Device_ProcessControlRequest+0x4a>
    fc82:	91 30       	cpi	r25, 0x01	; 1
    fc84:	69 f1       	breq	.+90     	; 0xfce0 <USB_Device_ProcessControlRequest+0x98>
    fc86:	91 30       	cpi	r25, 0x01	; 1
    fc88:	70 f0       	brcs	.+28     	; 0xfca6 <USB_Device_ProcessControlRequest+0x5e>
    fc8a:	93 30       	cpi	r25, 0x03	; 3
    fc8c:	09 f0       	breq	.+2      	; 0xfc90 <USB_Device_ProcessControlRequest+0x48>
    fc8e:	d3 c0       	rjmp	.+422    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fc90:	27 c0       	rjmp	.+78     	; 0xfce0 <USB_Device_ProcessControlRequest+0x98>
    fc92:	98 30       	cpi	r25, 0x08	; 8
    fc94:	09 f4       	brne	.+2      	; 0xfc98 <USB_Device_ProcessControlRequest+0x50>
    fc96:	a2 c0       	rjmp	.+324    	; 0xfddc <USB_Device_ProcessControlRequest+0x194>
    fc98:	99 30       	cpi	r25, 0x09	; 9
    fc9a:	09 f4       	brne	.+2      	; 0xfc9e <USB_Device_ProcessControlRequest+0x56>
    fc9c:	b1 c0       	rjmp	.+354    	; 0xfe00 <USB_Device_ProcessControlRequest+0x1b8>
    fc9e:	96 30       	cpi	r25, 0x06	; 6
    fca0:	09 f0       	breq	.+2      	; 0xfca4 <USB_Device_ProcessControlRequest+0x5c>
    fca2:	c9 c0       	rjmp	.+402    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fca4:	7b c0       	rjmp	.+246    	; 0xfd9c <USB_Device_ProcessControlRequest+0x154>
    fca6:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    fca8:	81 f0       	breq	.+32     	; 0xfcca <USB_Device_ProcessControlRequest+0x82>
    fcaa:	82 38       	cpi	r24, 0x82	; 130
    fcac:	09 f0       	breq	.+2      	; 0xfcb0 <USB_Device_ProcessControlRequest+0x68>
    fcae:	c3 c0       	rjmp	.+390    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fcb0:	80 91 a2 01 	lds	r24, 0x01A2
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    fcb4:	8f 70       	andi	r24, 0x0F	; 15
    fcb6:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fcba:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
    fcbe:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
    fcc0:	95 ff       	sbrs	r25, 5
    fcc2:	80 e0       	ldi	r24, 0x00	; 0
    fcc4:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fcc8:	01 c0       	rjmp	.+2      	; 0xfccc <USB_Device_ProcessControlRequest+0x84>
    fcca:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    fccc:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fcd0:	97 7f       	andi	r25, 0xF7	; 247
    fcd2:	90 93 e8 00 	sts	0x00E8, r25
    fcd6:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
    fcda:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
    fcde:	89 c0       	rjmp	.+274    	; 0xfdf2 <USB_Device_ProcessControlRequest+0x1aa>
    fce0:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    fce2:	19 f0       	breq	.+6      	; 0xfcea <USB_Device_ProcessControlRequest+0xa2>
    fce4:	82 30       	cpi	r24, 0x02	; 2
    fce6:	09 f0       	breq	.+2      	; 0xfcea <USB_Device_ProcessControlRequest+0xa2>
    fce8:	a6 c0       	rjmp	.+332    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fcea:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    fcec:	82 30       	cpi	r24, 0x02	; 2
    fcee:	09 f0       	breq	.+2      	; 0xfcf2 <USB_Device_ProcessControlRequest+0xaa>
    fcf0:	a2 c0       	rjmp	.+324    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fcf2:	80 91 a0 01 	lds	r24, 0x01A0

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
    fcf6:	88 23       	and	r24, r24
    fcf8:	41 f5       	brne	.+80     	; 0xfd4a <USB_Device_ProcessControlRequest+0x102>
    fcfa:	20 91 a2 01 	lds	r18, 0x01A2
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    fcfe:	2f 70       	andi	r18, 0x0F	; 15
    fd00:	09 f4       	brne	.+2      	; 0xfd04 <USB_Device_ProcessControlRequest+0xbc>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
    fd02:	99 c0       	rjmp	.+306    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fd04:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fd08:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
    fd0c:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
    fd0e:	1d c0       	rjmp	.+58     	; 0xfd4a <USB_Device_ProcessControlRequest+0x102>
    fd10:	80 91 9f 01 	lds	r24, 0x019F
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    fd14:	83 30       	cpi	r24, 0x03	; 3
    fd16:	21 f4       	brne	.+8      	; 0xfd20 <USB_Device_ProcessControlRequest+0xd8>
    fd18:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    fd1c:	80 62       	ori	r24, 0x20	; 32
    fd1e:	13 c0       	rjmp	.+38     	; 0xfd46 <USB_Device_ProcessControlRequest+0xfe>
    fd20:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
    fd24:	80 61       	ori	r24, 0x10	; 16
    fd26:	80 93 eb 00 	sts	0x00EB, r24
    fd2a:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
    fd2c:	90 e0       	ldi	r25, 0x00	; 0
    fd2e:	02 c0       	rjmp	.+4      	; 0xfd34 <USB_Device_ProcessControlRequest+0xec>
    fd30:	88 0f       	add	r24, r24
    fd32:	99 1f       	adc	r25, r25
    fd34:	2a 95       	dec	r18
    fd36:	e2 f7       	brpl	.-8      	; 0xfd30 <USB_Device_ProcessControlRequest+0xe8>
    fd38:	80 93 ea 00 	sts	0x00EA, r24
    fd3c:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
    fd40:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
    fd44:	88 60       	ori	r24, 0x08	; 8
    fd46:	80 93 eb 00 	sts	0x00EB, r24
    fd4a:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fd4e:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fd52:	87 7f       	andi	r24, 0xF7	; 247
    fd54:	51 c0       	rjmp	.+162    	; 0xfdf8 <USB_Device_ProcessControlRequest+0x1b0>
    fd56:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    fd58:	09 f0       	breq	.+2      	; 0xfd5c <USB_Device_ProcessControlRequest+0x114>
    fd5a:	6d c0       	rjmp	.+218    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fd5c:	10 91 a0 01 	lds	r17, 0x01A0
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
    fd60:	1f 77       	andi	r17, 0x7F	; 127
    fd62:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
    fd64:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
    fd66:	80 91 e8 00 	lds	r24, 0x00E8
    fd6a:	87 7f       	andi	r24, 0xF7	; 247
    fd6c:	80 93 e8 00 	sts	0x00E8, r24
    fd70:	a5 dd       	rcall	.-1206   	; 0xf8bc <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
    fd72:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
    fd76:	80 ff       	sbrs	r24, 0
    fd78:	fc cf       	rjmp	.-8      	; 0xfd72 <USB_Device_ProcessControlRequest+0x12a>

	while (!(Endpoint_IsINReady()));
    fd7a:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
    fd7e:	80 78       	andi	r24, 0x80	; 128
    fd80:	81 2b       	or	r24, r17
    fd82:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
    fd86:	80 68       	ori	r24, 0x80	; 128
    fd88:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
    fd8c:	11 23       	and	r17, r17
    fd8e:	11 f0       	breq	.+4      	; 0xfd94 <USB_Device_ProcessControlRequest+0x14c>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
    fd90:	83 e0       	ldi	r24, 0x03	; 3
    fd92:	01 c0       	rjmp	.+2      	; 0xfd96 <USB_Device_ProcessControlRequest+0x14e>
    fd94:	82 e0       	ldi	r24, 0x02	; 2
    fd96:	8e bb       	out	0x1e, r24	; 30
    fd98:	0f bf       	out	0x3f, r16	; 63
    fd9a:	4d c0       	rjmp	.+154    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
    fd9c:	80 58       	subi	r24, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
    fd9e:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    fda0:	08 f0       	brcs	.+2      	; 0xfda4 <USB_Device_ProcessControlRequest+0x15c>
    fda2:	49 c0       	rjmp	.+146    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fda4:	80 91 a0 01 	lds	r24, 0x01A0
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    fda8:	90 91 a1 01 	lds	r25, 0x01A1
    fdac:	60 91 a2 01 	lds	r22, 0x01A2
    fdb0:	ae 01       	movw	r20, r28
    fdb2:	4f 5f       	subi	r20, 0xFF	; 255
    fdb4:	5f 4f       	sbci	r21, 0xFF	; 255
    fdb6:	e8 dc       	rcall	.-1584   	; 0xf788 <CALLBACK_USB_GetDescriptor>
    fdb8:	bc 01       	movw	r22, r24
    fdba:	00 97       	sbiw	r24, 0x00	; 0
    fdbc:	09 f4       	brne	.+2      	; 0xfdc0 <USB_Device_ProcessControlRequest+0x178>
    fdbe:	3b c0       	rjmp	.+118    	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fdc0:	80 91 e8 00 	lds	r24, 0x00E8
    fdc4:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fdc6:	80 93 e8 00 	sts	0x00E8, r24
    fdca:	89 81       	ldd	r24, Y+1	; 0x01
    fdcc:	9a 81       	ldd	r25, Y+2	; 0x02
    fdce:	9c de       	rcall	.-712    	; 0xfb08 <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
    fdd0:	80 91 e8 00 	lds	r24, 0x00E8
    fdd4:	8b 77       	andi	r24, 0x7B	; 123
    fdd6:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
    fdda:	2d c0       	rjmp	.+90     	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fddc:	80 38       	cpi	r24, 0x80	; 128
    fdde:	59 f5       	brne	.+86     	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fde0:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    fde4:	87 7f       	andi	r24, 0xF7	; 247
    fde6:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fdea:	80 91 9c 01 	lds	r24, 0x019C
    fdee:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
    fdf2:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
    fdf6:	8e 77       	andi	r24, 0x7E	; 126
    fdf8:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
    fdfc:	5f dd       	rcall	.-1346   	; 0xf8bc <Endpoint_ClearStatusStage>
    fdfe:	1b c0       	rjmp	.+54     	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fe00:	88 23       	and	r24, r24
    fe02:	c9 f4       	brne	.+50     	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
    fe04:	90 91 a0 01 	lds	r25, 0x01A0
    fe08:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    fe0a:	a8 f4       	brcc	.+42     	; 0xfe36 <USB_Device_ProcessControlRequest+0x1ee>
    fe0c:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    fe10:	87 7f       	andi	r24, 0xF7	; 247
    fe12:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fe16:	90 93 9c 01 	sts	0x019C, r25
    fe1a:	50 dd       	rcall	.-1376   	; 0xf8bc <Endpoint_ClearStatusStage>
    fe1c:	80 91 9c 01 	lds	r24, 0x019C
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    fe20:	88 23       	and	r24, r24
    fe22:	21 f4       	brne	.+8      	; 0xfe2c <USB_Device_ProcessControlRequest+0x1e4>

	Endpoint_ClearStatusStage();
    fe24:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
    fe28:	87 ff       	sbrs	r24, 7
    fe2a:	02 c0       	rjmp	.+4      	; 0xfe30 <USB_Device_ProcessControlRequest+0x1e8>
    fe2c:	84 e0       	ldi	r24, 0x04	; 4
    fe2e:	01 c0       	rjmp	.+2      	; 0xfe32 <USB_Device_ProcessControlRequest+0x1ea>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
    fe30:	81 e0       	ldi	r24, 0x01	; 1
    fe32:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
    fe34:	6d dc       	rcall	.-1830   	; 0xf710 <EVENT_USB_Device_ConfigurationChanged>
    fe36:	80 91 e8 00 	lds	r24, 0x00E8
    fe3a:	83 ff       	sbrs	r24, 3
    fe3c:	0a c0       	rjmp	.+20     	; 0xfe52 <USB_Device_ProcessControlRequest+0x20a>
    fe3e:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
    fe42:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    fe44:	80 93 eb 00 	sts	0x00EB, r24

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
    fe48:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
    fe4c:	87 7f       	andi	r24, 0xF7	; 247
    fe4e:	80 93 e8 00 	sts	0x00E8, r24
    fe52:	0f 90       	pop	r0
    fe54:	0f 90       	pop	r0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
    fe56:	df 91       	pop	r29
    fe58:	cf 91       	pop	r28
    fe5a:	1f 91       	pop	r17
    fe5c:	0f 91       	pop	r16
    fe5e:	08 95       	ret

0000fe60 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
    fe60:	08 95       	ret

0000fe62 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    fe62:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    fe64:	8e b3       	in	r24, 0x1e	; 30
    fe66:	88 23       	and	r24, r24
    fe68:	a9 f0       	breq	.+42     	; 0xfe94 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    fe6a:	80 91 e9 00 	lds	r24, 0x00E9
    fe6e:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
    fe70:	90 91 ec 00 	lds	r25, 0x00EC
    fe74:	90 ff       	sbrs	r25, 0
    fe76:	02 c0       	rjmp	.+4      	; 0xfe7c <USB_USBTask+0x1a>
    fe78:	c0 e8       	ldi	r28, 0x80	; 128
    fe7a:	01 c0       	rjmp	.+2      	; 0xfe7e <USB_USBTask+0x1c>
    fe7c:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
    fe7e:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fe80:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
    fe84:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
    fe88:	83 ff       	sbrs	r24, 3
    fe8a:	01 c0       	rjmp	.+2      	; 0xfe8e <USB_USBTask+0x2c>
		  USB_Device_ProcessControlRequest();
    fe8c:	dd de       	rcall	.-582    	; 0xfc48 <USB_Device_ProcessControlRequest>
    fe8e:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
    fe90:	c0 93 e9 00 	sts	0x00E9, r28
    fe94:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
    fe96:	08 95       	ret

0000fe98 <__eerd_byte_usb646>:
    fe98:	f9 99       	sbic	0x1f, 1	; 31
    fe9a:	fe cf       	rjmp	.-4      	; 0xfe98 <__eerd_byte_usb646>
    fe9c:	92 bd       	out	0x22, r25	; 34
    fe9e:	81 bd       	out	0x21, r24	; 33
    fea0:	f8 9a       	sbi	0x1f, 0	; 31
    fea2:	99 27       	eor	r25, r25
    fea4:	80 b5       	in	r24, 0x20	; 32
    fea6:	08 95       	ret

0000fea8 <__eewr_byte_usb646>:
    fea8:	26 2f       	mov	r18, r22

0000feaa <__eewr_r18_usb646>:
    feaa:	f9 99       	sbic	0x1f, 1	; 31
    feac:	fe cf       	rjmp	.-4      	; 0xfeaa <__eewr_r18_usb646>
    feae:	1f ba       	out	0x1f, r1	; 31
    feb0:	92 bd       	out	0x22, r25	; 34
    feb2:	81 bd       	out	0x21, r24	; 33
    feb4:	20 bd       	out	0x20, r18	; 32
    feb6:	0f b6       	in	r0, 0x3f	; 63
    feb8:	f8 94       	cli
    feba:	fa 9a       	sbi	0x1f, 2	; 31
    febc:	f9 9a       	sbi	0x1f, 1	; 31
    febe:	0f be       	out	0x3f, r0	; 63
    fec0:	01 96       	adiw	r24, 0x01	; 1
    fec2:	08 95       	ret

0000fec4 <_exit>:
    fec4:	f8 94       	cli

0000fec6 <__stop_program>:
    fec6:	ff cf       	rjmp	.-2      	; 0xfec6 <__stop_program>

Disassembly of section .apitable_trampolines:

0000ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
    ffa0:	21 cc       	rjmp	.-1982   	; 0xf7e4 <BootloaderAPI_ErasePage>

0000ffa2 <BootloaderAPI_WritePage_Trampoline>:
    ffa2:	34 cc       	rjmp	.-1944   	; 0xf80c <BootloaderAPI_WritePage>

0000ffa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
    ffa4:	47 cc       	rjmp	.-1906   	; 0xf834 <BootloaderAPI_FillWord>

0000ffa6 <BootloaderAPI_ReadSignature_Trampoline>:
    ffa6:	55 cc       	rjmp	.-1878   	; 0xf852 <BootloaderAPI_ReadSignature>

0000ffa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
    ffa8:	5a cc       	rjmp	.-1868   	; 0xf85e <BootloaderAPI_ReadFuse>

0000ffaa <BootloaderAPI_ReadLock_Trampoline>:
    ffaa:	5f cc       	rjmp	.-1858   	; 0xf86a <BootloaderAPI_ReadLock>

0000ffac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
    ffac:	65 cc       	rjmp	.-1846   	; 0xf878 <BootloaderAPI_WriteLock>

0000ffae <BootloaderAPU_UNUSED1>:
    ffae:	08 95       	ret

0000ffb0 <BootloaderAPU_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
    ffb0:	08 95       	ret

0000ffb2 <BootloaderAPU_UNUSED3>:
    ffb2:	08 95       	ret

0000ffb4 <BootloaderAPU_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
    ffb4:	08 95       	ret

0000ffb6 <BootloaderAPU_UNUSED5>:
    ffb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

0000ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
    ffe0:	df cf       	rjmp	.-66     	; 0xffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
    ffe2:	df cf       	rjmp	.-66     	; 0xffa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
    ffe4:	df cf       	rjmp	.-66     	; 0xffa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
    ffe6:	df cf       	rjmp	.-66     	; 0xffa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
    ffe8:	df cf       	rjmp	.-66     	; 0xffa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
    ffea:	df cf       	rjmp	.-66     	; 0xffaa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
    ffec:	df cf       	rjmp	.-66     	; 0xffac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPU_UNUSED1 ; UNUSED ENTRY 1
    ffee:	df cf       	rjmp	.-66     	; 0xffae <BootloaderAPU_UNUSED1>
	rjmp BootloaderAPU_UNUSED2 ; UNUSED ENTRY 2
    fff0:	df cf       	rjmp	.-66     	; 0xffb0 <BootloaderAPU_UNUSED2>
	rjmp BootloaderAPU_UNUSED3 ; UNUSED ENTRY 3
    fff2:	df cf       	rjmp	.-66     	; 0xffb2 <BootloaderAPU_UNUSED3>
	rjmp BootloaderAPU_UNUSED4 ; UNUSED ENTRY 4
    fff4:	df cf       	rjmp	.-66     	; 0xffb4 <BootloaderAPU_UNUSED4>
	rjmp BootloaderAPU_UNUSED5 ; UNUSED ENTRY 5
    fff6:	df cf       	rjmp	.-66     	; 0xffb6 <BootloaderAPU_UNUSED5>

Disassembly of section .apitable_signatures:

0000fff8 <BootloaderAPI_Signatures>:
    fff8:	00 f0       	brcs	.+0      	; 0xfffa <BootloaderAPI_Signatures+0x2>
    fffa:	00 00       	nop
    fffc:	b1 df       	rcall	.-158    	; 0xff60 <__data_load_end+0x4>
    fffe:	fb dc       	rcall	.-1546   	; 0xf9f6 <__vector_10+0x50>
