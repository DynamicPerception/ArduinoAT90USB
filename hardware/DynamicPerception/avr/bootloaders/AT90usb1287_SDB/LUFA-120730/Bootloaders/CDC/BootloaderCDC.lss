
BootloaderCDC.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000096  00800100  0001ff0a  00000fde  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0a  0001f000  0001f000  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .apitable_trampolines 00000018  0001ffa0  0001ffa0  00001074  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .apitable_jumptable 00000018  0001ffe0  0001ffe0  0000108c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  4 .apitable_signatures 00000008  0001fff8  0001fff8  000010a4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  5 .bss          00000012  00800196  00800196  000010ac  2**0
                  ALLOC
  6 .stab         00000954  00000000  00000000  000010ac  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .stabstr      000001af  00000000  00000000  00001a00  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_aranges 000003f8  00000000  00000000  00001bb0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000059df  00000000  00000000  00001fa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000015c2  00000000  00000000  00007987  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000093da  00000000  00000000  00008f49  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000a38  00000000  00000000  00012324  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002926  00000000  00000000  00012d5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00003d2c  00000000  00000000  00015682  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_macinfo 0010aead  00000000  00000000  000193ae  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000680  00000000  00000000  00124260  2**3
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0001f000 <__vectors>:
   1f000:	58 c0       	rjmp	.+176    	; 0x1f0b2 <__ctors_end>
   1f002:	00 00       	nop
   1f004:	74 c0       	rjmp	.+232    	; 0x1f0ee <__bad_interrupt>
   1f006:	00 00       	nop
   1f008:	72 c0       	rjmp	.+228    	; 0x1f0ee <__bad_interrupt>
   1f00a:	00 00       	nop
   1f00c:	70 c0       	rjmp	.+224    	; 0x1f0ee <__bad_interrupt>
   1f00e:	00 00       	nop
   1f010:	6e c0       	rjmp	.+220    	; 0x1f0ee <__bad_interrupt>
   1f012:	00 00       	nop
   1f014:	6c c0       	rjmp	.+216    	; 0x1f0ee <__bad_interrupt>
   1f016:	00 00       	nop
   1f018:	6a c0       	rjmp	.+212    	; 0x1f0ee <__bad_interrupt>
   1f01a:	00 00       	nop
   1f01c:	68 c0       	rjmp	.+208    	; 0x1f0ee <__bad_interrupt>
   1f01e:	00 00       	nop
   1f020:	66 c0       	rjmp	.+204    	; 0x1f0ee <__bad_interrupt>
   1f022:	00 00       	nop
   1f024:	64 c0       	rjmp	.+200    	; 0x1f0ee <__bad_interrupt>
   1f026:	00 00       	nop
   1f028:	db c4       	rjmp	.+2486   	; 0x1f9e0 <__vector_10>
   1f02a:	00 00       	nop
   1f02c:	60 c0       	rjmp	.+192    	; 0x1f0ee <__bad_interrupt>
   1f02e:	00 00       	nop
   1f030:	5e c0       	rjmp	.+188    	; 0x1f0ee <__bad_interrupt>
   1f032:	00 00       	nop
   1f034:	5c c0       	rjmp	.+184    	; 0x1f0ee <__bad_interrupt>
   1f036:	00 00       	nop
   1f038:	5a c0       	rjmp	.+180    	; 0x1f0ee <__bad_interrupt>
   1f03a:	00 00       	nop
   1f03c:	58 c0       	rjmp	.+176    	; 0x1f0ee <__bad_interrupt>
   1f03e:	00 00       	nop
   1f040:	56 c0       	rjmp	.+172    	; 0x1f0ee <__bad_interrupt>
   1f042:	00 00       	nop
   1f044:	54 c0       	rjmp	.+168    	; 0x1f0ee <__bad_interrupt>
   1f046:	00 00       	nop
   1f048:	52 c0       	rjmp	.+164    	; 0x1f0ee <__bad_interrupt>
   1f04a:	00 00       	nop
   1f04c:	50 c0       	rjmp	.+160    	; 0x1f0ee <__bad_interrupt>
   1f04e:	00 00       	nop
   1f050:	4e c0       	rjmp	.+156    	; 0x1f0ee <__bad_interrupt>
   1f052:	00 00       	nop
   1f054:	4c c0       	rjmp	.+152    	; 0x1f0ee <__bad_interrupt>
   1f056:	00 00       	nop
   1f058:	4a c0       	rjmp	.+148    	; 0x1f0ee <__bad_interrupt>
   1f05a:	00 00       	nop
   1f05c:	48 c0       	rjmp	.+144    	; 0x1f0ee <__bad_interrupt>
   1f05e:	00 00       	nop
   1f060:	46 c0       	rjmp	.+140    	; 0x1f0ee <__bad_interrupt>
   1f062:	00 00       	nop
   1f064:	44 c0       	rjmp	.+136    	; 0x1f0ee <__bad_interrupt>
   1f066:	00 00       	nop
   1f068:	42 c0       	rjmp	.+132    	; 0x1f0ee <__bad_interrupt>
   1f06a:	00 00       	nop
   1f06c:	40 c0       	rjmp	.+128    	; 0x1f0ee <__bad_interrupt>
   1f06e:	00 00       	nop
   1f070:	3e c0       	rjmp	.+124    	; 0x1f0ee <__bad_interrupt>
   1f072:	00 00       	nop
   1f074:	3c c0       	rjmp	.+120    	; 0x1f0ee <__bad_interrupt>
   1f076:	00 00       	nop
   1f078:	3a c0       	rjmp	.+116    	; 0x1f0ee <__bad_interrupt>
   1f07a:	00 00       	nop
   1f07c:	38 c0       	rjmp	.+112    	; 0x1f0ee <__bad_interrupt>
   1f07e:	00 00       	nop
   1f080:	36 c0       	rjmp	.+108    	; 0x1f0ee <__bad_interrupt>
   1f082:	00 00       	nop
   1f084:	34 c0       	rjmp	.+104    	; 0x1f0ee <__bad_interrupt>
   1f086:	00 00       	nop
   1f088:	32 c0       	rjmp	.+100    	; 0x1f0ee <__bad_interrupt>
   1f08a:	00 00       	nop
   1f08c:	30 c0       	rjmp	.+96     	; 0x1f0ee <__bad_interrupt>
   1f08e:	00 00       	nop
   1f090:	2e c0       	rjmp	.+92     	; 0x1f0ee <__bad_interrupt>
   1f092:	00 00       	nop
   1f094:	2c c0       	rjmp	.+88     	; 0x1f0ee <__bad_interrupt>
   1f096:	00 00       	nop

0001f098 <ManufacturerString>:
   1f098:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
   1f0a8:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

0001f0b2 <__ctors_end>:
   1f0b2:	11 24       	eor	r1, r1
   1f0b4:	1f be       	out	0x3f, r1	; 63
   1f0b6:	cf ef       	ldi	r28, 0xFF	; 255
   1f0b8:	d0 e2       	ldi	r29, 0x20	; 32
   1f0ba:	de bf       	out	0x3e, r29	; 62
   1f0bc:	cd bf       	out	0x3d, r28	; 61

0001f0be <__do_copy_data>:
   1f0be:	11 e0       	ldi	r17, 0x01	; 1
   1f0c0:	a0 e0       	ldi	r26, 0x00	; 0
   1f0c2:	b1 e0       	ldi	r27, 0x01	; 1
   1f0c4:	ea e0       	ldi	r30, 0x0A	; 10
   1f0c6:	ff ef       	ldi	r31, 0xFF	; 255
   1f0c8:	01 e0       	ldi	r16, 0x01	; 1
   1f0ca:	0b bf       	out	0x3b, r16	; 59
   1f0cc:	02 c0       	rjmp	.+4      	; 0x1f0d2 <__do_copy_data+0x14>
   1f0ce:	07 90       	elpm	r0, Z+
   1f0d0:	0d 92       	st	X+, r0
   1f0d2:	a6 39       	cpi	r26, 0x96	; 150
   1f0d4:	b1 07       	cpc	r27, r17
   1f0d6:	d9 f7       	brne	.-10     	; 0x1f0ce <__do_copy_data+0x10>
   1f0d8:	1b be       	out	0x3b, r1	; 59

0001f0da <__do_clear_bss>:
   1f0da:	11 e0       	ldi	r17, 0x01	; 1
   1f0dc:	a6 e9       	ldi	r26, 0x96	; 150
   1f0de:	b1 e0       	ldi	r27, 0x01	; 1
   1f0e0:	01 c0       	rjmp	.+2      	; 0x1f0e4 <.do_clear_bss_start>

0001f0e2 <.do_clear_bss_loop>:
   1f0e2:	1d 92       	st	X+, r1

0001f0e4 <.do_clear_bss_start>:
   1f0e4:	a8 3a       	cpi	r26, 0xA8	; 168
   1f0e6:	b1 07       	cpc	r27, r17
   1f0e8:	e1 f7       	brne	.-8      	; 0x1f0e2 <.do_clear_bss_loop>
   1f0ea:	43 d0       	rcall	.+134    	; 0x1f172 <main>
   1f0ec:	0c c7       	rjmp	.+3608   	; 0x1ff06 <_exit>

0001f0ee <__bad_interrupt>:
   1f0ee:	88 cf       	rjmp	.-240    	; 0x1f000 <__vectors>

0001f0f0 <FetchNextCommandByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f0f0:	84 e0       	ldi	r24, 0x04	; 4
   1f0f2:	80 93 e9 00 	sts	0x00E9, r24
   1f0f6:	0d c0       	rjmp	.+26     	; 0x1f112 <FetchNextCommandByte+0x22>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f0f8:	80 91 e8 00 	lds	r24, 0x00E8
   1f0fc:	8b 77       	andi	r24, 0x7B	; 123
   1f0fe:	80 93 e8 00 	sts	0x00E8, r24
   1f102:	03 c0       	rjmp	.+6      	; 0x1f10a <FetchNextCommandByte+0x1a>
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f104:	8e b3       	in	r24, 0x1e	; 30
   1f106:	88 23       	and	r24, r24
   1f108:	59 f0       	breq	.+22     	; 0x1f120 <FetchNextCommandByte+0x30>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f10a:	80 91 e8 00 	lds	r24, 0x00E8
	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
   1f10e:	82 ff       	sbrs	r24, 2
   1f110:	f9 cf       	rjmp	.-14     	; 0x1f104 <FetchNextCommandByte+0x14>
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f112:	80 91 e8 00 	lds	r24, 0x00E8
{
	/* Select the OUT endpoint so that the next data byte can be read */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* If OUT endpoint empty, clear it and wait for the next packet from the host */
	while (!(Endpoint_IsReadWriteAllowed()))
   1f116:	85 ff       	sbrs	r24, 5
   1f118:	ef cf       	rjmp	.-34     	; 0x1f0f8 <FetchNextCommandByte+0x8>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1f11a:	80 91 f1 00 	lds	r24, 0x00F1
			  return 0;
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
   1f11e:	08 95       	ret
		Endpoint_ClearOUT();

		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return 0;
   1f120:	80 e0       	ldi	r24, 0x00	; 0
		}
	}

	/* Fetch the next byte from the OUT endpoint */
	return Endpoint_Read_8();
}
   1f122:	08 95       	ret

0001f124 <WriteNextResponseByte>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f124:	93 e0       	ldi	r25, 0x03	; 3
   1f126:	90 93 e9 00 	sts	0x00E9, r25
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f12a:	90 91 e8 00 	lds	r25, 0x00E8
{
	/* Select the IN endpoint so that the next data byte can be written */
	Endpoint_SelectEndpoint(CDC_TX_EPADDR);

	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
   1f12e:	95 fd       	sbrc	r25, 5
   1f130:	0d c0       	rjmp	.+26     	; 0x1f14c <WriteNextResponseByte+0x28>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f132:	90 91 e8 00 	lds	r25, 0x00E8
   1f136:	9e 77       	andi	r25, 0x7E	; 126
   1f138:	90 93 e8 00 	sts	0x00E8, r25
   1f13c:	03 c0       	rjmp	.+6      	; 0x1f144 <WriteNextResponseByte+0x20>
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f13e:	9e b3       	in	r25, 0x1e	; 30
   1f140:	99 23       	and	r25, r25
   1f142:	31 f0       	breq	.+12     	; 0x1f150 <WriteNextResponseByte+0x2c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f144:	90 91 e8 00 	lds	r25, 0x00E8
	/* If IN endpoint full, clear it and wait until ready for the next packet to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
	{
		Endpoint_ClearIN();

		while (!(Endpoint_IsINReady()))
   1f148:	90 ff       	sbrs	r25, 0
   1f14a:	f9 cf       	rjmp	.-14     	; 0x1f13e <WriteNextResponseByte+0x1a>
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1f14c:	80 93 f1 00 	sts	0x00F1, r24
   1f150:	08 95       	ret

0001f152 <BL_Pulse>:
}

void BL_Pulse(void)
{
	static uint16_t Pulse = 0;
	Pulse++;
   1f152:	80 91 9c 01 	lds	r24, 0x019C
   1f156:	90 91 9d 01 	lds	r25, 0x019D
   1f15a:	01 96       	adiw	r24, 0x01	; 1
   1f15c:	90 93 9d 01 	sts	0x019D, r25
   1f160:	80 93 9c 01 	sts	0x019C, r24
	if (!Pulse)
   1f164:	00 97       	sbiw	r24, 0x00	; 0
   1f166:	21 f4       	brne	.+8      	; 0x1f170 <BL_Pulse+0x1e>
	{
		PORTC = PORTC ^ _BV(PC6);
   1f168:	88 b1       	in	r24, 0x08	; 8
   1f16a:	90 e4       	ldi	r25, 0x40	; 64
   1f16c:	89 27       	eor	r24, r25
   1f16e:	88 b9       	out	0x08, r24	; 8
   1f170:	08 95       	ret

0001f172 <main>:
/** Main program entry point. This routine configures the hardware required by the bootloader, then continuously
 *  runs the bootloader processing routine until instructed to soft-exit, or hard-reset via the watchdog to start
 *  the loaded application code.
 */
int main(void)
{
   1f172:	2f 92       	push	r2
   1f174:	3f 92       	push	r3
   1f176:	4f 92       	push	r4
   1f178:	5f 92       	push	r5
   1f17a:	6f 92       	push	r6
   1f17c:	7f 92       	push	r7
   1f17e:	8f 92       	push	r8
   1f180:	9f 92       	push	r9
   1f182:	af 92       	push	r10
   1f184:	bf 92       	push	r11
   1f186:	cf 92       	push	r12
   1f188:	df 92       	push	r13
   1f18a:	ef 92       	push	r14
   1f18c:	ff 92       	push	r15
   1f18e:	0f 93       	push	r16
   1f190:	1f 93       	push	r17
   1f192:	cf 93       	push	r28
   1f194:	df 93       	push	r29
   1f196:	cd b7       	in	r28, 0x3d	; 61
   1f198:	de b7       	in	r29, 0x3e	; 62
   1f19a:	29 97       	sbiw	r28, 0x09	; 9
   1f19c:	0f b6       	in	r0, 0x3f	; 63
   1f19e:	f8 94       	cli
   1f1a0:	de bf       	out	0x3e, r29	; 62
   1f1a2:	0f be       	out	0x3f, r0	; 63
   1f1a4:	cd bf       	out	0x3d, r28	; 61
	/* Setup hardware required for the bootloader */
	DDRF = ~_BV(PF0);	//Set the D-Pad to a digital input	
   1f1a6:	8e ef       	ldi	r24, 0xFE	; 254
   1f1a8:	80 bb       	out	0x10, r24	; 16
	PORTF |= _BV(PF0);	//set pull up on D-Pad
   1f1aa:	88 9a       	sbi	0x11, 0	; 17
	
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
   1f1ac:	84 b7       	in	r24, 0x34	; 52
   1f1ae:	87 7f       	andi	r24, 0xF7	; 247
   1f1b0:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
   1f1b2:	88 e1       	ldi	r24, 0x18	; 24
   1f1b4:	0f b6       	in	r0, 0x3f	; 63
   1f1b6:	f8 94       	cli
   1f1b8:	80 93 60 00 	sts	0x0060, r24
   1f1bc:	10 92 60 00 	sts	0x0060, r1
   1f1c0:	0f be       	out	0x3f, r0	; 63
	
	if(!(PINF & _BV(PF0)))
   1f1c2:	78 99       	sbic	0x0f, 0	; 15
   1f1c4:	9d c2       	rjmp	.+1338   	; 0x1f700 <main+0x58e>
	{
		/* Set the LCD backlight as an output */
		DDRC = _BV(PC6);	
   1f1c6:	80 e4       	ldi	r24, 0x40	; 64
   1f1c8:	87 b9       	out	0x07, r24	; 7
		
		/* Relocate the interrupt vector table to the bootloader section */
		MCUCR = (1 << IVCE);
   1f1ca:	81 e0       	ldi	r24, 0x01	; 1
   1f1cc:	85 bf       	out	0x35, r24	; 53
		MCUCR = (1 << IVSEL);
   1f1ce:	82 e0       	ldi	r24, 0x02	; 2
   1f1d0:	85 bf       	out	0x35, r24	; 53

		/* Initialize the USB and other board hardware drivers */
		USB_Init();
   1f1d2:	f0 d3       	rcall	.+2016   	; 0x1f9b4 <USB_Init>
   1f1d4:	78 94       	sei

		/* Enable global interrupts so that the USB stack can function */
		sei();
   1f1d6:	74 e0       	ldi	r23, 0x04	; 4
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f1d8:	27 2e       	mov	r2, r23
   1f1da:	e3 e0       	ldi	r30, 0x03	; 3
   1f1dc:	8e 2e       	mov	r8, r30
   1f1de:	01 e0       	ldi	r16, 0x01	; 1
				else
				{
					LowByte = FetchNextCommandByte();
				}

				HighByte = !HighByte;
   1f1e0:	f5 e0       	ldi	r31, 0x05	; 5

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1f1e2:	3f 2e       	mov	r3, r31
   1f1e4:	a9 e0       	ldi	r26, 0x09	; 9
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
	}
	else if (Command == 'Q')
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1f1e6:	9a 2e       	mov	r9, r26
   1f1e8:	72 c2       	rjmp	.+1252   	; 0x1f6ce <main+0x55c>
		USB_Init();

		/* Enable global interrupts so that the USB stack can function */
		sei();
		
		while (finished == 0)
   1f1ea:	20 92 e9 00 	sts	0x00E9, r2
   1f1ee:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f1f2:	82 ff       	sbrs	r24, 2
{
	/* Select the OUT endpoint */
	Endpoint_SelectEndpoint(CDC_RX_EPADDR);

	/* Check if endpoint has a command in it sent from the host */
	if (!(Endpoint_IsOUTReceived()))
   1f1f4:	6a c2       	rjmp	.+1236   	; 0x1f6ca <main+0x558>
   1f1f6:	7c df       	rcall	.-264    	; 0x1f0f0 <FetchNextCommandByte>
	  return;

	/* Read in the bootloader command (first byte sent from host) */
	uint8_t Command = FetchNextCommandByte();
   1f1f8:	28 2f       	mov	r18, r24
   1f1fa:	85 34       	cpi	r24, 0x45	; 69
   1f1fc:	49 f4       	brne	.+18     	; 0x1f210 <main+0x9e>

	if (Command == 'E')
   1f1fe:	8d e0       	ldi	r24, 0x0D	; 13
   1f200:	91 df       	rcall	.-222    	; 0x1f124 <WriteNextResponseByte>
	{

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1f202:	81 e0       	ldi	r24, 0x01	; 1
   1f204:	90 e0       	ldi	r25, 0x00	; 0
   1f206:	90 93 97 01 	sts	0x0197, r25
		finished = 1;
   1f20a:	80 93 96 01 	sts	0x0196, r24
   1f20e:	36 c2       	rjmp	.+1132   	; 0x1f67c <main+0x50a>
   1f210:	84 35       	cpi	r24, 0x54	; 84
   1f212:	11 f4       	brne	.+4      	; 0x1f218 <main+0xa6>
   1f214:	6d df       	rcall	.-294    	; 0x1f0f0 <FetchNextCommandByte>
	}
	else if (Command == 'T')
   1f216:	0c c2       	rjmp	.+1048   	; 0x1f630 <main+0x4be>
   1f218:	8c 34       	cpi	r24, 0x4C	; 76
	{
		FetchNextCommandByte();
   1f21a:	09 f4       	brne	.+2      	; 0x1f21e <main+0xac>
   1f21c:	09 c2       	rjmp	.+1042   	; 0x1f630 <main+0x4be>
   1f21e:	80 35       	cpi	r24, 0x50	; 80

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if ((Command == 'L') || (Command == 'P'))
   1f220:	09 f4       	brne	.+2      	; 0x1f224 <main+0xb2>
   1f222:	06 c2       	rjmp	.+1036   	; 0x1f630 <main+0x4be>
   1f224:	84 37       	cpi	r24, 0x74	; 116
   1f226:	11 f4       	brne	.+4      	; 0x1f22c <main+0xba>
   1f228:	84 e4       	ldi	r24, 0x44	; 68
   1f22a:	93 c0       	rjmp	.+294    	; 0x1f352 <main+0x1e0>
	{
		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 't')
   1f22c:	81 36       	cpi	r24, 0x61	; 97
   1f22e:	11 f4       	brne	.+4      	; 0x1f234 <main+0xc2>
	{
		/* Return ATMEGA128 part code - this is only to allow AVRProg to use the bootloader */
		WriteNextResponseByte(0x44);
   1f230:	89 e5       	ldi	r24, 0x59	; 89
   1f232:	23 c2       	rjmp	.+1094   	; 0x1f67a <main+0x508>
		WriteNextResponseByte(0x00);
	}
	else if (Command == 'a')
   1f234:	81 34       	cpi	r24, 0x41	; 65
   1f236:	19 f5       	brne	.+70     	; 0x1f27e <main+0x10c>
	{
		/* Indicate auto-address increment is supported */
		WriteNextResponseByte('Y');
   1f238:	5b df       	rcall	.-330    	; 0x1f0f0 <FetchNextCommandByte>
   1f23a:	18 2f       	mov	r17, r24
	}
	else if (Command == 'A')
   1f23c:	59 df       	rcall	.-334    	; 0x1f0f0 <FetchNextCommandByte>
   1f23e:	28 2f       	mov	r18, r24
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1f240:	30 e0       	ldi	r19, 0x00	; 0
   1f242:	22 0f       	add	r18, r18
   1f244:	33 1f       	adc	r19, r19
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1f246:	a9 01       	movw	r20, r18
   1f248:	66 27       	eor	r22, r22
   1f24a:	57 fd       	sbrc	r21, 7
   1f24c:	60 95       	com	r22
   1f24e:	76 2f       	mov	r23, r22
   1f250:	11 0f       	add	r17, r17
   1f252:	1c 83       	std	Y+4, r17	; 0x04
   1f254:	1b 82       	std	Y+3, r1	; 0x03
   1f256:	2b 81       	ldd	r18, Y+3	; 0x03
   1f258:	3c 81       	ldd	r19, Y+4	; 0x04
   1f25a:	c9 01       	movw	r24, r18
		WriteNextResponseByte('Y');
	}
	else if (Command == 'A')
	{
		/* Set the current address to that given by the host */
		CurrAddress   = (FetchNextCommandByte() << 9);
   1f25c:	aa 27       	eor	r26, r26
   1f25e:	97 fd       	sbrc	r25, 7
   1f260:	a0 95       	com	r26
   1f262:	ba 2f       	mov	r27, r26
   1f264:	48 2b       	or	r20, r24
   1f266:	59 2b       	or	r21, r25
   1f268:	6a 2b       	or	r22, r26
   1f26a:	7b 2b       	or	r23, r27
   1f26c:	40 93 98 01 	sts	0x0198, r20
		CurrAddress  |= (FetchNextCommandByte() << 1);
   1f270:	50 93 99 01 	sts	0x0199, r21
   1f274:	60 93 9a 01 	sts	0x019A, r22
   1f278:	70 93 9b 01 	sts	0x019B, r23
   1f27c:	d9 c1       	rjmp	.+946    	; 0x1f630 <main+0x4be>
   1f27e:	80 37       	cpi	r24, 0x70	; 112
   1f280:	11 f4       	brne	.+4      	; 0x1f286 <main+0x114>
   1f282:	83 e5       	ldi	r24, 0x53	; 83
   1f284:	fa c1       	rjmp	.+1012   	; 0x1f67a <main+0x508>
   1f286:	83 35       	cpi	r24, 0x53	; 83
   1f288:	59 f4       	brne	.+22     	; 0x1f2a0 <main+0x12e>

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'p')
   1f28a:	80 e0       	ldi	r24, 0x00	; 0
   1f28c:	91 e0       	ldi	r25, 0x01	; 1
	{
		/* Indicate serial programmer back to the host */
		WriteNextResponseByte('S');
   1f28e:	17 e0       	ldi	r17, 0x07	; 7
   1f290:	6c 01       	movw	r12, r24
	}
	else if (Command == 'S')
   1f292:	f6 01       	movw	r30, r12
   1f294:	81 91       	ld	r24, Z+
   1f296:	6f 01       	movw	r12, r30
   1f298:	45 df       	rcall	.-374    	; 0x1f124 <WriteNextResponseByte>
   1f29a:	11 50       	subi	r17, 0x01	; 1
   1f29c:	d1 f7       	brne	.-12     	; 0x1f292 <main+0x120>
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
   1f29e:	ee c1       	rjmp	.+988    	; 0x1f67c <main+0x50a>
   1f2a0:	86 35       	cpi	r24, 0x56	; 86
   1f2a2:	21 f4       	brne	.+8      	; 0x1f2ac <main+0x13a>
   1f2a4:	81 e3       	ldi	r24, 0x31	; 49
   1f2a6:	3e df       	rcall	.-388    	; 0x1f124 <WriteNextResponseByte>
   1f2a8:	80 e3       	ldi	r24, 0x30	; 48
		WriteNextResponseByte('S');
	}
	else if (Command == 'S')
	{
		/* Write the 7-byte software identifier to the endpoint */
		for (uint8_t CurrByte = 0; CurrByte < 7; CurrByte++)
   1f2aa:	e7 c1       	rjmp	.+974    	; 0x1f67a <main+0x508>
   1f2ac:	83 37       	cpi	r24, 0x73	; 115
		  WriteNextResponseByte(SOFTWARE_IDENTIFIER[CurrByte]);
	}
	else if (Command == 'V')
   1f2ae:	31 f4       	brne	.+12     	; 0x1f2bc <main+0x14a>
   1f2b0:	82 e8       	ldi	r24, 0x82	; 130
	{
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MAJOR);
   1f2b2:	38 df       	rcall	.-400    	; 0x1f124 <WriteNextResponseByte>
   1f2b4:	87 e9       	ldi	r24, 0x97	; 151
   1f2b6:	36 df       	rcall	.-404    	; 0x1f124 <WriteNextResponseByte>
		WriteNextResponseByte('0' + BOOTLOADER_VERSION_MINOR);
   1f2b8:	8e e1       	ldi	r24, 0x1E	; 30
   1f2ba:	df c1       	rjmp	.+958    	; 0x1f67a <main+0x508>
	}
	else if (Command == 's')
   1f2bc:	85 36       	cpi	r24, 0x65	; 101
   1f2be:	11 f5       	brne	.+68     	; 0x1f304 <main+0x192>
	{
		WriteNextResponseByte(AVR_SIGNATURE_3);
   1f2c0:	80 e0       	ldi	r24, 0x00	; 0
   1f2c2:	90 e0       	ldi	r25, 0x00	; 0
   1f2c4:	dc 01       	movw	r26, r24
		WriteNextResponseByte(AVR_SIGNATURE_2);
   1f2c6:	fc 01       	movw	r30, r24
   1f2c8:	a0 93 5b 00 	sts	0x005B, r26
		WriteNextResponseByte(AVR_SIGNATURE_1);
   1f2cc:	80 92 57 00 	sts	0x0057, r8
	}
	else if (Command == 'e')
   1f2d0:	e8 95       	spm
   1f2d2:	07 b6       	in	r0, 0x37	; 55
   1f2d4:	00 fc       	sbrc	r0, 0
   1f2d6:	fd cf       	rjmp	.-6      	; 0x1f2d2 <main+0x160>
   1f2d8:	fc 01       	movw	r30, r24
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
		{
			boot_page_erase(CurrFlashAddress);
   1f2da:	a0 93 5b 00 	sts	0x005B, r26
   1f2de:	30 92 57 00 	sts	0x0057, r3
   1f2e2:	e8 95       	spm
   1f2e4:	07 b6       	in	r0, 0x37	; 55
			boot_spm_busy_wait();
   1f2e6:	00 fc       	sbrc	r0, 0
   1f2e8:	fd cf       	rjmp	.-6      	; 0x1f2e4 <main+0x172>
   1f2ea:	80 50       	subi	r24, 0x00	; 0
			boot_page_write(CurrFlashAddress);
   1f2ec:	9f 4f       	sbci	r25, 0xFF	; 255
   1f2ee:	af 4f       	sbci	r26, 0xFF	; 255
   1f2f0:	bf 4f       	sbci	r27, 0xFF	; 255
   1f2f2:	80 30       	cpi	r24, 0x00	; 0
   1f2f4:	f0 ef       	ldi	r31, 0xF0	; 240
   1f2f6:	9f 07       	cpc	r25, r31
			boot_spm_busy_wait();
   1f2f8:	f1 e0       	ldi	r31, 0x01	; 1
   1f2fa:	af 07       	cpc	r26, r31
   1f2fc:	f0 e0       	ldi	r31, 0x00	; 0
		WriteNextResponseByte(AVR_SIGNATURE_1);
	}
	else if (Command == 'e')
	{
		/* Clear the application section of flash */
		for (uint32_t CurrFlashAddress = 0; CurrFlashAddress < (uint32_t)BOOT_START_ADDR; CurrFlashAddress += SPM_PAGESIZE)
   1f2fe:	bf 07       	cpc	r27, r31
   1f300:	11 f7       	brne	.-60     	; 0x1f2c6 <main+0x154>
   1f302:	96 c1       	rjmp	.+812    	; 0x1f630 <main+0x4be>
   1f304:	8c 36       	cpi	r24, 0x6C	; 108
   1f306:	49 f4       	brne	.+18     	; 0x1f31a <main+0x1a8>
   1f308:	f3 de       	rcall	.-538    	; 0x1f0f0 <FetchNextCommandByte>
   1f30a:	80 95       	com	r24
   1f30c:	e1 e0       	ldi	r30, 0x01	; 1
   1f30e:	f0 e0       	ldi	r31, 0x00	; 0
   1f310:	08 2e       	mov	r0, r24
   1f312:	90 92 57 00 	sts	0x0057, r9
   1f316:	e8 95       	spm

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#if !defined(NO_LOCK_BYTE_WRITE_SUPPORT)
	else if (Command == 'l')
   1f318:	8b c1       	rjmp	.+790    	; 0x1f630 <main+0x4be>
   1f31a:	82 37       	cpi	r24, 0x72	; 114
	{
		/* Set the lock bits to those given by the host */
		boot_lock_bits_set(FetchNextCommandByte());
   1f31c:	19 f4       	brne	.+6      	; 0x1f324 <main+0x1b2>
   1f31e:	e1 e0       	ldi	r30, 0x01	; 1
   1f320:	f0 e0       	ldi	r31, 0x00	; 0
   1f322:	0e c0       	rjmp	.+28     	; 0x1f340 <main+0x1ce>
   1f324:	86 34       	cpi	r24, 0x46	; 70
   1f326:	19 f4       	brne	.+6      	; 0x1f32e <main+0x1bc>
   1f328:	e0 e0       	ldi	r30, 0x00	; 0
   1f32a:	f0 e0       	ldi	r31, 0x00	; 0
   1f32c:	09 c0       	rjmp	.+18     	; 0x1f340 <main+0x1ce>
   1f32e:	8e 34       	cpi	r24, 0x4E	; 78

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	#endif
	else if (Command == 'r')
   1f330:	19 f4       	brne	.+6      	; 0x1f338 <main+0x1c6>
   1f332:	e3 e0       	ldi	r30, 0x03	; 3
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOCK_BITS));
   1f334:	f0 e0       	ldi	r31, 0x00	; 0
   1f336:	04 c0       	rjmp	.+8      	; 0x1f340 <main+0x1ce>
   1f338:	81 35       	cpi	r24, 0x51	; 81
	}
	else if (Command == 'F')
   1f33a:	31 f4       	brne	.+12     	; 0x1f348 <main+0x1d6>
   1f33c:	e2 e0       	ldi	r30, 0x02	; 2
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_LOW_FUSE_BITS));
   1f33e:	f0 e0       	ldi	r31, 0x00	; 0
   1f340:	90 92 57 00 	sts	0x0057, r9
	}
	else if (Command == 'N')
   1f344:	84 91       	lpm	r24, Z
   1f346:	99 c1       	rjmp	.+818    	; 0x1f67a <main+0x508>
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_HIGH_FUSE_BITS));
   1f348:	82 36       	cpi	r24, 0x62	; 98
   1f34a:	31 f4       	brne	.+12     	; 0x1f358 <main+0x1e6>
   1f34c:	89 e5       	ldi	r24, 0x59	; 89
	}
	else if (Command == 'Q')
   1f34e:	ea de       	rcall	.-556    	; 0x1f124 <WriteNextResponseByte>
   1f350:	81 e0       	ldi	r24, 0x01	; 1
	{
		WriteNextResponseByte(boot_lock_fuse_bits_get(GET_EXTENDED_FUSE_BITS));
   1f352:	e8 de       	rcall	.-560    	; 0x1f124 <WriteNextResponseByte>
   1f354:	80 e0       	ldi	r24, 0x00	; 0
   1f356:	91 c1       	rjmp	.+802    	; 0x1f67a <main+0x508>
   1f358:	82 34       	cpi	r24, 0x42	; 66
   1f35a:	19 f0       	breq	.+6      	; 0x1f362 <main+0x1f0>
   1f35c:	87 36       	cpi	r24, 0x67	; 103
	}
	#if !defined(NO_BLOCK_SUPPORT)
	else if (Command == 'b')
   1f35e:	09 f0       	breq	.+2      	; 0x1f362 <main+0x1f0>
   1f360:	ed c0       	rjmp	.+474    	; 0x1f53c <main+0x3ca>
	{
		WriteNextResponseByte('Y');
   1f362:	28 87       	std	Y+8, r18	; 0x08
   1f364:	c5 de       	rcall	.-630    	; 0x1f0f0 <FetchNextCommandByte>
   1f366:	18 2f       	mov	r17, r24

		/* Send block size to the host */
		WriteNextResponseByte(SPM_PAGESIZE >> 8);
   1f368:	c3 de       	rcall	.-634    	; 0x1f0f0 <FetchNextCommandByte>
   1f36a:	a8 2e       	mov	r10, r24
   1f36c:	c1 de       	rcall	.-638    	; 0x1f0f0 <FetchNextCommandByte>
		WriteNextResponseByte(SPM_PAGESIZE & 0xFF);
   1f36e:	38 2f       	mov	r19, r24
   1f370:	85 54       	subi	r24, 0x45	; 69
	}
	else if ((Command == 'B') || (Command == 'g'))
   1f372:	28 85       	ldd	r18, Y+8	; 0x08
   1f374:	82 30       	cpi	r24, 0x02	; 2
   1f376:	08 f0       	brcs	.+2      	; 0x1f37a <main+0x208>
   1f378:	7f c1       	rjmp	.+766    	; 0x1f678 <main+0x506>
   1f37a:	1a 83       	std	Y+2, r17	; 0x02
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f37c:	19 82       	std	Y+1, r1	; 0x01
   1f37e:	bb 24       	eor	r11, r11
   1f380:	89 81       	ldd	r24, Y+1	; 0x01
   1f382:	9a 81       	ldd	r25, Y+2	; 0x02
	BlockSize |=  FetchNextCommandByte();
   1f384:	a8 2a       	or	r10, r24
   1f386:	b9 2a       	or	r11, r25
   1f388:	27 36       	cpi	r18, 0x67	; 103

	MemoryType =  FetchNextCommandByte();
   1f38a:	09 f0       	breq	.+2      	; 0x1f38e <main+0x21c>
   1f38c:	4c c0       	rjmp	.+152    	; 0x1f426 <main+0x2b4>
   1f38e:	91 e1       	ldi	r25, 0x11	; 17

	if ((MemoryType != 'E') && (MemoryType != 'F'))
   1f390:	90 93 57 00 	sts	0x0057, r25
   1f394:	e8 95       	spm
   1f396:	10 e0       	ldi	r17, 0x00	; 0
   1f398:	43 2e       	mov	r4, r19
	char     MemoryType;

	bool     HighByte = false;
	uint8_t  LowByte  = 0;

	BlockSize  = (FetchNextCommandByte() << 8);
   1f39a:	40 c0       	rjmp	.+128    	; 0x1f41c <main+0x2aa>
   1f39c:	c0 90 98 01 	lds	r12, 0x0198
	BlockSize |=  FetchNextCommandByte();
   1f3a0:	d0 90 99 01 	lds	r13, 0x0199
   1f3a4:	e0 90 9a 01 	lds	r14, 0x019A

		return;
	}

	/* Check if command is to read memory */
	if (Command == 'g')
   1f3a8:	f0 90 9b 01 	lds	r15, 0x019B
   1f3ac:	e6 e4       	ldi	r30, 0x46	; 70
	{
		/* Re-enable RWW section */
		boot_rww_enable();
   1f3ae:	4e 16       	cp	r4, r30
   1f3b0:	e9 f4       	brne	.+58     	; 0x1f3ec <main+0x27a>
   1f3b2:	81 2f       	mov	r24, r17
   1f3b4:	90 e0       	ldi	r25, 0x00	; 0
static void ReadWriteMemoryBlock(const uint8_t Command)
{
	uint16_t BlockSize;
	char     MemoryType;

	bool     HighByte = false;
   1f3b6:	a0 e0       	ldi	r26, 0x00	; 0
   1f3b8:	b0 e0       	ldi	r27, 0x00	; 0
   1f3ba:	8c 29       	or	r24, r12
   1f3bc:	9d 29       	or	r25, r13
   1f3be:	ae 29       	or	r26, r14
   1f3c0:	bf 29       	or	r27, r15
   1f3c2:	ab bf       	out	0x3b, r26	; 59
   1f3c4:	fc 01       	movw	r30, r24
   1f3c6:	87 91       	elpm	r24, Z+
   1f3c8:	ad de       	rcall	.-678    	; 0x1f124 <WriteNextResponseByte>
   1f3ca:	11 23       	and	r17, r17
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1f3cc:	69 f0       	breq	.+26     	; 0x1f3e8 <main+0x276>
   1f3ce:	d7 01       	movw	r26, r14
   1f3d0:	c6 01       	movw	r24, r12
			{
				/* Read the next FLASH byte from the current FLASH page */
				#if (FLASHEND > 0xFFFF)
				WriteNextResponseByte(pgm_read_byte_far(CurrAddress | HighByte));
   1f3d2:	02 96       	adiw	r24, 0x02	; 2
   1f3d4:	a1 1d       	adc	r26, r1
   1f3d6:	b1 1d       	adc	r27, r1
   1f3d8:	80 93 98 01 	sts	0x0198, r24
   1f3dc:	90 93 99 01 	sts	0x0199, r25
   1f3e0:	a0 93 9a 01 	sts	0x019A, r26
   1f3e4:	b0 93 9b 01 	sts	0x019B, r27
   1f3e8:	10 27       	eor	r17, r16
   1f3ea:	15 c0       	rjmp	.+42     	; 0x1f416 <main+0x2a4>
				#else
				WriteNextResponseByte(pgm_read_byte(CurrAddress | HighByte));
				#endif

				/* If both bytes in current word have been read, increment the address counter */
				if (HighByte)
   1f3ec:	d7 01       	movw	r26, r14
   1f3ee:	c6 01       	movw	r24, r12
				  CurrAddress += 2;
   1f3f0:	b6 95       	lsr	r27
   1f3f2:	a7 95       	ror	r26
   1f3f4:	97 95       	ror	r25
   1f3f6:	87 95       	ror	r24
   1f3f8:	70 d5       	rcall	.+2784   	; 0x1feda <__eerd_byte_usb1287>
   1f3fa:	94 de       	rcall	.-728    	; 0x1f124 <WriteNextResponseByte>
   1f3fc:	d7 01       	movw	r26, r14
   1f3fe:	c6 01       	movw	r24, r12
   1f400:	02 96       	adiw	r24, 0x02	; 2
   1f402:	a1 1d       	adc	r26, r1
   1f404:	b1 1d       	adc	r27, r1
   1f406:	80 93 98 01 	sts	0x0198, r24

				HighByte = !HighByte;
   1f40a:	90 93 99 01 	sts	0x0199, r25
			}
			else
			{
				/* Read the next EEPROM byte into the endpoint */
				WriteNextResponseByte(eeprom_read_byte((uint8_t*)(intptr_t)(CurrAddress >> 1)));
   1f40e:	a0 93 9a 01 	sts	0x019A, r26
   1f412:	b0 93 9b 01 	sts	0x019B, r27
   1f416:	08 94       	sec
   1f418:	a1 08       	sbc	r10, r1
   1f41a:	b1 08       	sbc	r11, r1
   1f41c:	a1 14       	cp	r10, r1
   1f41e:	b1 04       	cpc	r11, r1
   1f420:	09 f0       	breq	.+2      	; 0x1f424 <main+0x2b2>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f422:	bc cf       	rjmp	.-136    	; 0x1f39c <main+0x22a>
   1f424:	2b c1       	rjmp	.+598    	; 0x1f67c <main+0x50a>
   1f426:	40 90 98 01 	lds	r4, 0x0198
   1f42a:	50 90 99 01 	lds	r5, 0x0199
   1f42e:	60 90 9a 01 	lds	r6, 0x019A
   1f432:	70 90 9b 01 	lds	r7, 0x019B
   1f436:	36 34       	cpi	r19, 0x46	; 70
   1f438:	09 f0       	breq	.+2      	; 0x1f43c <main+0x2ca>
   1f43a:	6a c0       	rjmp	.+212    	; 0x1f510 <main+0x39e>
   1f43c:	f2 01       	movw	r30, r4
   1f43e:	60 92 5b 00 	sts	0x005B, r6
	if (Command == 'g')
	{
		/* Re-enable RWW section */
		boot_rww_enable();

		while (BlockSize--)
   1f442:	80 92 57 00 	sts	0x0057, r8
   1f446:	e8 95       	spm
   1f448:	07 b6       	in	r0, 0x37	; 55
   1f44a:	00 fc       	sbrc	r0, 0
			}
		}
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;
   1f44c:	fd cf       	rjmp	.-6      	; 0x1f448 <main+0x2d6>
   1f44e:	60 c0       	rjmp	.+192    	; 0x1f510 <main+0x39e>
   1f450:	29 85       	ldd	r18, Y+9	; 0x09
   1f452:	26 34       	cpi	r18, 0x46	; 70
   1f454:	b1 f5       	brne	.+108    	; 0x1f4c2 <main+0x350>
   1f456:	3f 81       	ldd	r19, Y+7	; 0x07
   1f458:	33 23       	and	r19, r19
   1f45a:	69 f1       	breq	.+90     	; 0x1f4b6 <main+0x344>

		if (MemoryType == 'F')
   1f45c:	c0 90 98 01 	lds	r12, 0x0198
   1f460:	d0 90 99 01 	lds	r13, 0x0199
		{
			boot_page_erase(PageStartAddress);
   1f464:	e0 90 9a 01 	lds	r14, 0x019A
   1f468:	f0 90 9b 01 	lds	r15, 0x019B
   1f46c:	41 de       	rcall	.-894    	; 0x1f0f0 <FetchNextCommandByte>
			boot_spm_busy_wait();
   1f46e:	8e 83       	std	Y+6, r24	; 0x06
   1f470:	1d 82       	std	Y+5, r1	; 0x05
   1f472:	81 2f       	mov	r24, r17
   1f474:	90 e0       	ldi	r25, 0x00	; 0
		}

		while (BlockSize--)
		{
			if (MemoryType == 'F')
   1f476:	2d 81       	ldd	r18, Y+5	; 0x05
   1f478:	3e 81       	ldd	r19, Y+6	; 0x06
   1f47a:	82 2b       	or	r24, r18
			{
				/* If both bytes in current word have been written, increment the address counter */
				if (HighByte)
   1f47c:	93 2b       	or	r25, r19
   1f47e:	0c 01       	movw	r0, r24
   1f480:	f6 01       	movw	r30, r12
				{
					/* Write the next FLASH word to the current FLASH page */
					boot_page_fill(CurrAddress, ((FetchNextCommandByte() << 8) | LowByte));
   1f482:	e0 92 5b 00 	sts	0x005B, r14
   1f486:	00 93 57 00 	sts	0x0057, r16
   1f48a:	e8 95       	spm
   1f48c:	11 24       	eor	r1, r1
   1f48e:	80 91 98 01 	lds	r24, 0x0198
   1f492:	90 91 99 01 	lds	r25, 0x0199
   1f496:	a0 91 9a 01 	lds	r26, 0x019A
   1f49a:	b0 91 9b 01 	lds	r27, 0x019B
   1f49e:	02 96       	adiw	r24, 0x02	; 2
   1f4a0:	a1 1d       	adc	r26, r1
   1f4a2:	b1 1d       	adc	r27, r1
   1f4a4:	80 93 98 01 	sts	0x0198, r24
   1f4a8:	90 93 99 01 	sts	0x0199, r25
   1f4ac:	a0 93 9a 01 	sts	0x019A, r26
   1f4b0:	b0 93 9b 01 	sts	0x019B, r27
   1f4b4:	02 c0       	rjmp	.+4      	; 0x1f4ba <main+0x348>

					/* Increment the address counter after use */
					CurrAddress += 2;
   1f4b6:	1c de       	rcall	.-968    	; 0x1f0f0 <FetchNextCommandByte>
   1f4b8:	18 2f       	mov	r17, r24
   1f4ba:	3f 81       	ldd	r19, Y+7	; 0x07
   1f4bc:	30 27       	eor	r19, r16
   1f4be:	3f 83       	std	Y+7, r19	; 0x07
   1f4c0:	23 c0       	rjmp	.+70     	; 0x1f508 <main+0x396>
   1f4c2:	c0 90 98 01 	lds	r12, 0x0198
   1f4c6:	d0 90 99 01 	lds	r13, 0x0199
   1f4ca:	e0 90 9a 01 	lds	r14, 0x019A
   1f4ce:	f0 90 9b 01 	lds	r15, 0x019B
   1f4d2:	f6 94       	lsr	r15
   1f4d4:	e7 94       	ror	r14
   1f4d6:	d7 94       	ror	r13
   1f4d8:	c7 94       	ror	r12
   1f4da:	0a de       	rcall	.-1004   	; 0x1f0f0 <FetchNextCommandByte>
   1f4dc:	68 2f       	mov	r22, r24
				}
				else
				{
					LowByte = FetchNextCommandByte();
   1f4de:	c6 01       	movw	r24, r12
   1f4e0:	04 d5       	rcall	.+2568   	; 0x1feea <__eewr_byte_usb1287>
   1f4e2:	80 91 98 01 	lds	r24, 0x0198
				}

				HighByte = !HighByte;
   1f4e6:	90 91 99 01 	lds	r25, 0x0199
   1f4ea:	a0 91 9a 01 	lds	r26, 0x019A
			}
			else
			{
				/* Write the next EEPROM byte from the endpoint */
				eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f4ee:	b0 91 9b 01 	lds	r27, 0x019B
   1f4f2:	02 96       	adiw	r24, 0x02	; 2
   1f4f4:	a1 1d       	adc	r26, r1
   1f4f6:	b1 1d       	adc	r27, r1
   1f4f8:	80 93 98 01 	sts	0x0198, r24
   1f4fc:	90 93 99 01 	sts	0x0199, r25
   1f500:	a0 93 9a 01 	sts	0x019A, r26
   1f504:	b0 93 9b 01 	sts	0x019B, r27
   1f508:	08 94       	sec
   1f50a:	a1 08       	sbc	r10, r1
   1f50c:	b1 08       	sbc	r11, r1
   1f50e:	04 c0       	rjmp	.+8      	; 0x1f518 <main+0x3a6>

				/* Increment the address counter after use */
				CurrAddress += 2;
   1f510:	10 e0       	ldi	r17, 0x00	; 0
   1f512:	80 e0       	ldi	r24, 0x00	; 0
   1f514:	39 87       	std	Y+9, r19	; 0x09
   1f516:	8f 83       	std	Y+7, r24	; 0x07
   1f518:	a1 14       	cp	r10, r1
   1f51a:	b1 04       	cpc	r11, r1
   1f51c:	09 f0       	breq	.+2      	; 0x1f520 <main+0x3ae>
   1f51e:	98 cf       	rjmp	.-208    	; 0x1f450 <main+0x2de>
   1f520:	39 85       	ldd	r19, Y+9	; 0x09
   1f522:	36 34       	cpi	r19, 0x46	; 70
   1f524:	09 f0       	breq	.+2      	; 0x1f528 <main+0x3b6>
   1f526:	84 c0       	rjmp	.+264    	; 0x1f630 <main+0x4be>
   1f528:	f2 01       	movw	r30, r4
   1f52a:	60 92 5b 00 	sts	0x005B, r6
   1f52e:	30 92 57 00 	sts	0x0057, r3
   1f532:	e8 95       	spm
   1f534:	07 b6       	in	r0, 0x37	; 55
   1f536:	00 fc       	sbrc	r0, 0
   1f538:	fd cf       	rjmp	.-6      	; 0x1f534 <main+0x3c2>
   1f53a:	7a c0       	rjmp	.+244    	; 0x1f630 <main+0x4be>
   1f53c:	83 34       	cpi	r24, 0x43	; 67
	}
	else
	{
		uint32_t PageStartAddress = CurrAddress;

		if (MemoryType == 'F')
   1f53e:	99 f4       	brne	.+38     	; 0x1f566 <main+0x3f4>
   1f540:	c0 90 98 01 	lds	r12, 0x0198
   1f544:	d0 90 99 01 	lds	r13, 0x0199
		{
			boot_page_erase(PageStartAddress);
			boot_spm_busy_wait();
		}

		while (BlockSize--)
   1f548:	e0 90 9a 01 	lds	r14, 0x019A
   1f54c:	f0 90 9b 01 	lds	r15, 0x019B
				CurrAddress += 2;
			}
		}

		/* If in FLASH programming mode, commit the page after writing */
		if (MemoryType == 'F')
   1f550:	cf dd       	rcall	.-1122   	; 0x1f0f0 <FetchNextCommandByte>
   1f552:	90 e0       	ldi	r25, 0x00	; 0
   1f554:	0c 01       	movw	r0, r24
		{
			/* Commit the flash page to memory */
			boot_page_write(PageStartAddress);
   1f556:	f6 01       	movw	r30, r12
   1f558:	e0 92 5b 00 	sts	0x005B, r14
   1f55c:	00 93 57 00 	sts	0x0057, r16
   1f560:	e8 95       	spm

			/* Wait until write operation has completed */
			boot_spm_busy_wait();
   1f562:	11 24       	eor	r1, r1
   1f564:	65 c0       	rjmp	.+202    	; 0x1f630 <main+0x4be>
   1f566:	83 36       	cpi	r24, 0x63	; 99
   1f568:	c1 f4       	brne	.+48     	; 0x1f59a <main+0x428>
		/* Delegate the block write/read to a separate function for clarity */
		ReadWriteMemoryBlock(Command);
	}
	#endif
	#if !defined(NO_FLASH_BYTE_SUPPORT)
	else if (Command == 'C')
   1f56a:	c0 90 98 01 	lds	r12, 0x0198
	{
		/* Write the high byte to the current flash page */
		boot_page_fill(CurrAddress, FetchNextCommandByte());
   1f56e:	d0 90 99 01 	lds	r13, 0x0199
   1f572:	e0 90 9a 01 	lds	r14, 0x019A
   1f576:	f0 90 9b 01 	lds	r15, 0x019B
   1f57a:	ba dd       	rcall	.-1164   	; 0x1f0f0 <FetchNextCommandByte>
   1f57c:	b7 01       	movw	r22, r14
   1f57e:	a6 01       	movw	r20, r12
   1f580:	41 60       	ori	r20, 0x01	; 1
   1f582:	90 e0       	ldi	r25, 0x00	; 0
   1f584:	0c 01       	movw	r0, r24
   1f586:	fa 01       	movw	r30, r20
   1f588:	60 93 5b 00 	sts	0x005B, r22
   1f58c:	00 93 57 00 	sts	0x0057, r16
   1f590:	e8 95       	spm
   1f592:	11 24       	eor	r1, r1
   1f594:	d7 01       	movw	r26, r14

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'c')
   1f596:	c6 01       	movw	r24, r12
   1f598:	40 c0       	rjmp	.+128    	; 0x1f61a <main+0x4a8>
	{
		/* Write the low byte to the current flash page */
		boot_page_fill(CurrAddress | 0x01, FetchNextCommandByte());
   1f59a:	8d 36       	cpi	r24, 0x6D	; 109
   1f59c:	91 f4       	brne	.+36     	; 0x1f5c2 <main+0x450>
   1f59e:	80 91 98 01 	lds	r24, 0x0198
   1f5a2:	90 91 99 01 	lds	r25, 0x0199
   1f5a6:	a0 91 9a 01 	lds	r26, 0x019A
   1f5aa:	b0 91 9b 01 	lds	r27, 0x019B
   1f5ae:	fc 01       	movw	r30, r24
   1f5b0:	a0 93 5b 00 	sts	0x005B, r26
   1f5b4:	30 92 57 00 	sts	0x0057, r3
   1f5b8:	e8 95       	spm
   1f5ba:	07 b6       	in	r0, 0x37	; 55
   1f5bc:	00 fc       	sbrc	r0, 0
   1f5be:	fd cf       	rjmp	.-6      	; 0x1f5ba <main+0x448>
   1f5c0:	37 c0       	rjmp	.+110    	; 0x1f630 <main+0x4be>
   1f5c2:	82 35       	cpi	r24, 0x52	; 82
   1f5c4:	81 f4       	brne	.+32     	; 0x1f5e6 <main+0x474>

		/* Increment the address */
		CurrAddress += 2;
   1f5c6:	80 91 98 01 	lds	r24, 0x0198
   1f5ca:	90 91 99 01 	lds	r25, 0x0199

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'm')
   1f5ce:	a0 91 9a 01 	lds	r26, 0x019A
	{
		/* Commit the flash page to memory */
		boot_page_write(CurrAddress);
   1f5d2:	b0 91 9b 01 	lds	r27, 0x019B
   1f5d6:	ab bf       	out	0x3b, r26	; 59
   1f5d8:	fc 01       	movw	r30, r24
   1f5da:	c7 90       	elpm	r12, Z+
   1f5dc:	d6 90       	elpm	r13, Z
   1f5de:	8d 2d       	mov	r24, r13
   1f5e0:	a1 dd       	rcall	.-1214   	; 0x1f124 <WriteNextResponseByte>
   1f5e2:	8c 2d       	mov	r24, r12
   1f5e4:	4a c0       	rjmp	.+148    	; 0x1f67a <main+0x508>
   1f5e6:	84 34       	cpi	r24, 0x44	; 68
   1f5e8:	29 f5       	brne	.+74     	; 0x1f634 <main+0x4c2>
   1f5ea:	c0 90 98 01 	lds	r12, 0x0198

		/* Wait until write operation has completed */
		boot_spm_busy_wait();
   1f5ee:	d0 90 99 01 	lds	r13, 0x0199
   1f5f2:	e0 90 9a 01 	lds	r14, 0x019A

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
	}
	else if (Command == 'R')
   1f5f6:	f0 90 9b 01 	lds	r15, 0x019B
	{
		#if (FLASHEND > 0xFFFF)
		uint16_t ProgramWord = pgm_read_word_far(CurrAddress);
   1f5fa:	f6 94       	lsr	r15
   1f5fc:	e7 94       	ror	r14
   1f5fe:	d7 94       	ror	r13
   1f600:	c7 94       	ror	r12
   1f602:	76 dd       	rcall	.-1300   	; 0x1f0f0 <FetchNextCommandByte>
   1f604:	68 2f       	mov	r22, r24
   1f606:	c6 01       	movw	r24, r12
   1f608:	70 d4       	rcall	.+2272   	; 0x1feea <__eewr_byte_usb1287>
   1f60a:	80 91 98 01 	lds	r24, 0x0198
   1f60e:	90 91 99 01 	lds	r25, 0x0199
		#else
		uint16_t ProgramWord = pgm_read_word(CurrAddress);
		#endif

		WriteNextResponseByte(ProgramWord >> 8);
   1f612:	a0 91 9a 01 	lds	r26, 0x019A
		WriteNextResponseByte(ProgramWord & 0xFF);
   1f616:	b0 91 9b 01 	lds	r27, 0x019B
	}
	#endif
	#if !defined(NO_EEPROM_BYTE_SUPPORT)
	else if (Command == 'D')
   1f61a:	02 96       	adiw	r24, 0x02	; 2
   1f61c:	a1 1d       	adc	r26, r1
	{
		/* Read the byte from the endpoint and write it to the EEPROM */
		eeprom_write_byte((uint8_t*)((intptr_t)(CurrAddress >> 1)), FetchNextCommandByte());
   1f61e:	b1 1d       	adc	r27, r1
   1f620:	80 93 98 01 	sts	0x0198, r24
   1f624:	90 93 99 01 	sts	0x0199, r25
   1f628:	a0 93 9a 01 	sts	0x019A, r26
   1f62c:	b0 93 9b 01 	sts	0x019B, r27
   1f630:	8d e0       	ldi	r24, 0x0D	; 13
   1f632:	23 c0       	rjmp	.+70     	; 0x1f67a <main+0x508>
   1f634:	84 36       	cpi	r24, 0x64	; 100
   1f636:	f1 f4       	brne	.+60     	; 0x1f674 <main+0x502>
   1f638:	c0 90 98 01 	lds	r12, 0x0198
   1f63c:	d0 90 99 01 	lds	r13, 0x0199
   1f640:	e0 90 9a 01 	lds	r14, 0x019A

		/* Increment the address after use */
		CurrAddress += 2;
   1f644:	f0 90 9b 01 	lds	r15, 0x019B
   1f648:	d7 01       	movw	r26, r14
   1f64a:	c6 01       	movw	r24, r12
   1f64c:	b6 95       	lsr	r27
   1f64e:	a7 95       	ror	r26
   1f650:	97 95       	ror	r25
   1f652:	87 95       	ror	r24
   1f654:	42 d4       	rcall	.+2180   	; 0x1feda <__eerd_byte_usb1287>
   1f656:	66 dd       	rcall	.-1332   	; 0x1f124 <WriteNextResponseByte>
   1f658:	d7 01       	movw	r26, r14
   1f65a:	c6 01       	movw	r24, r12
   1f65c:	02 96       	adiw	r24, 0x02	; 2
   1f65e:	a1 1d       	adc	r26, r1
   1f660:	b1 1d       	adc	r27, r1
   1f662:	80 93 98 01 	sts	0x0198, r24
   1f666:	90 93 99 01 	sts	0x0199, r25

		/* Send confirmation byte back to the host */
		WriteNextResponseByte('\r');
   1f66a:	a0 93 9a 01 	sts	0x019A, r26
	}
	else if (Command == 'd')
   1f66e:	b0 93 9b 01 	sts	0x019B, r27
	{
		/* Read the EEPROM byte and write it to the endpoint */
		WriteNextResponseByte(eeprom_read_byte((uint8_t*)((intptr_t)(CurrAddress >> 1))));
   1f672:	04 c0       	rjmp	.+8      	; 0x1f67c <main+0x50a>
   1f674:	8b 31       	cpi	r24, 0x1B	; 27
   1f676:	11 f0       	breq	.+4      	; 0x1f67c <main+0x50a>
   1f678:	8f e3       	ldi	r24, 0x3F	; 63
   1f67a:	54 dd       	rcall	.-1368   	; 0x1f124 <WriteNextResponseByte>
   1f67c:	80 92 e9 00 	sts	0x00E9, r8
   1f680:	90 91 e8 00 	lds	r25, 0x00E8
   1f684:	80 91 e8 00 	lds	r24, 0x00E8
   1f688:	8e 77       	andi	r24, 0x7E	; 126
   1f68a:	80 93 e8 00 	sts	0x00E8, r24
   1f68e:	95 ff       	sbrs	r25, 5
   1f690:	04 c0       	rjmp	.+8      	; 0x1f69a <main+0x528>
   1f692:	10 c0       	rjmp	.+32     	; 0x1f6b4 <main+0x542>

		/* Increment the address after use */
		CurrAddress += 2;
   1f694:	8e b3       	in	r24, 0x1e	; 30
   1f696:	88 23       	and	r24, r24
   1f698:	c1 f0       	breq	.+48     	; 0x1f6ca <main+0x558>
   1f69a:	80 91 e8 00 	lds	r24, 0x00E8
   1f69e:	80 ff       	sbrs	r24, 0
   1f6a0:	f9 cf       	rjmp	.-14     	; 0x1f694 <main+0x522>
   1f6a2:	80 91 e8 00 	lds	r24, 0x00E8
   1f6a6:	8e 77       	andi	r24, 0x7E	; 126
   1f6a8:	80 93 e8 00 	sts	0x00E8, r24
   1f6ac:	03 c0       	rjmp	.+6      	; 0x1f6b4 <main+0x542>
   1f6ae:	8e b3       	in	r24, 0x1e	; 30
	}
	#endif
	else if (Command != 27)
   1f6b0:	88 23       	and	r24, r24
   1f6b2:	59 f0       	breq	.+22     	; 0x1f6ca <main+0x558>
	{
		/* Unknown (non-sync) command, return fail code */
		WriteNextResponseByte('?');
   1f6b4:	80 91 e8 00 	lds	r24, 0x00E8
   1f6b8:	80 ff       	sbrs	r24, 0
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f6ba:	f9 cf       	rjmp	.-14     	; 0x1f6ae <main+0x53c>
   1f6bc:	20 92 e9 00 	sts	0x00E9, r2
			 *          on its direction.
			 */
			static inline bool Endpoint_IsReadWriteAllowed(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsReadWriteAllowed(void)
			{
				return ((UEINTX & (1 << RWAL)) ? true : false);
   1f6c0:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f6c4:	8b 77       	andi	r24, 0x7B	; 123
   1f6c6:	80 93 e8 00 	sts	0x00E8, r24
   1f6ca:	ec d3       	rcall	.+2008   	; 0x1fea4 <USB_USBTask>

	/* Send the endpoint data to the host */
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
   1f6cc:	42 dd       	rcall	.-1404   	; 0x1f152 <BL_Pulse>
   1f6ce:	80 91 96 01 	lds	r24, 0x0196
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f6d2:	90 91 97 01 	lds	r25, 0x0197
   1f6d6:	00 97       	sbiw	r24, 0x00	; 0
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6d8:	09 f4       	brne	.+2      	; 0x1f6dc <main+0x56a>
   1f6da:	87 cd       	rjmp	.-1266   	; 0x1f1ea <main+0x78>
	Endpoint_ClearIN();

	/* If a full endpoint's worth of data was sent, we need to send an empty packet afterwards to signal end of transfer */
	if (IsEndpointFull)
	{
		while (!(Endpoint_IsINReady()))
   1f6dc:	28 e0       	ldi	r18, 0x08	; 8
   1f6de:	88 e1       	ldi	r24, 0x18	; 24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f6e0:	90 e0       	ldi	r25, 0x00	; 0
   1f6e2:	0f b6       	in	r0, 0x3f	; 63
   1f6e4:	f8 94       	cli
   1f6e6:	a8 95       	wdr
   1f6e8:	80 93 60 00 	sts	0x0060, r24
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f6ec:	0f be       	out	0x3f, r0	; 63
   1f6ee:	20 93 60 00 	sts	0x0060, r18
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f6f2:	80 91 e0 00 	lds	r24, 0x00E0

		Endpoint_ClearIN();
	}

	/* Wait until the data has been sent to the host */
	while (!(Endpoint_IsINReady()))
   1f6f6:	81 60       	ori	r24, 0x01	; 1
   1f6f8:	80 93 e0 00 	sts	0x00E0, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f6fc:	f8 94       	cli
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f6fe:	ff cf       	rjmp	.-2      	; 0x1f6fe <main+0x58c>
   1f700:	88 98       	cbi	0x11, 0	; 17
   1f702:	e0 e0       	ldi	r30, 0x00	; 0
   1f704:	f0 e0       	ldi	r31, 0x00	; 0
   1f706:	09 95       	icall
		sei();
		
		while (finished == 0)
		{
			CDC_Task();
			USB_USBTask();
   1f708:	80 e0       	ldi	r24, 0x00	; 0
   1f70a:	90 e0       	ldi	r25, 0x00	; 0
			BL_Pulse();
   1f70c:	29 96       	adiw	r28, 0x09	; 9
   1f70e:	0f b6       	in	r0, 0x3f	; 63
		USB_Init();

		/* Enable global interrupts so that the USB stack can function */
		sei();
		
		while (finished == 0)
   1f710:	f8 94       	cli
   1f712:	de bf       	out	0x3e, r29	; 62
   1f714:	0f be       	out	0x3f, r0	; 63
   1f716:	cd bf       	out	0x3d, r28	; 61
   1f718:	df 91       	pop	r29
   1f71a:	cf 91       	pop	r28
   1f71c:	1f 91       	pop	r17
			USB_USBTask();
			BL_Pulse();
		}
		
		/*enable watchdog to reset the AVR */
		wdt_enable(WDTO_15MS);
   1f71e:	0f 91       	pop	r16
   1f720:	ff 90       	pop	r15
   1f722:	ef 90       	pop	r14
   1f724:	df 90       	pop	r13
   1f726:	cf 90       	pop	r12
   1f728:	bf 90       	pop	r11
   1f72a:	af 90       	pop	r10
   1f72c:	9f 90       	pop	r9
   1f72e:	8f 90       	pop	r8
   1f730:	7f 90       	pop	r7
   1f732:	6f 90       	pop	r6
			 *  enumerating the device once attached until \ref USB_Attach() is called.
			 */
			static inline void USB_Detach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Detach(void)
			{
				UDCON  |=  (1 << DETACH);
   1f734:	5f 90       	pop	r5
   1f736:	4f 90       	pop	r4
   1f738:	3f 90       	pop	r3
   1f73a:	2f 90       	pop	r2
   1f73c:	08 95       	ret

0001f73e <EVENT_USB_Device_ConfigurationChanged>:
		
		/* Disconnect from the host - USB interface will be reset later along with the AVR */
		USB_Detach();
	
		cli();	
   1f73e:	82 e0       	ldi	r24, 0x02	; 2
   1f740:	61 ec       	ldi	r22, 0xC1	; 193
		
		while(1);  //wait for watchdog to byte. 
	}
	
	/*RESET I/O*/
	PORTF &= ~_BV(PF0);
   1f742:	42 e0       	ldi	r20, 0x02	; 2

	/*jump the ship!*/
	((void (*)(void))0x0000)();
   1f744:	c4 d0       	rcall	.+392    	; 0x1f8ce <Endpoint_ConfigureEndpoint_Prv>
   1f746:	83 e0       	ldi	r24, 0x03	; 3
   1f748:	61 e8       	ldi	r22, 0x81	; 129
}
   1f74a:	42 e1       	ldi	r20, 0x12	; 18
   1f74c:	c0 d0       	rcall	.+384    	; 0x1f8ce <Endpoint_ConfigureEndpoint_Prv>
   1f74e:	84 e0       	ldi	r24, 0x04	; 4
   1f750:	60 e8       	ldi	r22, 0x80	; 128
   1f752:	42 e1       	ldi	r20, 0x12	; 18
   1f754:	bc c0       	rjmp	.+376    	; 0x1f8ce <Endpoint_ConfigureEndpoint_Prv>

0001f756 <EVENT_USB_Device_ControlRequest>:
   1f756:	80 91 a0 01 	lds	r24, 0x01A0
   1f75a:	98 2f       	mov	r25, r24
   1f75c:	9f 77       	andi	r25, 0x7F	; 127
   1f75e:	91 32       	cpi	r25, 0x21	; 33
   1f760:	49 f5       	brne	.+82     	; 0x1f7b4 <EVENT_USB_Device_ControlRequest+0x5e>
   1f762:	90 91 a1 01 	lds	r25, 0x01A1
   1f766:	90 32       	cpi	r25, 0x20	; 32
   1f768:	a1 f0       	breq	.+40     	; 0x1f792 <EVENT_USB_Device_ControlRequest+0x3c>
   1f76a:	91 32       	cpi	r25, 0x21	; 33
   1f76c:	19 f5       	brne	.+70     	; 0x1f7b4 <EVENT_USB_Device_ControlRequest+0x5e>
   1f76e:	81 3a       	cpi	r24, 0xA1	; 161
   1f770:	09 f5       	brne	.+66     	; 0x1f7b4 <EVENT_USB_Device_ControlRequest+0x5e>
   1f772:	80 91 e8 00 	lds	r24, 0x00E8
   1f776:	87 7f       	andi	r24, 0xF7	; 247
   1f778:	80 93 e8 00 	sts	0x00E8, r24
   1f77c:	88 e0       	ldi	r24, 0x08	; 8
   1f77e:	91 e0       	ldi	r25, 0x01	; 1
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
			{
				Endpoint_ClearSETUP();

				/* Write the line coding data to the control endpoint */
				Endpoint_Write_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f780:	67 e0       	ldi	r22, 0x07	; 7
   1f782:	70 e0       	ldi	r23, 0x00	; 0
   1f784:	e2 d1       	rcall	.+964    	; 0x1fb4a <Endpoint_Write_Control_Stream_LE>
   1f786:	80 91 e8 00 	lds	r24, 0x00E8
   1f78a:	8b 77       	andi	r24, 0x7B	; 123
   1f78c:	80 93 e8 00 	sts	0x00E8, r24
   1f790:	08 95       	ret
   1f792:	81 32       	cpi	r24, 0x21	; 33
				Endpoint_ClearOUT();
			}

			break;
		case CDC_REQ_SetLineEncoding:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
   1f794:	79 f4       	brne	.+30     	; 0x1f7b4 <EVENT_USB_Device_ControlRequest+0x5e>
   1f796:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1f79a:	87 7f       	andi	r24, 0xF7	; 247
   1f79c:	80 93 e8 00 	sts	0x00E8, r24
   1f7a0:	88 e0       	ldi	r24, 0x08	; 8
			{
				Endpoint_ClearSETUP();

				/* Read the line coding data in from the host into the global struct */
				Endpoint_Read_Control_Stream_LE(&LineEncoding, sizeof(CDC_LineEncoding_t));
   1f7a2:	91 e0       	ldi	r25, 0x01	; 1
   1f7a4:	67 e0       	ldi	r22, 0x07	; 7
   1f7a6:	70 e0       	ldi	r23, 0x00	; 0
   1f7a8:	29 d2       	rcall	.+1106   	; 0x1fbfc <Endpoint_Read_Control_Stream_LE>
   1f7aa:	80 91 e8 00 	lds	r24, 0x00E8
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f7ae:	8e 77       	andi	r24, 0x7E	; 126
   1f7b0:	80 93 e8 00 	sts	0x00E8, r24
   1f7b4:	08 95       	ret

0001f7b6 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
   1f7b6:	92 30       	cpi	r25, 0x02	; 2
   1f7b8:	29 f0       	breq	.+10     	; 0x1f7c4 <CALLBACK_USB_GetDescriptor+0xe>
   1f7ba:	93 30       	cpi	r25, 0x03	; 3
   1f7bc:	41 f0       	breq	.+16     	; 0x1f7ce <CALLBACK_USB_GetDescriptor+0x18>
   1f7be:	91 30       	cpi	r25, 0x01	; 1
   1f7c0:	61 f4       	brne	.+24     	; 0x1f7da <CALLBACK_USB_GetDescriptor+0x24>
   1f7c2:	10 c0       	rjmp	.+32     	; 0x1f7e4 <CALLBACK_USB_GetDescriptor+0x2e>
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
   1f7c4:	8e e3       	ldi	r24, 0x3E	; 62
   1f7c6:	90 e0       	ldi	r25, 0x00	; 0
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration:
			Address = &ConfigurationDescriptor;
   1f7c8:	2d e3       	ldi	r18, 0x3D	; 61
   1f7ca:	31 e0       	ldi	r19, 0x01	; 1
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
   1f7cc:	1e c0       	rjmp	.+60     	; 0x1f80a <CALLBACK_USB_GetDescriptor+0x54>
		case DTYPE_String:
			if (!(DescriptorNumber))
   1f7ce:	88 23       	and	r24, r24
   1f7d0:	71 f0       	breq	.+28     	; 0x1f7ee <CALLBACK_USB_GetDescriptor+0x38>
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
   1f7d2:	81 30       	cpi	r24, 0x01	; 1
   1f7d4:	89 f0       	breq	.+34     	; 0x1f7f8 <CALLBACK_USB_GetDescriptor+0x42>
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
   1f7d6:	82 30       	cpi	r24, 0x02	; 2
   1f7d8:	a1 f0       	breq	.+40     	; 0x1f802 <CALLBACK_USB_GetDescriptor+0x4c>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
	uint16_t    Size    = NO_DESCRIPTOR;
   1f7da:	80 e0       	ldi	r24, 0x00	; 0
   1f7dc:	90 e0       	ldi	r25, 0x00	; 0
                                    const void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	const void* Address = NULL;
   1f7de:	20 e0       	ldi	r18, 0x00	; 0
   1f7e0:	30 e0       	ldi	r19, 0x00	; 0
   1f7e2:	13 c0       	rjmp	.+38     	; 0x1f80a <CALLBACK_USB_GetDescriptor+0x54>

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
   1f7e4:	82 e1       	ldi	r24, 0x12	; 18
   1f7e6:	90 e0       	ldi	r25, 0x00	; 0
	uint16_t    Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device:
			Address = &DeviceDescriptor;
   1f7e8:	2b e7       	ldi	r18, 0x7B	; 123
   1f7ea:	31 e0       	ldi	r19, 0x01	; 1
   1f7ec:	0e c0       	rjmp	.+28     	; 0x1f80a <CALLBACK_USB_GetDescriptor+0x54>
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
   1f7ee:	84 e0       	ldi	r24, 0x04	; 4
   1f7f0:	90 e0       	ldi	r25, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
		case DTYPE_String:
			if (!(DescriptorNumber))
			{
				Address = &LanguageString;
   1f7f2:	29 e3       	ldi	r18, 0x39	; 57
   1f7f4:	31 e0       	ldi	r19, 0x01	; 1
   1f7f6:	09 c0       	rjmp	.+18     	; 0x1f80a <CALLBACK_USB_GetDescriptor+0x54>
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
   1f7f8:	88 e1       	ldi	r24, 0x18	; 24
   1f7fa:	90 e0       	ldi	r25, 0x00	; 0
				Address = &LanguageString;
				Size    = LanguageString.Header.Size;
			}
			else if (DescriptorNumber == 0x01)
			{
				Address = &ManufacturerString;
   1f7fc:	28 e9       	ldi	r18, 0x98	; 152
   1f7fe:	30 ef       	ldi	r19, 0xF0	; 240
   1f800:	04 c0       	rjmp	.+8      	; 0x1f80a <CALLBACK_USB_GetDescriptor+0x54>
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
				Size    = ProductString.Header.Size;
   1f802:	88 e2       	ldi	r24, 0x28	; 40
   1f804:	90 e0       	ldi	r25, 0x00	; 0
				Address = &ManufacturerString;
				Size    = ManufacturerString.Header.Size;
			}
			else if (DescriptorNumber == 0x02)
			{
				Address = &ProductString;
   1f806:	2f e0       	ldi	r18, 0x0F	; 15
   1f808:	31 e0       	ldi	r19, 0x01	; 1
			}

			break;
	}

	*DescriptorAddress = Address;
   1f80a:	fa 01       	movw	r30, r20
   1f80c:	31 83       	std	Z+1, r19	; 0x01
   1f80e:	20 83       	st	Z, r18
	return Size;
}
   1f810:	08 95       	ret

0001f812 <BootloaderAPI_ErasePage>:
 */

#include "BootloaderAPI.h"

void BootloaderAPI_ErasePage(const uint32_t Address)
{
   1f812:	dc 01       	movw	r26, r24
   1f814:	cb 01       	movw	r24, r22
	boot_page_erase_safe(Address);
   1f816:	07 b6       	in	r0, 0x37	; 55
   1f818:	00 fc       	sbrc	r0, 0
   1f81a:	fd cf       	rjmp	.-6      	; 0x1f816 <BootloaderAPI_ErasePage+0x4>
   1f81c:	f9 99       	sbic	0x1f, 1	; 31
   1f81e:	fe cf       	rjmp	.-4      	; 0x1f81c <BootloaderAPI_ErasePage+0xa>
   1f820:	23 e0       	ldi	r18, 0x03	; 3
   1f822:	fc 01       	movw	r30, r24
   1f824:	a0 93 5b 00 	sts	0x005B, r26
   1f828:	20 93 57 00 	sts	0x0057, r18
   1f82c:	e8 95       	spm
	boot_spm_busy_wait();
   1f82e:	07 b6       	in	r0, 0x37	; 55
   1f830:	00 fc       	sbrc	r0, 0
   1f832:	fd cf       	rjmp	.-6      	; 0x1f82e <BootloaderAPI_ErasePage+0x1c>
	boot_rww_enable();
   1f834:	81 e1       	ldi	r24, 0x11	; 17
   1f836:	80 93 57 00 	sts	0x0057, r24
   1f83a:	e8 95       	spm
}
   1f83c:	08 95       	ret

0001f83e <BootloaderAPI_WritePage>:

void BootloaderAPI_WritePage(const uint32_t Address)
{
   1f83e:	dc 01       	movw	r26, r24
   1f840:	cb 01       	movw	r24, r22
	boot_page_write_safe(Address);
   1f842:	07 b6       	in	r0, 0x37	; 55
   1f844:	00 fc       	sbrc	r0, 0
   1f846:	fd cf       	rjmp	.-6      	; 0x1f842 <BootloaderAPI_WritePage+0x4>
   1f848:	f9 99       	sbic	0x1f, 1	; 31
   1f84a:	fe cf       	rjmp	.-4      	; 0x1f848 <BootloaderAPI_WritePage+0xa>
   1f84c:	25 e0       	ldi	r18, 0x05	; 5
   1f84e:	fc 01       	movw	r30, r24
   1f850:	a0 93 5b 00 	sts	0x005B, r26
   1f854:	20 93 57 00 	sts	0x0057, r18
   1f858:	e8 95       	spm
	boot_spm_busy_wait();
   1f85a:	07 b6       	in	r0, 0x37	; 55
   1f85c:	00 fc       	sbrc	r0, 0
   1f85e:	fd cf       	rjmp	.-6      	; 0x1f85a <BootloaderAPI_WritePage+0x1c>
	boot_rww_enable();
   1f860:	81 e1       	ldi	r24, 0x11	; 17
   1f862:	80 93 57 00 	sts	0x0057, r24
   1f866:	e8 95       	spm
}
   1f868:	08 95       	ret

0001f86a <BootloaderAPI_FillWord>:

void BootloaderAPI_FillWord(const uint32_t Address, const uint16_t Word)
{
   1f86a:	dc 01       	movw	r26, r24
   1f86c:	cb 01       	movw	r24, r22
	boot_page_fill_safe(Address, Word);
   1f86e:	07 b6       	in	r0, 0x37	; 55
   1f870:	00 fc       	sbrc	r0, 0
   1f872:	fd cf       	rjmp	.-6      	; 0x1f86e <BootloaderAPI_FillWord+0x4>
   1f874:	f9 99       	sbic	0x1f, 1	; 31
   1f876:	fe cf       	rjmp	.-4      	; 0x1f874 <BootloaderAPI_FillWord+0xa>
   1f878:	21 e0       	ldi	r18, 0x01	; 1
   1f87a:	0a 01       	movw	r0, r20
   1f87c:	fc 01       	movw	r30, r24
   1f87e:	a0 93 5b 00 	sts	0x005B, r26
   1f882:	20 93 57 00 	sts	0x0057, r18
   1f886:	e8 95       	spm
   1f888:	11 24       	eor	r1, r1
}
   1f88a:	08 95       	ret

0001f88c <BootloaderAPI_ReadSignature>:

uint8_t BootloaderAPI_ReadSignature(const uint16_t Address)
{
	return boot_signature_byte_get(Address);
   1f88c:	21 e2       	ldi	r18, 0x21	; 33
   1f88e:	fc 01       	movw	r30, r24
   1f890:	20 93 57 00 	sts	0x0057, r18
   1f894:	84 91       	lpm	r24, Z
}
   1f896:	08 95       	ret

0001f898 <BootloaderAPI_ReadFuse>:

uint8_t BootloaderAPI_ReadFuse(const uint16_t Address)
{
	return boot_lock_fuse_bits_get(Address);
   1f898:	29 e0       	ldi	r18, 0x09	; 9
   1f89a:	fc 01       	movw	r30, r24
   1f89c:	20 93 57 00 	sts	0x0057, r18
   1f8a0:	84 91       	lpm	r24, Z
}
   1f8a2:	08 95       	ret

0001f8a4 <BootloaderAPI_ReadLock>:

uint8_t BootloaderAPI_ReadLock(void)
{
	return boot_lock_fuse_bits_get(GET_LOCK_BITS);
   1f8a4:	e1 e0       	ldi	r30, 0x01	; 1
   1f8a6:	f0 e0       	ldi	r31, 0x00	; 0
   1f8a8:	89 e0       	ldi	r24, 0x09	; 9
   1f8aa:	80 93 57 00 	sts	0x0057, r24
   1f8ae:	84 91       	lpm	r24, Z
}
   1f8b0:	08 95       	ret

0001f8b2 <BootloaderAPI_WriteLock>:

void BootloaderAPI_WriteLock(const uint8_t LockBits)
{
	boot_lock_bits_set_safe(LockBits);
   1f8b2:	07 b6       	in	r0, 0x37	; 55
   1f8b4:	00 fc       	sbrc	r0, 0
   1f8b6:	fd cf       	rjmp	.-6      	; 0x1f8b2 <BootloaderAPI_WriteLock>
   1f8b8:	f9 99       	sbic	0x1f, 1	; 31
   1f8ba:	fe cf       	rjmp	.-4      	; 0x1f8b8 <BootloaderAPI_WriteLock+0x6>
   1f8bc:	80 95       	com	r24
   1f8be:	99 e0       	ldi	r25, 0x09	; 9
   1f8c0:	e1 e0       	ldi	r30, 0x01	; 1
   1f8c2:	f0 e0       	ldi	r31, 0x00	; 0
   1f8c4:	08 2e       	mov	r0, r24
   1f8c6:	90 93 57 00 	sts	0x0057, r25
   1f8ca:	e8 95       	spm
}
   1f8cc:	08 95       	ret

0001f8ce <Endpoint_ConfigureEndpoint_Prv>:
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1f8ce:	8f 70       	andi	r24, 0x0F	; 15
   1f8d0:	80 93 e9 00 	sts	0x00E9, r24
			 *  \note Endpoints must first be configured properly via \ref Endpoint_ConfigureEndpoint().
			 */
			static inline void Endpoint_EnableEndpoint(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_EnableEndpoint(void)
			{
				UECONX |= (1 << EPEN);
   1f8d4:	eb ee       	ldi	r30, 0xEB	; 235
   1f8d6:	f0 e0       	ldi	r31, 0x00	; 0
   1f8d8:	80 81       	ld	r24, Z
   1f8da:	81 60       	ori	r24, 0x01	; 1
   1f8dc:	80 83       	st	Z, r24
{
#if defined(CONTROL_ONLY_DEVICE) || defined(ORDERED_EP_CONFIG)
	Endpoint_SelectEndpoint(Number);
	Endpoint_EnableEndpoint();

	UECFG1X = 0;
   1f8de:	ed ee       	ldi	r30, 0xED	; 237
   1f8e0:	f0 e0       	ldi	r31, 0x00	; 0
   1f8e2:	10 82       	st	Z, r1
	UECFG0X = UECFG0XData;
   1f8e4:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
   1f8e8:	40 83       	st	Z, r20
			 *  \return Boolean \c true if the currently selected endpoint has been configured, \c false otherwise.
			 */
			static inline bool Endpoint_IsConfigured(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsConfigured(void)
			{
				return ((UESTA0X & (1 << CFGOK)) ? true : false);
   1f8ea:	80 91 ee 00 	lds	r24, 0x00EE
	}

	Endpoint_SelectEndpoint(Number);
	return true;
#endif
}
   1f8ee:	88 1f       	adc	r24, r24
   1f8f0:	88 27       	eor	r24, r24
   1f8f2:	88 1f       	adc	r24, r24
   1f8f4:	08 95       	ret

0001f8f6 <Endpoint_ClearStatusStage>:
	}
}

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
   1f8f6:	80 91 a0 01 	lds	r24, 0x01A0
   1f8fa:	87 ff       	sbrs	r24, 7
   1f8fc:	11 c0       	rjmp	.+34     	; 0x1f920 <Endpoint_ClearStatusStage+0x2a>
   1f8fe:	03 c0       	rjmp	.+6      	; 0x1f906 <Endpoint_ClearStatusStage+0x10>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f900:	8e b3       	in	r24, 0x1e	; 30
   1f902:	88 23       	and	r24, r24
   1f904:	b1 f0       	breq	.+44     	; 0x1f932 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1f906:	80 91 e8 00 	lds	r24, 0x00E8

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
   1f90a:	82 ff       	sbrs	r24, 2
   1f90c:	f9 cf       	rjmp	.-14     	; 0x1f900 <Endpoint_ClearStatusStage+0xa>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1f90e:	80 91 e8 00 	lds	r24, 0x00E8
   1f912:	8b 77       	andi	r24, 0x7B	; 123
   1f914:	80 93 e8 00 	sts	0x00E8, r24
   1f918:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
   1f91a:	8e b3       	in	r24, 0x1e	; 30
   1f91c:	88 23       	and	r24, r24
   1f91e:	49 f0       	breq	.+18     	; 0x1f932 <Endpoint_ClearStatusStage+0x3c>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1f920:	80 91 e8 00 	lds	r24, 0x00E8

		Endpoint_ClearOUT();
	}
	else
	{
		while (!(Endpoint_IsINReady()))
   1f924:	80 ff       	sbrs	r24, 0
   1f926:	f9 cf       	rjmp	.-14     	; 0x1f91a <Endpoint_ClearStatusStage+0x24>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1f928:	80 91 e8 00 	lds	r24, 0x00E8
   1f92c:	8e 77       	andi	r24, 0x7E	; 126
   1f92e:	80 93 e8 00 	sts	0x00E8, r24
   1f932:	08 95       	ret

0001f934 <USB_ResetInterface>:

	USB_IsInitialized = false;
}

void USB_ResetInterface(void)
{
   1f934:	0f 93       	push	r16
   1f936:	1f 93       	push	r17
   1f938:	cf 93       	push	r28
   1f93a:	df 93       	push	r29
	#if defined(USB_CAN_BE_BOTH)
	bool UIDModeSelectEnabled = ((UHWCON & (1 << UIDE)) != 0);
	#endif

	USB_INT_DisableAllInterrupts();
   1f93c:	44 d0       	rcall	.+136    	; 0x1f9c6 <USB_INT_DisableAllInterrupts>
   1f93e:	4b d0       	rcall	.+150    	; 0x1f9d6 <USB_INT_ClearAllInterrupts>
	USB_INT_ClearAllInterrupts();
   1f940:	c8 ed       	ldi	r28, 0xD8	; 216
   1f942:	d0 e0       	ldi	r29, 0x00	; 0
			}

			static inline void USB_Controller_Reset(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Controller_Reset(void)
			{
				USBCON &= ~(1 << USBE);
   1f944:	88 81       	ld	r24, Y
   1f946:	8f 77       	andi	r24, 0x7F	; 127
   1f948:	88 83       	st	Y, r24
   1f94a:	88 81       	ld	r24, Y
   1f94c:	80 68       	ori	r24, 0x80	; 128
				USBCON |=  (1 << USBE);
   1f94e:	88 83       	st	Y, r24
   1f950:	88 81       	ld	r24, Y
   1f952:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1f954:	88 83       	st	Y, r24
   1f956:	e7 ed       	ldi	r30, 0xD7	; 215
   1f958:	f0 e0       	ldi	r31, 0x00	; 0

	if (USB_CurrentMode == USB_MODE_Device)
	{
		#if defined(USB_CAN_BE_DEVICE)
		#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
		UHWCON |=  (1 << UIMOD);
   1f95a:	80 81       	ld	r24, Z
   1f95c:	80 68       	ori	r24, 0x80	; 128
   1f95e:	80 83       	st	Z, r24
   1f960:	19 bc       	out	0x29, r1	; 41
   1f962:	1e ba       	out	0x1e, r1	; 30
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1f964:	10 92 9e 01 	sts	0x019E, r1

#if defined(USB_CAN_BE_DEVICE)
static void USB_Init_Device(void)
{
	USB_DeviceState                 = DEVICE_STATE_Unattached;
	USB_Device_ConfigurationNumber  = 0;
   1f968:	00 ee       	ldi	r16, 0xE0	; 224
   1f96a:	10 e0       	ldi	r17, 0x00	; 0
			}

			static inline void USB_Device_SetFullSpeed(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetFullSpeed(void)
			{
				UDCON &= ~(1 << LSM);
   1f96c:	f8 01       	movw	r30, r16
   1f96e:	80 81       	ld	r24, Z
   1f970:	8b 7f       	andi	r24, 0xFB	; 251
   1f972:	80 83       	st	Z, r24
   1f974:	88 81       	ld	r24, Y
   1f976:	81 60       	ori	r24, 0x01	; 1
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBCON |= (1 << VBUSTE);
   1f978:	88 83       	st	Y, r24
   1f97a:	80 e0       	ldi	r24, 0x00	; 0
   1f97c:	60 e0       	ldi	r22, 0x00	; 0
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
   1f97e:	42 e0       	ldi	r20, 0x02	; 2
   1f980:	a6 df       	rcall	.-180    	; 0x1f8ce <Endpoint_ConfigureEndpoint_Prv>
   1f982:	e1 ee       	ldi	r30, 0xE1	; 225
   1f984:	f0 e0       	ldi	r31, 0x00	; 0
   1f986:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1f988:	8e 7f       	andi	r24, 0xFE	; 254
   1f98a:	80 83       	st	Z, r24
   1f98c:	e2 ee       	ldi	r30, 0xE2	; 226
   1f98e:	f0 e0       	ldi	r31, 0x00	; 0
   1f990:	80 81       	ld	r24, Z
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1f992:	81 60       	ori	r24, 0x01	; 1
   1f994:	80 83       	st	Z, r24
   1f996:	80 81       	ld	r24, Z
   1f998:	88 60       	ori	r24, 0x08	; 8
   1f99a:	80 83       	st	Z, r24
						break;
					case USB_INT_EORSTI:
						UDIEN  |= (1 << EORSTE);
   1f99c:	f8 01       	movw	r30, r16
   1f99e:	80 81       	ld	r24, Z
   1f9a0:	8e 7f       	andi	r24, 0xFE	; 254
			 *  register and despite the datasheet making no mention of its requirement in host mode.
			 */
			static inline void USB_Attach(void) ATTR_ALWAYS_INLINE;
			static inline void USB_Attach(void)
			{
				UDCON  &= ~(1 << DETACH);
   1f9a2:	80 83       	st	Z, r24
   1f9a4:	88 81       	ld	r24, Y
   1f9a6:	80 61       	ori	r24, 0x10	; 16
   1f9a8:	88 83       	st	Y, r24

			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
			static inline void USB_OTGPAD_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_OTGPAD_On(void)
			{
				USBCON |=  (1 << OTGPADE);
   1f9aa:	df 91       	pop	r29
   1f9ac:	cf 91       	pop	r28
   1f9ae:	1f 91       	pop	r17
	}

	#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
	USB_OTGPAD_On();
	#endif
}
   1f9b0:	0f 91       	pop	r16
   1f9b2:	08 95       	ret

0001f9b4 <USB_Init>:
   1f9b4:	e7 ed       	ldi	r30, 0xD7	; 215
   1f9b6:	f0 e0       	ldi	r31, 0x00	; 0
   1f9b8:	80 81       	ld	r24, Z

			static inline void USB_REG_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_REG_On(void)
			{
			#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
				UHWCON |=  (1 << UVREGE);
   1f9ba:	81 60       	ori	r24, 0x01	; 1
   1f9bc:	80 83       	st	Z, r24
		UHWCON &= ~(1 << UIDE);
		USB_CurrentMode = Mode;
	}
	#endif

	USB_IsInitialized = true;
   1f9be:	81 e0       	ldi	r24, 0x01	; 1
   1f9c0:	80 93 9f 01 	sts	0x019F, r24

	USB_ResetInterface();
   1f9c4:	b7 cf       	rjmp	.-146    	; 0x1f934 <USB_ResetInterface>

0001f9c6 <USB_INT_DisableAllInterrupts>:
#include "../USBInterrupt.h"

void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));
   1f9c6:	e8 ed       	ldi	r30, 0xD8	; 216
   1f9c8:	f0 e0       	ldi	r31, 0x00	; 0
   1f9ca:	80 81       	ld	r24, Z
   1f9cc:	8c 7f       	andi	r24, 0xFC	; 252
   1f9ce:	80 83       	st	Z, r24
	#if defined(USB_CAN_BE_HOST)
	UHIEN   = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
   1f9d0:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
   1f9d4:	08 95       	ret

0001f9d6 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT = 0;
   1f9d6:	10 92 da 00 	sts	0x00DA, r1
	#if defined(USB_CAN_BE_HOST)
	UHINT  = 0;
	#endif

	#if defined(USB_CAN_BE_DEVICE)
	UDINT  = 0;
   1f9da:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
   1f9de:	08 95       	ret

0001f9e0 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
   1f9e0:	1f 92       	push	r1
   1f9e2:	0f 92       	push	r0
   1f9e4:	0f b6       	in	r0, 0x3f	; 63
   1f9e6:	0f 92       	push	r0
   1f9e8:	0b b6       	in	r0, 0x3b	; 59
   1f9ea:	0f 92       	push	r0
   1f9ec:	11 24       	eor	r1, r1
   1f9ee:	2f 93       	push	r18
   1f9f0:	3f 93       	push	r19
   1f9f2:	4f 93       	push	r20
   1f9f4:	5f 93       	push	r21
   1f9f6:	6f 93       	push	r22
   1f9f8:	7f 93       	push	r23
   1f9fa:	8f 93       	push	r24
   1f9fc:	9f 93       	push	r25
   1f9fe:	af 93       	push	r26
   1fa00:	bf 93       	push	r27
   1fa02:	ef 93       	push	r30
   1fa04:	ff 93       	push	r31
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBINT & (1 << VBUSTI));
   1fa06:	80 91 da 00 	lds	r24, 0x00DA
		EVENT_USB_Device_StartOfFrame();
	}
	#endif

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUSTI) && USB_INT_IsEnabled(USB_INT_VBUSTI))
   1fa0a:	80 ff       	sbrs	r24, 0
   1fa0c:	1b c0       	rjmp	.+54     	; 0x1fa44 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						return (USBCON & (1 << VBUSTE));
   1fa0e:	80 91 d8 00 	lds	r24, 0x00D8
   1fa12:	80 ff       	sbrs	r24, 0
   1fa14:	17 c0       	rjmp	.+46     	; 0x1fa44 <__vector_10+0x64>
			{
				switch (Interrupt)
				{
					#if (defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR))
					case USB_INT_VBUSTI:
						USBINT &= ~(1 << VBUSTI);
   1fa16:	80 91 da 00 	lds	r24, 0x00DA
   1fa1a:	8e 7f       	andi	r24, 0xFE	; 254
   1fa1c:	80 93 da 00 	sts	0x00DA, r24
				 *  \return Boolean \c true if the VBUS line is currently detecting power from a host, \c false otherwise.
				 */
				static inline bool USB_VBUS_GetStatus(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
				static inline bool USB_VBUS_GetStatus(void)
				{
					return ((USBSTA & (1 << VBUS)) ? true : false);
   1fa20:	80 91 d9 00 	lds	r24, 0x00D9
	{
		USB_INT_Clear(USB_INT_VBUSTI);

		if (USB_VBUS_GetStatus())
   1fa24:	80 ff       	sbrs	r24, 0
   1fa26:	0b c0       	rjmp	.+22     	; 0x1fa3e <__vector_10+0x5e>

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1fa28:	84 e1       	ldi	r24, 0x14	; 20
   1fa2a:	89 bd       	out	0x29, r24	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1fa2c:	86 e1       	ldi	r24, 0x16	; 22
   1fa2e:	89 bd       	out	0x29, r24	; 41
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			{
				USB_PLL_On();
				while (!(USB_PLL_IsReady()));
   1fa30:	09 b4       	in	r0, 0x29	; 41
   1fa32:	00 fe       	sbrs	r0, 0
   1fa34:	fd cf       	rjmp	.-6      	; 0x1fa30 <__vector_10+0x50>
			}

			USB_DeviceState = DEVICE_STATE_Powered;
   1fa36:	81 e0       	ldi	r24, 0x01	; 1
   1fa38:	8e bb       	out	0x1e, r24	; 30
			EVENT_USB_Device_Connect();
   1fa3a:	33 d2       	rcall	.+1126   	; 0x1fea2 <USB_Event_Stub>
   1fa3c:	03 c0       	rjmp	.+6      	; 0x1fa44 <__vector_10+0x64>
   1fa3e:	19 bc       	out	0x29, r1	; 41
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1fa40:	1e ba       	out	0x1e, r1	; 30
		else
		{
			if (!(USB_Options & USB_OPT_MANUAL_PLL))
			  USB_PLL_Off();

			USB_DeviceState = DEVICE_STATE_Unattached;
   1fa42:	2f d2       	rcall	.+1118   	; 0x1fea2 <USB_Event_Stub>
			EVENT_USB_Device_Disconnect();
   1fa44:	80 91 e1 00 	lds	r24, 0x00E1
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
   1fa48:	80 ff       	sbrs	r24, 0
   1fa4a:	17 c0       	rjmp	.+46     	; 0x1fa7a <__vector_10+0x9a>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPI) && USB_INT_IsEnabled(USB_INT_SUSPI))
   1fa4c:	80 91 e2 00 	lds	r24, 0x00E2
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
   1fa50:	80 ff       	sbrs	r24, 0
   1fa52:	13 c0       	rjmp	.+38     	; 0x1fa7a <__vector_10+0x9a>
   1fa54:	80 91 e2 00 	lds	r24, 0x00E2
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1fa58:	8e 7f       	andi	r24, 0xFE	; 254
   1fa5a:	80 93 e2 00 	sts	0x00E2, r24
   1fa5e:	80 91 e2 00 	lds	r24, 0x00E2
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fa62:	80 61       	ori	r24, 0x10	; 16
   1fa64:	80 93 e2 00 	sts	0x00E2, r24
   1fa68:	80 91 d8 00 	lds	r24, 0x00D8
			#endif

			static inline void USB_CLK_Freeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Freeze(void)
			{
				USBCON |=  (1 << FRZCLK);
   1fa6c:	80 62       	ori	r24, 0x20	; 32
   1fa6e:	80 93 d8 00 	sts	0x00D8, r24
   1fa72:	19 bc       	out	0x29, r1	; 41
   1fa74:	85 e0       	ldi	r24, 0x05	; 5
			}

			static inline void USB_PLL_Off(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_Off(void)
			{
				PLLCSR = 0;
   1fa76:	8e bb       	out	0x1e, r24	; 30

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
   1fa78:	14 d2       	rcall	.+1064   	; 0x1fea2 <USB_Event_Stub>
   1fa7a:	80 91 e1 00 	lds	r24, 0x00E1
		EVENT_USB_Device_Suspend();
   1fa7e:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBINT & (1 << IDTI));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
   1fa80:	2c c0       	rjmp	.+88     	; 0x1fada <__vector_10+0xfa>
   1fa82:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUPI) && USB_INT_IsEnabled(USB_INT_WAKEUPI))
   1fa86:	84 ff       	sbrs	r24, 4
					case USB_INT_IDTI:
						return (USBCON & (1 << IDTE));
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
   1fa88:	28 c0       	rjmp	.+80     	; 0x1fada <__vector_10+0xfa>
   1fa8a:	84 e1       	ldi	r24, 0x14	; 20
   1fa8c:	89 bd       	out	0x29, r24	; 41
   1fa8e:	86 e1       	ldi	r24, 0x16	; 22

		/* Inline Functions: */
			static inline void USB_PLL_On(void) ATTR_ALWAYS_INLINE;
			static inline void USB_PLL_On(void)
			{
				PLLCSR = USB_PLL_PSC;
   1fa90:	89 bd       	out	0x29, r24	; 41
   1fa92:	09 b4       	in	r0, 0x29	; 41
				PLLCSR = (USB_PLL_PSC | (1 << PLLE));
   1fa94:	00 fe       	sbrs	r0, 0
   1fa96:	fd cf       	rjmp	.-6      	; 0x1fa92 <__vector_10+0xb2>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
			while (!(USB_PLL_IsReady()));
   1fa98:	80 91 d8 00 	lds	r24, 0x00D8
   1fa9c:	8f 7d       	andi	r24, 0xDF	; 223
			}

			static inline void USB_CLK_Unfreeze(void) ATTR_ALWAYS_INLINE;
			static inline void USB_CLK_Unfreeze(void)
			{
				USBCON &= ~(1 << FRZCLK);
   1fa9e:	80 93 d8 00 	sts	0x00D8, r24
   1faa2:	80 91 e1 00 	lds	r24, 0x00E1
   1faa6:	8f 7e       	andi	r24, 0xEF	; 239
						USBINT &= ~(1 << IDTI);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
   1faa8:	80 93 e1 00 	sts	0x00E1, r24
   1faac:	80 91 e2 00 	lds	r24, 0x00E2
   1fab0:	8f 7e       	andi	r24, 0xEF	; 239
						USBCON &= ~(1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
   1fab2:	80 93 e2 00 	sts	0x00E2, r24
   1fab6:	80 91 e2 00 	lds	r24, 0x00E2
   1faba:	81 60       	ori	r24, 0x01	; 1
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  |= (1 << SUSPE);
   1fabc:	80 93 e2 00 	sts	0x00E2, r24
   1fac0:	80 91 9e 01 	lds	r24, 0x019E
   1fac4:	88 23       	and	r24, r24
		USB_INT_Clear(USB_INT_WAKEUPI);

		USB_INT_Disable(USB_INT_WAKEUPI);
		USB_INT_Enable(USB_INT_SUSPI);

		if (USB_Device_ConfigurationNumber)
   1fac6:	21 f4       	brne	.+8      	; 0x1fad0 <__vector_10+0xf0>
   1fac8:	80 91 e3 00 	lds	r24, 0x00E3
   1facc:	87 ff       	sbrs	r24, 7
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1face:	02 c0       	rjmp	.+4      	; 0x1fad4 <__vector_10+0xf4>
   1fad0:	84 e0       	ldi	r24, 0x04	; 4
		  USB_DeviceState = DEVICE_STATE_Configured;
		else
		  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fad2:	01 c0       	rjmp	.+2      	; 0x1fad6 <__vector_10+0xf6>
   1fad4:	81 e0       	ldi	r24, 0x01	; 1
   1fad6:	8e bb       	out	0x1e, r24	; 30
   1fad8:	e4 d1       	rcall	.+968    	; 0x1fea2 <USB_Event_Stub>
   1fada:	80 91 e1 00 	lds	r24, 0x00E1

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		EVENT_USB_Device_Connect();
		#else
		EVENT_USB_Device_WakeUp();
   1fade:	83 ff       	sbrs	r24, 3
   1fae0:	21 c0       	rjmp	.+66     	; 0x1fb24 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDINT  & (1 << WAKEUPI));
					case USB_INT_SUSPI:
						return (UDINT  & (1 << SUSPI));
					case USB_INT_EORSTI:
						return (UDINT  & (1 << EORSTI));
   1fae2:	80 91 e2 00 	lds	r24, 0x00E2
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
   1fae6:	83 ff       	sbrs	r24, 3
   1fae8:	1d c0       	rjmp	.+58     	; 0x1fb24 <__vector_10+0x144>
					case USB_INT_WAKEUPI:
						return (UDIEN  & (1 << WAKEUPE));
					case USB_INT_SUSPI:
						return (UDIEN  & (1 << SUSPE));
					case USB_INT_EORSTI:
						return (UDIEN  & (1 << EORSTE));
   1faea:	80 91 e1 00 	lds	r24, 0x00E1
   1faee:	87 7f       	andi	r24, 0xF7	; 247
   1faf0:	80 93 e1 00 	sts	0x00E1, r24
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
						break;
					case USB_INT_EORSTI:
						UDINT  &= ~(1 << EORSTI);
   1faf4:	82 e0       	ldi	r24, 0x02	; 2
   1faf6:	8e bb       	out	0x1e, r24	; 30
   1faf8:	10 92 9e 01 	sts	0x019E, r1
	{
		USB_INT_Clear(USB_INT_EORSTI);

		USB_DeviceState                = DEVICE_STATE_Default;
   1fafc:	80 91 e1 00 	lds	r24, 0x00E1
		USB_Device_ConfigurationNumber = 0;
   1fb00:	8e 7f       	andi	r24, 0xFE	; 254
   1fb02:	80 93 e1 00 	sts	0x00E1, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDINT  &= ~(1 << WAKEUPI);
						break;
					case USB_INT_SUSPI:
						UDINT  &= ~(1 << SUSPI);
   1fb06:	80 91 e2 00 	lds	r24, 0x00E2
   1fb0a:	8e 7f       	andi	r24, 0xFE	; 254
   1fb0c:	80 93 e2 00 	sts	0x00E2, r24
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  &= ~(1 << WAKEUPE);
						break;
					case USB_INT_SUSPI:
						UDIEN  &= ~(1 << SUSPE);
   1fb10:	80 91 e2 00 	lds	r24, 0x00E2
   1fb14:	80 61       	ori	r24, 0x10	; 16
   1fb16:	80 93 e2 00 	sts	0x00E2, r24
						USBCON |= (1 << IDTE);
						break;
					#endif
					#if defined(USB_CAN_BE_DEVICE)
					case USB_INT_WAKEUPI:
						UDIEN  |= (1 << WAKEUPE);
   1fb1a:	80 e0       	ldi	r24, 0x00	; 0
   1fb1c:	60 e0       	ldi	r22, 0x00	; 0
   1fb1e:	42 e0       	ldi	r20, 0x02	; 2
   1fb20:	d6 de       	rcall	.-596    	; 0x1f8ce <Endpoint_ConfigureEndpoint_Prv>
				uint8_t Number = (Address & ENDPOINT_EPNUM_MASK);
			
				if (Number >= ENDPOINT_TOTAL_ENDPOINTS)
				  return false;
			
				return Endpoint_ConfigureEndpoint_Prv(Number,
   1fb22:	bf d1       	rcall	.+894    	; 0x1fea2 <USB_Event_Stub>
   1fb24:	ff 91       	pop	r31
   1fb26:	ef 91       	pop	r30
   1fb28:	bf 91       	pop	r27
   1fb2a:	af 91       	pop	r26

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
		#endif

		EVENT_USB_Device_Reset();
   1fb2c:	9f 91       	pop	r25
   1fb2e:	8f 91       	pop	r24
		USB_ResetInterface();

		EVENT_USB_UIDChange();
	}
	#endif
}
   1fb30:	7f 91       	pop	r23
   1fb32:	6f 91       	pop	r22
   1fb34:	5f 91       	pop	r21
   1fb36:	4f 91       	pop	r20
   1fb38:	3f 91       	pop	r19
   1fb3a:	2f 91       	pop	r18
   1fb3c:	0f 90       	pop	r0
   1fb3e:	0b be       	out	0x3b, r0	; 59
   1fb40:	0f 90       	pop	r0
   1fb42:	0f be       	out	0x3f, r0	; 63
   1fb44:	0f 90       	pop	r0
   1fb46:	1f 90       	pop	r1
   1fb48:	18 95       	reti

0001fb4a <Endpoint_Write_Control_Stream_LE>:
                            uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	bool     LastPacketFull = false;

	if (Length > USB_ControlRequest.wLength)
   1fb4a:	20 91 a6 01 	lds	r18, 0x01A6
   1fb4e:	30 91 a7 01 	lds	r19, 0x01A7
   1fb52:	26 17       	cp	r18, r22
   1fb54:	37 07       	cpc	r19, r23
   1fb56:	20 f4       	brcc	.+8      	; 0x1fb60 <Endpoint_Write_Control_Stream_LE+0x16>
   1fb58:	b9 01       	movw	r22, r18
   1fb5a:	fc 01       	movw	r30, r24
   1fb5c:	20 e0       	ldi	r18, 0x00	; 0
   1fb5e:	35 c0       	rjmp	.+106    	; 0x1fbca <Endpoint_Write_Control_Stream_LE+0x80>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
   1fb60:	61 15       	cp	r22, r1
   1fb62:	71 05       	cpc	r23, r1
   1fb64:	d1 f7       	brne	.-12     	; 0x1fb5a <Endpoint_Write_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fb66:	20 91 e8 00 	lds	r18, 0x00E8
   1fb6a:	2e 77       	andi	r18, 0x7E	; 126
   1fb6c:	20 93 e8 00 	sts	0x00E8, r18
   1fb70:	f4 cf       	rjmp	.-24     	; 0x1fb5a <Endpoint_Write_Control_Stream_LE+0x10>
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fb72:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fb74:	88 23       	and	r24, r24
   1fb76:	f1 f1       	breq	.+124    	; 0x1fbf4 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fb78:	85 30       	cpi	r24, 0x05	; 5
   1fb7a:	c1 f1       	breq	.+112    	; 0x1fbec <Endpoint_Write_Control_Stream_LE+0xa2>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fb7c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fb80:	83 fd       	sbrc	r24, 3
   1fb82:	36 c0       	rjmp	.+108    	; 0x1fbf0 <Endpoint_Write_Control_Stream_LE+0xa6>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fb84:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;
		else if (Endpoint_IsOUTReceived())
   1fb88:	82 fd       	sbrc	r24, 2
   1fb8a:	2a c0       	rjmp	.+84     	; 0x1fbe0 <Endpoint_Write_Control_Stream_LE+0x96>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fb8c:	80 91 e8 00 	lds	r24, 0x00E8
		  break;

		if (Endpoint_IsINReady())
   1fb90:	80 ff       	sbrs	r24, 0
   1fb92:	1b c0       	rjmp	.+54     	; 0x1fbca <Endpoint_Write_Control_Stream_LE+0x80>
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
   1fb94:	80 91 f2 00 	lds	r24, 0x00F2
   1fb98:	90 91 f3 00 	lds	r25, 0x00F3
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1fb9c:	06 c0       	rjmp	.+12     	; 0x1fbaa <Endpoint_Write_Control_Stream_LE+0x60>
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fb9e:	21 91       	ld	r18, Z+
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fba0:	20 93 f1 00 	sts	0x00F1, r18
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
   1fba4:	61 50       	subi	r22, 0x01	; 1
   1fba6:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
   1fba8:	01 96       	adiw	r24, 0x01	; 1

		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();

			while (Length && (BytesInEndpoint < USB_Device_ControlEndpointSize))
   1fbaa:	61 15       	cp	r22, r1
   1fbac:	71 05       	cpc	r23, r1
   1fbae:	19 f0       	breq	.+6      	; 0x1fbb6 <Endpoint_Write_Control_Stream_LE+0x6c>
   1fbb0:	88 30       	cpi	r24, 0x08	; 8
   1fbb2:	91 05       	cpc	r25, r1
   1fbb4:	a0 f3       	brcs	.-24     	; 0x1fb9e <Endpoint_Write_Control_Stream_LE+0x54>
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
				Length--;
				BytesInEndpoint++;
			}

			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
   1fbb6:	21 e0       	ldi	r18, 0x01	; 1
   1fbb8:	88 30       	cpi	r24, 0x08	; 8
   1fbba:	91 05       	cpc	r25, r1
   1fbbc:	09 f0       	breq	.+2      	; 0x1fbc0 <Endpoint_Write_Control_Stream_LE+0x76>
   1fbbe:	20 e0       	ldi	r18, 0x00	; 0
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fbc0:	80 91 e8 00 	lds	r24, 0x00E8
   1fbc4:	8e 77       	andi	r24, 0x7E	; 126
   1fbc6:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
   1fbca:	61 15       	cp	r22, r1
   1fbcc:	71 05       	cpc	r23, r1
   1fbce:	89 f6       	brne	.-94     	; 0x1fb72 <Endpoint_Write_Control_Stream_LE+0x28>
   1fbd0:	22 23       	and	r18, r18
   1fbd2:	79 f6       	brne	.-98     	; 0x1fb72 <Endpoint_Write_Control_Stream_LE+0x28>
   1fbd4:	05 c0       	rjmp	.+10     	; 0x1fbe0 <Endpoint_Write_Control_Stream_LE+0x96>
		}
	}

	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fbd6:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fbd8:	88 23       	and	r24, r24
   1fbda:	61 f0       	breq	.+24     	; 0x1fbf4 <Endpoint_Write_Control_Stream_LE+0xaa>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fbdc:	85 30       	cpi	r24, 0x05	; 5
   1fbde:	61 f0       	breq	.+24     	; 0x1fbf8 <Endpoint_Write_Control_Stream_LE+0xae>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fbe0:	80 91 e8 00 	lds	r24, 0x00E8
			LastPacketFull = (BytesInEndpoint == USB_Device_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}

	while (!(Endpoint_IsOUTReceived()))
   1fbe4:	82 ff       	sbrs	r24, 2
   1fbe6:	f7 cf       	rjmp	.-18     	; 0x1fbd6 <Endpoint_Write_Control_Stream_LE+0x8c>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1fbe8:	80 e0       	ldi	r24, 0x00	; 0
   1fbea:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fbec:	83 e0       	ldi	r24, 0x03	; 3
   1fbee:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1fbf0:	81 e0       	ldi	r24, 0x01	; 1
   1fbf2:	08 95       	ret
	while (!(Endpoint_IsOUTReceived()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1fbf4:	82 e0       	ldi	r24, 0x02	; 2
   1fbf6:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fbf8:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fbfa:	08 95       	ret

0001fbfc <Endpoint_Read_Control_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
   1fbfc:	61 15       	cp	r22, r1
   1fbfe:	71 05       	cpc	r23, r1
   1fc00:	29 f4       	brne	.+10     	; 0x1fc0c <Endpoint_Read_Control_Stream_LE+0x10>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fc02:	20 91 e8 00 	lds	r18, 0x00E8
   1fc06:	2b 77       	andi	r18, 0x7B	; 123
   1fc08:	20 93 e8 00 	sts	0x00E8, r18
#if defined(TEMPLATE_FUNC_NAME)

// cppcheck-suppress unusedFunction
uint8_t TEMPLATE_FUNC_NAME (void* const Buffer,
                            uint16_t Length)
{
   1fc0c:	38 2f       	mov	r19, r24
   1fc0e:	29 2f       	mov	r18, r25
   1fc10:	25 c0       	rjmp	.+74     	; 0x1fc5c <Endpoint_Read_Control_Stream_LE+0x60>
	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fc12:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fc14:	88 23       	and	r24, r24
   1fc16:	a9 f1       	breq	.+106    	; 0x1fc82 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fc18:	85 30       	cpi	r24, 0x05	; 5
   1fc1a:	79 f1       	breq	.+94     	; 0x1fc7a <Endpoint_Read_Control_Stream_LE+0x7e>
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fc1c:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_BusSuspended;
		else if (Endpoint_IsSETUPReceived())
   1fc20:	83 fd       	sbrc	r24, 3
   1fc22:	2d c0       	rjmp	.+90     	; 0x1fc7e <Endpoint_Read_Control_Stream_LE+0x82>
			 *  \return Boolean \c true if current endpoint is has received an OUT packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsOUTReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsOUTReceived(void)
			{
				return ((UEINTX & (1 << RXOUTI)) ? true : false);
   1fc24:	80 91 e8 00 	lds	r24, 0x00E8
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
   1fc28:	82 ff       	sbrs	r24, 2
   1fc2a:	f3 cf       	rjmp	.-26     	; 0x1fc12 <Endpoint_Read_Control_Stream_LE+0x16>
   1fc2c:	e3 2f       	mov	r30, r19
   1fc2e:	f2 2f       	mov	r31, r18
   1fc30:	08 c0       	rjmp	.+16     	; 0x1fc42 <Endpoint_Read_Control_Stream_LE+0x46>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fc32:	80 91 f1 00 	lds	r24, 0x00F1
		{
			while (Length && Endpoint_BytesInEndpoint())
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
   1fc36:	81 93       	st	Z+, r24
				TEMPLATE_BUFFER_MOVE(DataStream, 1);
   1fc38:	3e 2f       	mov	r19, r30
   1fc3a:	2f 2f       	mov	r18, r31
				Length--;
   1fc3c:	61 50       	subi	r22, 0x01	; 1
   1fc3e:	70 40       	sbci	r23, 0x00	; 0
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
		{
			while (Length && Endpoint_BytesInEndpoint())
   1fc40:	41 f0       	breq	.+16     	; 0x1fc52 <Endpoint_Read_Control_Stream_LE+0x56>
   1fc42:	3e 2f       	mov	r19, r30
   1fc44:	2f 2f       	mov	r18, r31
			 */
			static inline uint16_t Endpoint_BytesInEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint16_t Endpoint_BytesInEndpoint(void)
			{
				#if (defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)) && !defined(__AVR_ATmega32U6__)
					return UEBCX;
   1fc46:	80 91 f2 00 	lds	r24, 0x00F2
   1fc4a:	90 91 f3 00 	lds	r25, 0x00F3
   1fc4e:	00 97       	sbiw	r24, 0x00	; 0
   1fc50:	81 f7       	brne	.-32     	; 0x1fc32 <Endpoint_Read_Control_Stream_LE+0x36>
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fc52:	80 91 e8 00 	lds	r24, 0x00E8
   1fc56:	8b 77       	andi	r24, 0x7B	; 123
   1fc58:	80 93 e8 00 	sts	0x00E8, r24
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));

	if (!(Length))
	  Endpoint_ClearOUT();

	while (Length)
   1fc5c:	61 15       	cp	r22, r1
   1fc5e:	71 05       	cpc	r23, r1
   1fc60:	c1 f6       	brne	.-80     	; 0x1fc12 <Endpoint_Read_Control_Stream_LE+0x16>
   1fc62:	05 c0       	rjmp	.+10     	; 0x1fc6e <Endpoint_Read_Control_Stream_LE+0x72>
		}
	}

	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;
   1fc64:	8e b3       	in	r24, 0x1e	; 30

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
   1fc66:	88 23       	and	r24, r24
   1fc68:	61 f0       	breq	.+24     	; 0x1fc82 <Endpoint_Read_Control_Stream_LE+0x86>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
   1fc6a:	85 30       	cpi	r24, 0x05	; 5
   1fc6c:	61 f0       	breq	.+24     	; 0x1fc86 <Endpoint_Read_Control_Stream_LE+0x8a>
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fc6e:	80 91 e8 00 	lds	r24, 0x00E8

			Endpoint_ClearOUT();
		}
	}

	while (!(Endpoint_IsINReady()))
   1fc72:	80 ff       	sbrs	r24, 0
   1fc74:	f7 cf       	rjmp	.-18     	; 0x1fc64 <Endpoint_Read_Control_Stream_LE+0x68>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
	}

	return ENDPOINT_RWCSTREAM_NoError;
   1fc76:	80 e0       	ldi	r24, 0x00	; 0
   1fc78:	08 95       	ret
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fc7a:	83 e0       	ldi	r24, 0x03	; 3
   1fc7c:	08 95       	ret
		else if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
   1fc7e:	81 e0       	ldi	r24, 0x01	; 1
   1fc80:	08 95       	ret
	while (!(Endpoint_IsINReady()))
	{
		uint8_t USB_DeviceState_LCL = USB_DeviceState;

		if (USB_DeviceState_LCL == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
   1fc82:	82 e0       	ldi	r24, 0x02	; 2
   1fc84:	08 95       	ret
		else if (USB_DeviceState_LCL == DEVICE_STATE_Suspended)
		  return ENDPOINT_RWCSTREAM_BusSuspended;
   1fc86:	83 e0       	ldi	r24, 0x03	; 3
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
   1fc88:	08 95       	ret

0001fc8a <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_Device_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
   1fc8a:	0f 93       	push	r16
   1fc8c:	1f 93       	push	r17
   1fc8e:	cf 93       	push	r28
   1fc90:	df 93       	push	r29
   1fc92:	00 d0       	rcall	.+0      	; 0x1fc94 <USB_Device_ProcessControlRequest+0xa>
   1fc94:	cd b7       	in	r28, 0x3d	; 61
   1fc96:	de b7       	in	r29, 0x3e	; 62
   1fc98:	88 e0       	ldi	r24, 0x08	; 8
	USB_ControlRequest.bRequest      = Endpoint_Read_8();
	USB_ControlRequest.wValue        = Endpoint_Read_16_LE();
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;
   1fc9a:	e0 ea       	ldi	r30, 0xA0	; 160
   1fc9c:	f1 e0       	ldi	r31, 0x01	; 1
			 *  \return Next byte in the currently selected endpoint's FIFO buffer.
			 */
			static inline uint8_t Endpoint_Read_8(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_8(void)
			{
				return UEDATX;
   1fc9e:	90 91 f1 00 	lds	r25, 0x00F1

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_8();
   1fca2:	91 93       	st	Z+, r25
   1fca4:	81 50       	subi	r24, 0x01	; 1
	USB_ControlRequest.wIndex        = Endpoint_Read_16_LE();
	USB_ControlRequest.wLength       = Endpoint_Read_16_LE();
	#else
	uint8_t* RequestHeader = (uint8_t*)&USB_ControlRequest;

	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
   1fca6:	d9 f7       	brne	.-10     	; 0x1fc9e <USB_Device_ProcessControlRequest+0x14>
	  *(RequestHeader++) = Endpoint_Read_8();
	#endif

	EVENT_USB_Device_ControlRequest();
   1fca8:	56 dd       	rcall	.-1364   	; 0x1f756 <EVENT_USB_Device_ControlRequest>
   1fcaa:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fcae:	83 ff       	sbrs	r24, 3

	if (Endpoint_IsSETUPReceived())
   1fcb0:	e3 c0       	rjmp	.+454    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fcb2:	80 91 a0 01 	lds	r24, 0x01A0
	{
		uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
   1fcb6:	90 91 a1 01 	lds	r25, 0x01A1

		switch (USB_ControlRequest.bRequest)
   1fcba:	95 30       	cpi	r25, 0x05	; 5
   1fcbc:	09 f4       	brne	.+2      	; 0x1fcc0 <USB_Device_ProcessControlRequest+0x36>
   1fcbe:	6c c0       	rjmp	.+216    	; 0x1fd98 <USB_Device_ProcessControlRequest+0x10e>
   1fcc0:	96 30       	cpi	r25, 0x06	; 6
   1fcc2:	40 f4       	brcc	.+16     	; 0x1fcd4 <USB_Device_ProcessControlRequest+0x4a>
   1fcc4:	91 30       	cpi	r25, 0x01	; 1
   1fcc6:	69 f1       	breq	.+90     	; 0x1fd22 <USB_Device_ProcessControlRequest+0x98>
   1fcc8:	91 30       	cpi	r25, 0x01	; 1
   1fcca:	70 f0       	brcs	.+28     	; 0x1fce8 <USB_Device_ProcessControlRequest+0x5e>
   1fccc:	93 30       	cpi	r25, 0x03	; 3
   1fcce:	09 f0       	breq	.+2      	; 0x1fcd2 <USB_Device_ProcessControlRequest+0x48>
   1fcd0:	d3 c0       	rjmp	.+422    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fcd2:	27 c0       	rjmp	.+78     	; 0x1fd22 <USB_Device_ProcessControlRequest+0x98>
   1fcd4:	98 30       	cpi	r25, 0x08	; 8
   1fcd6:	09 f4       	brne	.+2      	; 0x1fcda <USB_Device_ProcessControlRequest+0x50>
   1fcd8:	a2 c0       	rjmp	.+324    	; 0x1fe1e <USB_Device_ProcessControlRequest+0x194>
   1fcda:	99 30       	cpi	r25, 0x09	; 9
   1fcdc:	09 f4       	brne	.+2      	; 0x1fce0 <USB_Device_ProcessControlRequest+0x56>
   1fcde:	b1 c0       	rjmp	.+354    	; 0x1fe42 <USB_Device_ProcessControlRequest+0x1b8>
   1fce0:	96 30       	cpi	r25, 0x06	; 6
   1fce2:	09 f0       	breq	.+2      	; 0x1fce6 <USB_Device_ProcessControlRequest+0x5c>
   1fce4:	c9 c0       	rjmp	.+402    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fce6:	7b c0       	rjmp	.+246    	; 0x1fdde <USB_Device_ProcessControlRequest+0x154>
   1fce8:	80 38       	cpi	r24, 0x80	; 128
		{
			case REQ_GetStatus:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fcea:	81 f0       	breq	.+32     	; 0x1fd0c <USB_Device_ProcessControlRequest+0x82>
   1fcec:	82 38       	cpi	r24, 0x82	; 130
   1fcee:	09 f0       	breq	.+2      	; 0x1fcf2 <USB_Device_ProcessControlRequest+0x68>
   1fcf0:	c3 c0       	rjmp	.+390    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fcf2:	80 91 a4 01 	lds	r24, 0x01A4
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
			#endif
			break;
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			#if !defined(CONTROL_ONLY_DEVICE)
			Endpoint_SelectEndpoint((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fcf6:	8f 70       	andi	r24, 0x0F	; 15
   1fcf8:	80 93 e9 00 	sts	0x00E9, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fcfc:	90 91 eb 00 	lds	r25, 0x00EB
			 *  \return Boolean \c true if the currently selected endpoint is stalled, \c false otherwise.
			 */
			static inline bool Endpoint_IsStalled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsStalled(void)
			{
				return ((UECONX & (1 << STALLRQ)) ? true : false);
   1fd00:	81 e0       	ldi	r24, 0x01	; 1

			CurrentStatus = Endpoint_IsStalled();
   1fd02:	95 ff       	sbrs	r25, 5
   1fd04:	80 e0       	ldi	r24, 0x00	; 0
   1fd06:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fd0a:	01 c0       	rjmp	.+2      	; 0x1fd0e <USB_Device_ProcessControlRequest+0x84>
   1fd0c:	80 e0       	ldi	r24, 0x00	; 0
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
   1fd0e:	90 91 e8 00 	lds	r25, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd12:	97 7f       	andi	r25, 0xF7	; 247
   1fd14:	90 93 e8 00 	sts	0x00E8, r25
   1fd18:	80 93 f1 00 	sts	0x00F1, r24
			 *  \param[in] Data  Data to write to the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_16_LE(const uint16_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_16_LE(const uint16_t Data)
			{
				UEDATX = (Data & 0xFF);
   1fd1c:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (Data >> 8);
   1fd20:	89 c0       	rjmp	.+274    	; 0x1fe34 <USB_Device_ProcessControlRequest+0x1aa>
   1fd22:	88 23       	and	r24, r24
				}

				break;
			case REQ_ClearFeature:
			case REQ_SetFeature:
				if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fd24:	19 f0       	breq	.+6      	; 0x1fd2c <USB_Device_ProcessControlRequest+0xa2>
   1fd26:	82 30       	cpi	r24, 0x02	; 2
   1fd28:	09 f0       	breq	.+2      	; 0x1fd2c <USB_Device_ProcessControlRequest+0xa2>
   1fd2a:	a6 c0       	rjmp	.+332    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fd2c:	8f 71       	andi	r24, 0x1F	; 31
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
   1fd2e:	82 30       	cpi	r24, 0x02	; 2
   1fd30:	09 f0       	breq	.+2      	; 0x1fd34 <USB_Device_ProcessControlRequest+0xaa>
   1fd32:	a2 c0       	rjmp	.+324    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fd34:	80 91 a2 01 	lds	r24, 0x01A2

			break;
		#endif
		#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_SEL_EndpointHalt)
   1fd38:	88 23       	and	r24, r24
   1fd3a:	41 f5       	brne	.+80     	; 0x1fd8c <USB_Device_ProcessControlRequest+0x102>
   1fd3c:	20 91 a4 01 	lds	r18, 0x01A4
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
   1fd40:	2f 70       	andi	r18, 0x0F	; 15
   1fd42:	09 f4       	brne	.+2      	; 0x1fd46 <USB_Device_ProcessControlRequest+0xbc>

				if (EndpointIndex == ENDPOINT_CONTROLEP)
   1fd44:	99 c0       	rjmp	.+306    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fd46:	20 93 e9 00 	sts	0x00E9, r18
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fd4a:	80 91 eb 00 	lds	r24, 0x00EB
			 * \return Boolean \c true if the currently selected endpoint is enabled, \c false otherwise.
			 */
			static inline bool Endpoint_IsEnabled(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsEnabled(void)
			{
				return ((UECONX & (1 << EPEN)) ? true : false);
   1fd4e:	80 ff       	sbrs	r24, 0
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);

				if (Endpoint_IsEnabled())
   1fd50:	1d c0       	rjmp	.+58     	; 0x1fd8c <USB_Device_ProcessControlRequest+0x102>
   1fd52:	80 91 a1 01 	lds	r24, 0x01A1
				{
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
   1fd56:	83 30       	cpi	r24, 0x03	; 3
   1fd58:	21 f4       	brne	.+8      	; 0x1fd62 <USB_Device_ProcessControlRequest+0xd8>
   1fd5a:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fd5e:	80 62       	ori	r24, 0x20	; 32
   1fd60:	13 c0       	rjmp	.+38     	; 0x1fd88 <USB_Device_ProcessControlRequest+0xfe>
   1fd62:	80 91 eb 00 	lds	r24, 0x00EB
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_ClearStall(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearStall(void)
			{
				UECONX |= (1 << STALLRQC);
   1fd66:	80 61       	ori	r24, 0x10	; 16
   1fd68:	80 93 eb 00 	sts	0x00EB, r24
   1fd6c:	81 e0       	ldi	r24, 0x01	; 1
			 *  \param[in] Address  Endpoint address whose FIFO buffers are to be reset.
			 */
			static inline void Endpoint_ResetEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetEndpoint(const uint8_t Address)
			{
				UERST = (1 << (Address & ENDPOINT_EPNUM_MASK));
   1fd6e:	90 e0       	ldi	r25, 0x00	; 0
   1fd70:	02 c0       	rjmp	.+4      	; 0x1fd76 <USB_Device_ProcessControlRequest+0xec>
   1fd72:	88 0f       	add	r24, r24
   1fd74:	99 1f       	adc	r25, r25
   1fd76:	2a 95       	dec	r18
   1fd78:	e2 f7       	brpl	.-8      	; 0x1fd72 <USB_Device_ProcessControlRequest+0xe8>
   1fd7a:	80 93 ea 00 	sts	0x00EA, r24
   1fd7e:	10 92 ea 00 	sts	0x00EA, r1
				UERST = 0;
   1fd82:	80 91 eb 00 	lds	r24, 0x00EB

			/** Resets the data toggle of the currently selected endpoint. */
			static inline void Endpoint_ResetDataToggle(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ResetDataToggle(void)
			{
				UECONX |= (1 << RSTDT);
   1fd86:	88 60       	ori	r24, 0x08	; 8
   1fd88:	80 93 eb 00 	sts	0x00EB, r24
   1fd8c:	10 92 e9 00 	sts	0x00E9, r1
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fd90:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fd94:	87 7f       	andi	r24, 0xF7	; 247
   1fd96:	51 c0       	rjmp	.+162    	; 0x1fe3a <USB_Device_ProcessControlRequest+0x1b0>
   1fd98:	88 23       	and	r24, r24
					USB_Device_ClearSetFeature();
				}

				break;
			case REQ_SetAddress:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fd9a:	09 f0       	breq	.+2      	; 0x1fd9e <USB_Device_ProcessControlRequest+0x114>
   1fd9c:	6d c0       	rjmp	.+218    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fd9e:	10 91 a2 01 	lds	r17, 0x01A2
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t    DeviceAddress    = (USB_ControlRequest.wValue & 0x7F);
   1fda2:	1f 77       	andi	r17, 0x7F	; 127
   1fda4:	0f b7       	in	r16, 0x3f	; 63
			static inline uint_reg_t GetGlobalInterruptMask(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				return SREG;
   1fda6:	f8 94       	cli
			static inline void GlobalInterruptDisable(void)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				cli();
   1fda8:	80 91 e8 00 	lds	r24, 0x00E8
   1fdac:	87 7f       	andi	r24, 0xF7	; 247
   1fdae:	80 93 e8 00 	sts	0x00E8, r24
   1fdb2:	a1 dd       	rcall	.-1214   	; 0x1f8f6 <Endpoint_ClearStatusStage>
	uint_reg_t CurrentGlobalInt = GetGlobalInterruptMask();
	GlobalInterruptDisable();

	Endpoint_ClearSETUP();

	Endpoint_ClearStatusStage();
   1fdb4:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \return Boolean \c true if the current endpoint is ready for an IN packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsINReady(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsINReady(void)
			{
				return ((UEINTX & (1 << TXINI)) ? true : false);
   1fdb8:	80 ff       	sbrs	r24, 0
   1fdba:	fc cf       	rjmp	.-8      	; 0x1fdb4 <USB_Device_ProcessControlRequest+0x12a>

	while (!(Endpoint_IsINReady()));
   1fdbc:	80 91 e3 00 	lds	r24, 0x00E3
			#endif

			static inline void USB_Device_SetDeviceAddress(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void USB_Device_SetDeviceAddress(const uint8_t Address)
			{
				uint8_t Temp = (UDADDR & (1 << ADDEN)) | (Address & 0x7F);
   1fdc0:	80 78       	andi	r24, 0x80	; 128
   1fdc2:	81 2b       	or	r24, r17
   1fdc4:	80 93 e3 00 	sts	0x00E3, r24

				UDADDR = Temp;
   1fdc8:	80 68       	ori	r24, 0x80	; 128
   1fdca:	80 93 e3 00 	sts	0x00E3, r24
				UDADDR = Temp | (1 << ADDEN);
   1fdce:	11 23       	and	r17, r17
   1fdd0:	11 f0       	breq	.+4      	; 0x1fdd6 <USB_Device_ProcessControlRequest+0x14c>

	USB_Device_SetDeviceAddress(DeviceAddress);
	USB_DeviceState = (DeviceAddress) ? DEVICE_STATE_Addressed : DEVICE_STATE_Default;
   1fdd2:	83 e0       	ldi	r24, 0x03	; 3
   1fdd4:	01 c0       	rjmp	.+2      	; 0x1fdd8 <USB_Device_ProcessControlRequest+0x14e>
   1fdd6:	82 e0       	ldi	r24, 0x02	; 2
   1fdd8:	8e bb       	out	0x1e, r24	; 30
   1fdda:	0f bf       	out	0x3f, r16	; 63
   1fddc:	4d c0       	rjmp	.+154    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
			static inline void SetGlobalInterruptMask(const uint_reg_t GlobalIntState)
			{
				GCC_MEMORY_BARRIER();

				#if (ARCH == ARCH_AVR8)
				SREG = GlobalIntState;
   1fdde:	80 58       	subi	r24, 0x80	; 128
				  __builtin_csrf(AVR32_SR_GM_OFFSET);
				#elif (ARCH == ARCH_XMEGA)
				SREG = GlobalIntState;
				#endif

				GCC_MEMORY_BARRIER();
   1fde0:	82 30       	cpi	r24, 0x02	; 2
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_SetAddress();

				break;
			case REQ_GetDescriptor:
				if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
   1fde2:	08 f0       	brcs	.+2      	; 0x1fde6 <USB_Device_ProcessControlRequest+0x15c>
   1fde4:	49 c0       	rjmp	.+146    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fde6:	80 91 a2 01 	lds	r24, 0x01A2
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif

	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
   1fdea:	90 91 a3 01 	lds	r25, 0x01A3
   1fdee:	60 91 a4 01 	lds	r22, 0x01A4
   1fdf2:	ae 01       	movw	r20, r28
   1fdf4:	4f 5f       	subi	r20, 0xFF	; 255
   1fdf6:	5f 4f       	sbci	r21, 0xFF	; 255
   1fdf8:	de dc       	rcall	.-1604   	; 0x1f7b6 <CALLBACK_USB_GetDescriptor>
   1fdfa:	bc 01       	movw	r22, r24
   1fdfc:	00 97       	sbiw	r24, 0x00	; 0
   1fdfe:	09 f4       	brne	.+2      	; 0x1fe02 <USB_Device_ProcessControlRequest+0x178>
   1fe00:	3b c0       	rjmp	.+118    	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fe02:	80 91 e8 00 	lds	r24, 0x00E8
   1fe06:	87 7f       	andi	r24, 0xF7	; 247
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fe08:	80 93 e8 00 	sts	0x00E8, r24
   1fe0c:	89 81       	ldd	r24, Y+1	; 0x01
   1fe0e:	9a 81       	ldd	r25, Y+2	; 0x02
   1fe10:	9c de       	rcall	.-712    	; 0x1fb4a <Endpoint_Write_Control_Stream_LE>
	}

	Endpoint_ClearSETUP();

	#if defined(USE_RAM_DESCRIPTORS) || !defined(ARCH_HAS_MULTI_ADDRESS_SPACE)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
   1fe12:	80 91 e8 00 	lds	r24, 0x00E8
   1fe16:	8b 77       	andi	r24, 0x7B	; 123
   1fe18:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearOUT(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearOUT(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << RXOUTI) | (1 << FIFOCON));
   1fe1c:	2d c0       	rjmp	.+90     	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fe1e:	80 38       	cpi	r24, 0x80	; 128
   1fe20:	59 f5       	brne	.+86     	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fe22:	80 91 e8 00 	lds	r24, 0x00E8
					USB_Device_GetDescriptor();
				}

				break;
			case REQ_GetConfiguration:
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
   1fe26:	87 7f       	andi	r24, 0xF7	; 247
   1fe28:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fe2c:	80 91 9e 01 	lds	r24, 0x019E
   1fe30:	80 93 f1 00 	sts	0x00F1, r24

static void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();

	Endpoint_Write_8(USB_Device_ConfigurationNumber);
   1fe34:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \param[in] Data  Data to write into the the currently selected endpoint's FIFO buffer.
			 */
			static inline void Endpoint_Write_8(const uint8_t Data) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_8(const uint8_t Data)
			{
				UEDATX = Data;
   1fe38:	8e 77       	andi	r24, 0x7E	; 126
   1fe3a:	80 93 e8 00 	sts	0x00E8, r24
			 */
			static inline void Endpoint_ClearIN(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearIN(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UEINTX &= ~((1 << TXINI) | (1 << FIFOCON));
   1fe3e:	5b dd       	rcall	.-1354   	; 0x1f8f6 <Endpoint_ClearStatusStage>
   1fe40:	1b c0       	rjmp	.+54     	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fe42:	88 23       	and	r24, r24
   1fe44:	c9 f4       	brne	.+50     	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
	Endpoint_ClearIN();

	Endpoint_ClearStatusStage();
   1fe46:	90 91 a2 01 	lds	r25, 0x01A2
   1fe4a:	92 30       	cpi	r25, 0x02	; 2
				if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
				  USB_Device_GetConfiguration();

				break;
			case REQ_SetConfiguration:
				if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
   1fe4c:	a8 f4       	brcc	.+42     	; 0x1fe78 <USB_Device_ProcessControlRequest+0x1ee>
   1fe4e:	80 91 e8 00 	lds	r24, 0x00E8
}

static void USB_Device_SetConfiguration(void)
{
	#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
   1fe52:	87 7f       	andi	r24, 0xF7	; 247
   1fe54:	80 93 e8 00 	sts	0x00E8, r24
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fe58:	90 93 9e 01 	sts	0x019E, r25
   1fe5c:	4c dd       	rcall	.-1384   	; 0x1f8f6 <Endpoint_ClearStatusStage>
   1fe5e:	80 91 9e 01 	lds	r24, 0x019E
	#endif
	#endif

	Endpoint_ClearSETUP();

	USB_Device_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
   1fe62:	88 23       	and	r24, r24
   1fe64:	21 f4       	brne	.+8      	; 0x1fe6e <USB_Device_ProcessControlRequest+0x1e4>

	Endpoint_ClearStatusStage();
   1fe66:	80 91 e3 00 	lds	r24, 0x00E3

	if (USB_Device_ConfigurationNumber)
   1fe6a:	87 ff       	sbrs	r24, 7
   1fe6c:	02 c0       	rjmp	.+4      	; 0x1fe72 <USB_Device_ProcessControlRequest+0x1e8>
   1fe6e:	84 e0       	ldi	r24, 0x04	; 4
   1fe70:	01 c0       	rjmp	.+2      	; 0x1fe74 <USB_Device_ProcessControlRequest+0x1ea>
			}

			static inline bool USB_Device_IsAddressSet(void) ATTR_ALWAYS_INLINE ATTR_WARN_UNUSED_RESULT;
			static inline bool USB_Device_IsAddressSet(void)
			{
				return (UDADDR & (1 << ADDEN));
   1fe72:	81 e0       	ldi	r24, 0x01	; 1
   1fe74:	8e bb       	out	0x1e, r24	; 30
	  USB_DeviceState = DEVICE_STATE_Configured;
	else
	  USB_DeviceState = (USB_Device_IsAddressSet()) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
   1fe76:	63 dc       	rcall	.-1850   	; 0x1f73e <EVENT_USB_Device_ConfigurationChanged>
   1fe78:	80 91 e8 00 	lds	r24, 0x00E8
   1fe7c:	83 ff       	sbrs	r24, 3
   1fe7e:	0a c0       	rjmp	.+20     	; 0x1fe94 <USB_Device_ProcessControlRequest+0x20a>
   1fe80:	80 91 eb 00 	lds	r24, 0x00EB

	EVENT_USB_Device_ConfigurationChanged();
   1fe84:	80 62       	ori	r24, 0x20	; 32
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fe86:	80 93 eb 00 	sts	0x00EB, r24

				break;
		}
	}

	if (Endpoint_IsSETUPReceived())
   1fe8a:	80 91 e8 00 	lds	r24, 0x00E8
			 *  \ingroup Group_EndpointPacketManagement_AVR8
			 */
			static inline void Endpoint_StallTransaction(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_StallTransaction(void)
			{
				UECONX |= (1 << STALLRQ);
   1fe8e:	87 7f       	andi	r24, 0xF7	; 247
   1fe90:	80 93 e8 00 	sts	0x00E8, r24
   1fe94:	0f 90       	pop	r0
   1fe96:	0f 90       	pop	r0
			 *  \note This is not applicable for non CONTROL type endpoints.
			 */
			static inline void Endpoint_ClearSETUP(void) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_ClearSETUP(void)
			{
				UEINTX &= ~(1 << RXSTPI);
   1fe98:	df 91       	pop	r29
   1fe9a:	cf 91       	pop	r28
   1fe9c:	1f 91       	pop	r17
   1fe9e:	0f 91       	pop	r16
   1fea0:	08 95       	ret

0001fea2 <USB_Event_Stub>:

// cppcheck-suppress unusedFunction
void USB_Event_Stub(void)
{

}
   1fea2:	08 95       	ret

0001fea4 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
   1fea4:	cf 93       	push	r28
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
   1fea6:	8e b3       	in	r24, 0x1e	; 30
   1fea8:	88 23       	and	r24, r24
   1feaa:	a9 f0       	breq	.+42     	; 0x1fed6 <USB_USBTask+0x32>
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1feac:	80 91 e9 00 	lds	r24, 0x00E9
   1feb0:	8f 70       	andi	r24, 0x0F	; 15
			 *  \return The currently selected endpoint's direction, as a \c ENDPOINT_DIR_* mask.
			 */
			static inline uint8_t Endpoint_GetEndpointDirection(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetEndpointDirection(void)
			{
				return (UECFG0X & (1 << EPDIR)) ? ENDPOINT_DIR_IN : ENDPOINT_DIR_OUT;
   1feb2:	90 91 ec 00 	lds	r25, 0x00EC
   1feb6:	90 ff       	sbrs	r25, 0
   1feb8:	02 c0       	rjmp	.+4      	; 0x1febe <USB_USBTask+0x1a>
   1feba:	c0 e8       	ldi	r28, 0x80	; 128
   1febc:	01 c0       	rjmp	.+2      	; 0x1fec0 <USB_USBTask+0x1c>
   1febe:	c0 e0       	ldi	r28, 0x00	; 0
			 */
			static inline uint8_t Endpoint_GetCurrentEndpoint(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_GetCurrentEndpoint(void)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					return ((UENUM & ENDPOINT_EPNUM_MASK) | Endpoint_GetEndpointDirection());
   1fec0:	c8 2b       	or	r28, r24
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fec2:	10 92 e9 00 	sts	0x00E9, r1
			 *  \return Boolean \c true if the selected endpoint has received a SETUP packet, \c false otherwise.
			 */
			static inline bool Endpoint_IsSETUPReceived(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline bool Endpoint_IsSETUPReceived(void)
			{
				return ((UEINTX & (1 << RXSTPI)) ? true : false);
   1fec6:	80 91 e8 00 	lds	r24, 0x00E8
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();

		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);

		if (Endpoint_IsSETUPReceived())
   1feca:	83 ff       	sbrs	r24, 3
   1fecc:	01 c0       	rjmp	.+2      	; 0x1fed0 <USB_USBTask+0x2c>
		  USB_Device_ProcessControlRequest();
   1fece:	dd de       	rcall	.-582    	; 0x1fc8a <USB_Device_ProcessControlRequest>
   1fed0:	cf 70       	andi	r28, 0x0F	; 15
			 */
			static inline void Endpoint_SelectEndpoint(const uint8_t Address) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_SelectEndpoint(const uint8_t Address)
			{
				#if !defined(CONTROL_ONLY_DEVICE)
					UENUM = (Address & ENDPOINT_EPNUM_MASK);
   1fed2:	c0 93 e9 00 	sts	0x00E9, r28
   1fed6:	cf 91       	pop	r28
		#if defined(USB_CAN_BE_HOST)
		else if (USB_CurrentMode == USB_MODE_Host)
		  USB_HostTask();
		#endif
	#endif
}
   1fed8:	08 95       	ret

0001feda <__eerd_byte_usb1287>:
   1feda:	f9 99       	sbic	0x1f, 1	; 31
   1fedc:	fe cf       	rjmp	.-4      	; 0x1feda <__eerd_byte_usb1287>
   1fede:	92 bd       	out	0x22, r25	; 34
   1fee0:	81 bd       	out	0x21, r24	; 33
   1fee2:	f8 9a       	sbi	0x1f, 0	; 31
   1fee4:	99 27       	eor	r25, r25
   1fee6:	80 b5       	in	r24, 0x20	; 32
   1fee8:	08 95       	ret

0001feea <__eewr_byte_usb1287>:
   1feea:	26 2f       	mov	r18, r22

0001feec <__eewr_r18_usb1287>:
   1feec:	f9 99       	sbic	0x1f, 1	; 31
   1feee:	fe cf       	rjmp	.-4      	; 0x1feec <__eewr_r18_usb1287>
   1fef0:	1f ba       	out	0x1f, r1	; 31
   1fef2:	92 bd       	out	0x22, r25	; 34
   1fef4:	81 bd       	out	0x21, r24	; 33
   1fef6:	20 bd       	out	0x20, r18	; 32
   1fef8:	0f b6       	in	r0, 0x3f	; 63
   1fefa:	f8 94       	cli
   1fefc:	fa 9a       	sbi	0x1f, 2	; 31
   1fefe:	f9 9a       	sbi	0x1f, 1	; 31
   1ff00:	0f be       	out	0x3f, r0	; 63
   1ff02:	01 96       	adiw	r24, 0x01	; 1
   1ff04:	08 95       	ret

0001ff06 <_exit>:
   1ff06:	f8 94       	cli

0001ff08 <__stop_program>:
   1ff08:	ff cf       	rjmp	.-2      	; 0x1ff08 <__stop_program>

Disassembly of section .apitable_trampolines:

0001ffa0 <BootloaderAPI_Trampolines>:
.section .apitable_trampolines, "ax"
.global BootloaderAPI_Trampolines
BootloaderAPI_Trampolines:

	BootloaderAPI_ErasePage_Trampoline:
		jmp BootloaderAPI_ErasePage
   1ffa0:	38 cc       	rjmp	.-1936   	; 0x1f812 <BootloaderAPI_ErasePage>

0001ffa2 <BootloaderAPI_WritePage_Trampoline>:
   1ffa2:	4d cc       	rjmp	.-1894   	; 0x1f83e <BootloaderAPI_WritePage>

0001ffa4 <BootloaderAPI_FillWord_Trampoline>:
	BootloaderAPI_WritePage_Trampoline:
		jmp BootloaderAPI_WritePage
   1ffa4:	62 cc       	rjmp	.-1852   	; 0x1f86a <BootloaderAPI_FillWord>

0001ffa6 <BootloaderAPI_ReadSignature_Trampoline>:
   1ffa6:	72 cc       	rjmp	.-1820   	; 0x1f88c <BootloaderAPI_ReadSignature>

0001ffa8 <BootloaderAPI_ReadFuse_Trampoline>:
	BootloaderAPI_FillWord_Trampoline:
		jmp BootloaderAPI_FillWord
   1ffa8:	77 cc       	rjmp	.-1810   	; 0x1f898 <BootloaderAPI_ReadFuse>

0001ffaa <BootloaderAPI_ReadLock_Trampoline>:
   1ffaa:	7c cc       	rjmp	.-1800   	; 0x1f8a4 <BootloaderAPI_ReadLock>

0001ffac <BootloaderAPI_WriteLock_Trampoline>:
	BootloaderAPI_ReadSignature_Trampoline:
		jmp BootloaderAPI_ReadSignature
   1ffac:	82 cc       	rjmp	.-1788   	; 0x1f8b2 <BootloaderAPI_WriteLock>

0001ffae <BootloaderAPU_UNUSED1>:
   1ffae:	08 95       	ret

0001ffb0 <BootloaderAPU_UNUSED2>:
	BootloaderAPI_ReadFuse_Trampoline:
		jmp BootloaderAPI_ReadFuse
   1ffb0:	08 95       	ret

0001ffb2 <BootloaderAPU_UNUSED3>:
   1ffb2:	08 95       	ret

0001ffb4 <BootloaderAPU_UNUSED4>:
	BootloaderAPI_ReadLock_Trampoline:
		jmp BootloaderAPI_ReadLock
   1ffb4:	08 95       	ret

0001ffb6 <BootloaderAPU_UNUSED5>:
   1ffb6:	08 95       	ret

Disassembly of section .apitable_jumptable:

0001ffe0 <BootloaderAPI_JumpTable>:
; API function jump table
.section .apitable_jumptable, "ax"
.global BootloaderAPI_JumpTable
BootloaderAPI_JumpTable:

	rjmp BootloaderAPI_ErasePage_Trampoline
   1ffe0:	df cf       	rjmp	.-66     	; 0x1ffa0 <BootloaderAPI_Trampolines>
	rjmp BootloaderAPI_WritePage_Trampoline
   1ffe2:	df cf       	rjmp	.-66     	; 0x1ffa2 <BootloaderAPI_WritePage_Trampoline>
	rjmp BootloaderAPI_FillWord_Trampoline
   1ffe4:	df cf       	rjmp	.-66     	; 0x1ffa4 <BootloaderAPI_FillWord_Trampoline>
	rjmp BootloaderAPI_ReadSignature_Trampoline
   1ffe6:	df cf       	rjmp	.-66     	; 0x1ffa6 <BootloaderAPI_ReadSignature_Trampoline>
	rjmp BootloaderAPI_ReadFuse_Trampoline
   1ffe8:	df cf       	rjmp	.-66     	; 0x1ffa8 <BootloaderAPI_ReadFuse_Trampoline>
	rjmp BootloaderAPI_ReadLock_Trampoline
   1ffea:	df cf       	rjmp	.-66     	; 0x1ffaa <BootloaderAPI_ReadLock_Trampoline>
	rjmp BootloaderAPI_WriteLock_Trampoline
   1ffec:	df cf       	rjmp	.-66     	; 0x1ffac <BootloaderAPI_WriteLock_Trampoline>
	rjmp BootloaderAPU_UNUSED1 ; UNUSED ENTRY 1
   1ffee:	df cf       	rjmp	.-66     	; 0x1ffae <BootloaderAPU_UNUSED1>
	rjmp BootloaderAPU_UNUSED2 ; UNUSED ENTRY 2
   1fff0:	df cf       	rjmp	.-66     	; 0x1ffb0 <BootloaderAPU_UNUSED2>
	rjmp BootloaderAPU_UNUSED3 ; UNUSED ENTRY 3
   1fff2:	df cf       	rjmp	.-66     	; 0x1ffb2 <BootloaderAPU_UNUSED3>
	rjmp BootloaderAPU_UNUSED4 ; UNUSED ENTRY 4
   1fff4:	df cf       	rjmp	.-66     	; 0x1ffb4 <BootloaderAPU_UNUSED4>
	rjmp BootloaderAPU_UNUSED5 ; UNUSED ENTRY 5
   1fff6:	df cf       	rjmp	.-66     	; 0x1ffb6 <BootloaderAPU_UNUSED5>

Disassembly of section .apitable_signatures:

0001fff8 <BootloaderAPI_Signatures>:
   1fff8:	00 f0       	brcs	.+0      	; 0x1fffa <BootloaderAPI_Signatures+0x2>
   1fffa:	01 00       	.word	0x0001	; ????
   1fffc:	b1 df       	rcall	.-158    	; 0x1ff60 <_etext+0x56>
   1fffe:	fb dc       	rcall	.-1546   	; 0x1f9f6 <__vector_10+0x16>
